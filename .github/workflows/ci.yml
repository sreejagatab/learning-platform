name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 0 * * 0'  # Run weekly on Sundays at midnight

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mongodb:
        image: mongo:4.4
        ports:
          - 27017:27017

    strategy:
      matrix:
        node-version: [18.x]

    steps:
    - uses: actions/checkout@v3

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install server dependencies
      run: |
        cd server
        npm ci

    - name: Run server tests
      run: |
        cd server
        npm test -- --coverage
      env:
        NODE_ENV: test
        MONGO_URI: mongodb://localhost:27017/learning-platform-test
        JWT_SECRET: test-jwt-secret
        JWT_EXPIRE: 1h

    - name: Run server edge case tests
      run: |
        cd server
        npx jest tests/edge-cases.test.js
      env:
        NODE_ENV: test
        MONGO_URI: mongodb://localhost:27017/learning-platform-test
        JWT_SECRET: test-jwt-secret
        JWT_EXPIRE: 1h

    - name: Install client dependencies
      run: |
        cd client
        npm ci

    - name: Run client tests
      run: |
        cd client
        npm test -- --coverage --watchAll=false

    - name: Run client complex scenario tests
      run: |
        cd client
        npx jest src/tests/complex-scenarios.test.js

    - name: Upload server coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        directory: ./server/coverage
        flags: server

    - name: Upload client coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        directory: ./client/coverage
        flags: client

    - name: Generate test report
      run: |
        mkdir -p test-reports
        echo "# Test Results" > test-reports/test-summary.md
        echo "## Server Tests" >> test-reports/test-summary.md
        cd server && npx jest --json | tee ../test-reports/server-test-results.json || true
        cd ..
        echo "## Client Tests" >> test-reports/test-summary.md
        cd client && npx jest --json | tee ../test-reports/client-test-results.json || true
        cd ..
        node -e "
          const fs = require('fs');
          const serverResults = JSON.parse(fs.readFileSync('./test-reports/server-test-results.json', 'utf8'));
          const clientResults = JSON.parse(fs.readFileSync('./test-reports/client-test-results.json', 'utf8'));

          const report = fs.readFileSync('./test-reports/test-summary.md', 'utf8');

          const serverSummary = \`
          - Total: \${serverResults.numTotalTests}
          - Passed: \${serverResults.numPassedTests}
          - Failed: \${serverResults.numFailedTests}
          - Pending: \${serverResults.numPendingTests}
          - Duration: \${(serverResults.testResults.reduce((acc, result) => acc + result.perfStats.runtime, 0) / 1000).toFixed(2)}s
          \`;

          const clientSummary = \`
          - Total: \${clientResults.numTotalTests}
          - Passed: \${clientResults.numPassedTests}
          - Failed: \${clientResults.numFailedTests}
          - Pending: \${clientResults.numPendingTests}
          - Duration: \${(clientResults.testResults.reduce((acc, result) => acc + result.perfStats.runtime, 0) / 1000).toFixed(2)}s
          \`;

          const updatedReport = report
            .replace('## Server Tests', '## Server Tests\n' + serverSummary)
            .replace('## Client Tests', '## Client Tests\n' + clientSummary);

          fs.writeFileSync('./test-reports/test-summary.md', updatedReport);
        "

    - name: Upload test reports
      uses: actions/upload-artifact@v3
      with:
        name: test-reports
        path: test-reports/

  lint:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x]

    steps:
    - uses: actions/checkout@v3

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install server dependencies
      run: |
        cd server
        npm ci

    - name: Lint server code
      run: |
        cd server
        npm run lint

    - name: Install client dependencies
      run: |
        cd client
        npm ci

    - name: Lint client code
      run: |
        cd client
        npm run lint

  security:
    runs-on: ubuntu-latest
    needs: [test, lint]

    strategy:
      matrix:
        node-version: [18.x]

    steps:
    - uses: actions/checkout@v3

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm install
        cd server && npm ci
        cd ../client && npm ci

    - name: Run dependency vulnerability check
      run: |
        mkdir -p security-tests/reports
        node security-tests/dependency-check.js || true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: security-tests/reports/

    - name: Check for critical vulnerabilities
      run: |
        if grep -q '"critical": [^0]' security-tests/reports/combined-audit-summary.json; then
          echo "Critical vulnerabilities found!"
          exit 1
        fi

  accessibility:
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

    services:
      mongodb:
        image: mongo:4.4
        ports:
          - 27017:27017

    strategy:
      matrix:
        node-version: [18.x]

    steps:
    - uses: actions/checkout@v3

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm install
        cd server && npm ci
        cd ../client && npm ci
        cd ../e2e && npm ci

    - name: Install Cypress
      run: |
        cd e2e
        npm install cypress@12.14.0 axe-core cypress-axe --save-dev

    - name: Start server and client
      run: |
        npm run start &
        sleep 30

    - name: Run accessibility tests
      run: |
        cd e2e
        npx cypress run --spec 'cypress/e2e/accessibility.cy.js' --config video=false || true

    - name: Upload accessibility reports
      uses: actions/upload-artifact@v3
      with:
        name: accessibility-reports
        path: e2e/cypress/screenshots/

  visual-regression:
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

    services:
      mongodb:
        image: mongo:4.4
        ports:
          - 27017:27017

    strategy:
      matrix:
        node-version: [18.x]

    steps:
    - uses: actions/checkout@v3

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm install
        cd server && npm ci
        cd ../client && npm ci
        cd ../e2e && npm ci

    - name: Install Percy and Cypress
      run: |
        cd e2e
        npm install @percy/cli @percy/cypress cypress@12.14.0 --save-dev

    - name: Start server and client
      run: |
        npm run start &
        sleep 30

    - name: Run visual regression tests
      run: |
        cd e2e
        npx percy exec -- cypress run --spec 'cypress/e2e/visual-regression.cy.js' --config video=false
      env:
        PERCY_TOKEN: ${{ secrets.PERCY_TOKEN }}
