{"version":3,"file":"static/js/122.389f3ac9.chunk.js","mappings":"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","sources":["pages/Profile.js"],"sourcesContent":["import React, { useState, useContext, useEffect } from 'react';\nimport {\n  Container,\n  Typography,\n  Box,\n  Paper,\n  Divider,\n  TextField,\n  Button,\n  Grid,\n  Avatar,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Alert,\n  CircularProgress,\n  Tabs,\n  Tab,\n  Card,\n  CardContent,\n  Switch,\n  FormControlLabel,\n} from '@mui/material';\nimport {\n  Save as SaveIcon,\n  Lock as LockIcon,\n  Person as PersonIcon,\n  Settings as SettingsIcon,\n} from '@mui/icons-material';\n\nimport AuthContext from '../context/AuthContext';\nimport LearningContext from '../context/LearningContext';\n\n// Tab Panel component\nfunction TabPanel(props) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`profile-tabpanel-${index}`}\n      aria-labelledby={`profile-tab-${index}`}\n      {...other}\n    >\n      {value === index && (\n        <Box sx={{ p: 3 }}>\n          {children}\n        </Box>\n      )}\n    </div>\n  );\n}\n\nconst Profile = () => {\n  const { user, updateProfile, changePassword, loading: authLoading } = useContext(AuthContext);\n  const { userLevel, updateUserLevel } = useContext(LearningContext);\n\n  const [activeTab, setActiveTab] = useState(0);\n  const [profileData, setProfileData] = useState({\n    name: '',\n    email: '',\n    bio: '',\n  });\n  const [passwordData, setPasswordData] = useState({\n    currentPassword: '',\n    newPassword: '',\n    confirmPassword: '',\n  });\n  const [preferences, setPreferences] = useState({\n    level: userLevel || 'intermediate',\n    emailNotifications: true,\n    saveHistory: true,\n    darkMode: false,\n  });\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [success, setSuccess] = useState(null);\n\n  // Load user data\n  useEffect(() => {\n    if (user) {\n      setProfileData({\n        name: user.name || '',\n        email: user.email || '',\n        bio: user.bio || '',\n      });\n\n      // Load preferences if available\n      if (user.preferences) {\n        setPreferences(prevPreferences => ({\n          ...prevPreferences,\n          ...user.preferences,\n        }));\n      }\n    }\n  }, [user]);\n\n  // Handle tab change\n  const handleTabChange = (event, newValue) => {\n    setActiveTab(newValue);\n  };\n\n  // Handle profile form changes\n  const handleProfileChange = (e) => {\n    const { name, value } = e.target;\n    setProfileData({\n      ...profileData,\n      [name]: value,\n    });\n  };\n\n  // Handle password form changes\n  const handlePasswordChange = (e) => {\n    const { name, value } = e.target;\n    setPasswordData({\n      ...passwordData,\n      [name]: value,\n    });\n  };\n\n  // Handle preferences changes\n  const handlePreferenceChange = (e) => {\n    const { name, value, checked } = e.target;\n    const newValue = e.target.type === 'checkbox' ? checked : value;\n\n    setPreferences({\n      ...preferences,\n      [name]: newValue,\n    });\n\n    // Update learning level in context if changed\n    if (name === 'level' && value !== userLevel) {\n      updateUserLevel(value);\n    }\n  };\n\n  // Submit profile update\n  const handleProfileSubmit = async (e) => {\n    e.preventDefault();\n    setError(null);\n    setSuccess(null);\n    setLoading(true);\n\n    try {\n      const success = await updateProfile({\n        ...profileData,\n        preferences,\n      });\n\n      if (success) {\n        setSuccess('Profile updated successfully');\n      }\n    } catch (err) {\n      setError('Failed to update profile');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Submit password change\n  const handlePasswordSubmit = async (e) => {\n    e.preventDefault();\n    setError(null);\n    setSuccess(null);\n\n    // Validate passwords\n    if (passwordData.newPassword !== passwordData.confirmPassword) {\n      setError('New passwords do not match');\n      return;\n    }\n\n    if (passwordData.newPassword.length < 6) {\n      setError('Password must be at least 6 characters long');\n      return;\n    }\n\n    setLoading(true);\n    try {\n      const success = await changePassword(\n        passwordData.currentPassword,\n        passwordData.newPassword\n      );\n\n      if (success) {\n        setSuccess('Password changed successfully');\n        setPasswordData({\n          currentPassword: '',\n          newPassword: '',\n          confirmPassword: '',\n        });\n      }\n    } catch (err) {\n      setError('Failed to change password');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\n      <Typography variant=\"h4\" component=\"h1\" gutterBottom>\n        Your Profile\n      </Typography>\n\n      <Grid container spacing={3}>\n        {/* Sidebar */}\n        <Grid item xs={12} md={4}>\n          <Paper sx={{ p: 3, textAlign: 'center' }}>\n            <Avatar\n              sx={{\n                width: 100,\n                height: 100,\n                mx: 'auto',\n                mb: 2,\n                bgcolor: 'primary.main',\n                fontSize: 40,\n              }}\n            >\n              {user?.name?.charAt(0) || 'U'}\n            </Avatar>\n\n            <Typography variant=\"h5\" gutterBottom>\n              {user?.name || 'User'}\n            </Typography>\n\n            <Typography variant=\"body2\" color=\"text.secondary\" paragraph>\n              {user?.email || 'user@example.com'}\n            </Typography>\n\n            <Divider sx={{ my: 2 }} />\n\n            <Box sx={{ textAlign: 'left' }}>\n              <Typography variant=\"subtitle1\" gutterBottom>\n                Learning Level\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\" paragraph>\n                {preferences.level.charAt(0).toUpperCase() + preferences.level.slice(1)}\n              </Typography>\n\n              <Typography variant=\"subtitle1\" gutterBottom>\n                Member Since\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                {user?.createdAt\n                  ? new Date(user.createdAt).toLocaleDateString()\n                  : 'Unknown'}\n              </Typography>\n            </Box>\n          </Paper>\n        </Grid>\n\n        {/* Main content */}\n        <Grid item xs={12} md={8}>\n          <Paper sx={{ width: '100%' }}>\n            <Tabs\n              value={activeTab}\n              onChange={handleTabChange}\n              indicatorColor=\"primary\"\n              textColor=\"primary\"\n              variant=\"fullWidth\"\n            >\n              <Tab icon={<PersonIcon />} label=\"Profile\" />\n              <Tab icon={<LockIcon />} label=\"Security\" />\n              <Tab icon={<SettingsIcon />} label=\"Preferences\" />\n            </Tabs>\n\n            {/* Profile Tab */}\n            <TabPanel value={activeTab} index={0}>\n              {error && <Alert severity=\"error\" sx={{ mb: 2 }}>{error}</Alert>}\n              {success && <Alert severity=\"success\" sx={{ mb: 2 }}>{success}</Alert>}\n\n              <Box component=\"form\" onSubmit={handleProfileSubmit}>\n                <Grid container spacing={3}>\n                  <Grid item xs={12}>\n                    <TextField\n                      fullWidth\n                      label=\"Name\"\n                      name=\"name\"\n                      value={profileData.name}\n                      onChange={handleProfileChange}\n                      required\n                    />\n                  </Grid>\n\n                  <Grid item xs={12}>\n                    <TextField\n                      fullWidth\n                      label=\"Email\"\n                      name=\"email\"\n                      type=\"email\"\n                      value={profileData.email}\n                      onChange={handleProfileChange}\n                      required\n                      disabled // Email changes might require verification\n                    />\n                  </Grid>\n\n                  <Grid item xs={12}>\n                    <TextField\n                      fullWidth\n                      label=\"Bio\"\n                      name=\"bio\"\n                      value={profileData.bio}\n                      onChange={handleProfileChange}\n                      multiline\n                      rows={4}\n                      placeholder=\"Tell us a bit about yourself and your learning goals...\"\n                    />\n                  </Grid>\n\n                  <Grid item xs={12}>\n                    <Button\n                      type=\"submit\"\n                      variant=\"contained\"\n                      color=\"primary\"\n                      startIcon={<SaveIcon />}\n                      disabled={loading || authLoading}\n                    >\n                      {loading || authLoading ? (\n                        <CircularProgress size={24} />\n                      ) : (\n                        'Save Changes'\n                      )}\n                    </Button>\n                  </Grid>\n                </Grid>\n              </Box>\n            </TabPanel>\n\n            {/* Security Tab */}\n            <TabPanel value={activeTab} index={1}>\n              {error && <Alert severity=\"error\" sx={{ mb: 2 }}>{error}</Alert>}\n              {success && <Alert severity=\"success\" sx={{ mb: 2 }}>{success}</Alert>}\n\n              <Box component=\"form\" onSubmit={handlePasswordSubmit}>\n                <Grid container spacing={3}>\n                  <Grid item xs={12}>\n                    <TextField\n                      fullWidth\n                      label=\"Current Password\"\n                      name=\"currentPassword\"\n                      type=\"password\"\n                      value={passwordData.currentPassword}\n                      onChange={handlePasswordChange}\n                      required\n                    />\n                  </Grid>\n\n                  <Grid item xs={12}>\n                    <TextField\n                      fullWidth\n                      label=\"New Password\"\n                      name=\"newPassword\"\n                      type=\"password\"\n                      value={passwordData.newPassword}\n                      onChange={handlePasswordChange}\n                      required\n                    />\n                  </Grid>\n\n                  <Grid item xs={12}>\n                    <TextField\n                      fullWidth\n                      label=\"Confirm New Password\"\n                      name=\"confirmPassword\"\n                      type=\"password\"\n                      value={passwordData.confirmPassword}\n                      onChange={handlePasswordChange}\n                      required\n                    />\n                  </Grid>\n\n                  <Grid item xs={12}>\n                    <Button\n                      type=\"submit\"\n                      variant=\"contained\"\n                      color=\"primary\"\n                      startIcon={<LockIcon />}\n                      disabled={loading || authLoading}\n                    >\n                      {loading || authLoading ? (\n                        <CircularProgress size={24} />\n                      ) : (\n                        'Change Password'\n                      )}\n                    </Button>\n                  </Grid>\n                </Grid>\n              </Box>\n            </TabPanel>\n\n            {/* Preferences Tab */}\n            <TabPanel value={activeTab} index={2}>\n              <Grid container spacing={3}>\n                <Grid item xs={12}>\n                  <Card>\n                    <CardContent>\n                      <Typography variant=\"h6\" gutterBottom>\n                        Learning Preferences\n                      </Typography>\n\n                      <FormControl fullWidth sx={{ mb: 2 }}>\n                        <InputLabel id=\"level-label\">Learning Level</InputLabel>\n                        <Select\n                          labelId=\"level-label\"\n                          name=\"level\"\n                          value={preferences.level}\n                          onChange={handlePreferenceChange}\n                          label=\"Learning Level\"\n                        >\n                          <MenuItem value=\"beginner\">Beginner</MenuItem>\n                          <MenuItem value=\"intermediate\">Intermediate</MenuItem>\n                          <MenuItem value=\"advanced\">Advanced</MenuItem>\n                        </Select>\n                      </FormControl>\n\n                      <FormControlLabel\n                        control={\n                          <Switch\n                            checked={preferences.saveHistory}\n                            onChange={handlePreferenceChange}\n                            name=\"saveHistory\"\n                          />\n                        }\n                        label=\"Save learning history\"\n                      />\n                    </CardContent>\n                  </Card>\n                </Grid>\n\n                <Grid item xs={12}>\n                  <Card>\n                    <CardContent>\n                      <Typography variant=\"h6\" gutterBottom>\n                        Notification Settings\n                      </Typography>\n\n                      <FormControlLabel\n                        control={\n                          <Switch\n                            checked={preferences.emailNotifications}\n                            onChange={handlePreferenceChange}\n                            name=\"emailNotifications\"\n                          />\n                        }\n                        label=\"Email notifications\"\n                      />\n                    </CardContent>\n                  </Card>\n                </Grid>\n\n                <Grid item xs={12}>\n                  <Card>\n                    <CardContent>\n                      <Typography variant=\"h6\" gutterBottom>\n                        Display Settings\n                      </Typography>\n\n                      <FormControlLabel\n                        control={\n                          <Switch\n                            checked={preferences.darkMode}\n                            onChange={handlePreferenceChange}\n                            name=\"darkMode\"\n                          />\n                        }\n                        label=\"Dark mode\"\n                      />\n                    </CardContent>\n                  </Card>\n                </Grid>\n\n                <Grid item xs={12}>\n                  <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    startIcon={<SaveIcon />}\n                    onClick={handleProfileSubmit}\n                    disabled={loading || authLoading}\n                  >\n                    {loading || authLoading ? (\n                      <CircularProgress size={24} />\n                    ) : (\n                      'Save Preferences'\n                    )}\n                  </Button>\n                </Grid>\n              </Grid>\n            </TabPanel>\n          </Paper>\n        </Grid>\n      </Grid>\n    </Container>\n  );\n};\n\nexport default Profile;\n"],"names":["TabPanel","props","children","value","index","other","_jsx","role","hidden","id","Box","sx","p","Profile","_user$name","user","updateProfile","changePassword","loading","authLoading","useContext","AuthContext","userLevel","updateUserLevel","LearningContext","activeTab","setActiveTab","useState","profileData","setProfileData","name","email","bio","passwordData","setPasswordData","currentPassword","newPassword","confirmPassword","preferences","setPreferences","level","emailNotifications","saveHistory","darkMode","setLoading","error","setError","success","setSuccess","useEffect","prevPreferences","handleProfileChange","e","target","handlePasswordChange","handlePreferenceChange","checked","newValue","type","handleProfileSubmit","async","preventDefault","err","_jsxs","Container","maxWidth","mt","mb","Typography","variant","component","gutterBottom","Grid","container","spacing","item","xs","md","Paper","textAlign","Avatar","width","height","mx","bgcolor","fontSize","charAt","color","paragraph","Divider","my","toUpperCase","slice","createdAt","Date","toLocaleDateString","Tabs","onChange","handleTabChange","event","indicatorColor","textColor","Tab","icon","PersonIcon","label","LockIcon","SettingsIcon","Alert","severity","onSubmit","TextField","fullWidth","required","disabled","multiline","rows","placeholder","Button","startIcon","SaveIcon","CircularProgress","size","length","Card","CardContent","FormControl","InputLabel","Select","labelId","MenuItem","FormControlLabel","control","Switch","onClick"],"sourceRoot":""}