{"version":3,"file":"static/js/584.dfc688db.chunk.js","mappings":"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","sources":["../node_modules/micromark-util-chunked/index.js","../node_modules/micromark-util-classify-character/index.js","../node_modules/micromark-util-resolve-all/index.js","../node_modules/micromark-util-character/index.js","../node_modules/micromark-util-combine-extensions/index.js","../node_modules/micromark-factory-space/index.js","../node_modules/extend/index.js","../node_modules/style-to-js/src/utilities.ts","../node_modules/unist-util-visit-parents/lib/index.js","../node_modules/micromark-core-commonmark/lib/blank-line.js","../node_modules/estree-util-is-identifier-name/lib/index.js","../node_modules/hast-util-whitespace/lib/index.js","../node_modules/property-information/lib/util/schema.js","../node_modules/property-information/lib/util/merge.js","../node_modules/property-information/lib/normalize.js","../node_modules/property-information/lib/util/info.js","../node_modules/property-information/lib/util/types.js","../node_modules/property-information/lib/util/defined-info.js","../node_modules/property-information/lib/util/create.js","../node_modules/property-information/lib/aria.js","../node_modules/property-information/lib/util/case-sensitive-transform.js","../node_modules/property-information/lib/util/case-insensitive-transform.js","../node_modules/property-information/lib/html.js","../node_modules/property-information/lib/svg.js","../node_modules/property-information/lib/xlink.js","../node_modules/property-information/lib/xmlns.js","../node_modules/property-information/lib/xml.js","../node_modules/property-information/index.js","../node_modules/property-information/lib/find.js","../node_modules/property-information/lib/hast-to-react.js","../node_modules/unist-util-position/lib/index.js","../node_modules/unist-util-stringify-position/lib/index.js","../node_modules/vfile-message/lib/index.js","../node_modules/hast-util-to-jsx-runtime/lib/index.js","../node_modules/comma-separated-tokens/index.js","../node_modules/space-separated-tokens/index.js","../node_modules/html-url-attributes/lib/index.js","../node_modules/micromark-util-subtokenize/lib/splice-buffer.js","../node_modules/micromark-util-subtokenize/index.js","../node_modules/micromark/lib/initialize/content.js","../node_modules/micromark/lib/initialize/document.js","../node_modules/micromark-core-commonmark/lib/content.js","../node_modules/micromark/lib/initialize/flow.js","../node_modules/micromark/lib/initialize/text.js","../node_modules/micromark-core-commonmark/lib/thematic-break.js","../node_modules/micromark-core-commonmark/lib/list.js","../node_modules/micromark-core-commonmark/lib/block-quote.js","../node_modules/micromark-factory-destination/index.js","../node_modules/micromark-factory-label/index.js","../node_modules/micromark-factory-title/index.js","../node_modules/micromark-factory-whitespace/index.js","../node_modules/micromark-core-commonmark/lib/definition.js","../node_modules/micromark-core-commonmark/lib/code-indented.js","../node_modules/micromark-core-commonmark/lib/heading-atx.js","../node_modules/micromark-core-commonmark/lib/setext-underline.js","../node_modules/micromark-util-html-tag-name/index.js","../node_modules/micromark-core-commonmark/lib/html-flow.js","../node_modules/micromark-core-commonmark/lib/code-fenced.js","../node_modules/decode-named-character-reference/index.dom.js","../node_modules/micromark-core-commonmark/lib/character-reference.js","../node_modules/micromark-core-commonmark/lib/character-escape.js","../node_modules/micromark-core-commonmark/lib/line-ending.js","../node_modules/micromark-core-commonmark/lib/label-end.js","../node_modules/micromark-core-commonmark/lib/label-start-image.js","../node_modules/micromark-core-commonmark/lib/attention.js","../node_modules/micromark-core-commonmark/lib/autolink.js","../node_modules/micromark-core-commonmark/lib/html-text.js","../node_modules/micromark-core-commonmark/lib/label-start-link.js","../node_modules/micromark-core-commonmark/lib/hard-break-escape.js","../node_modules/micromark-core-commonmark/lib/code-text.js","../node_modules/micromark/lib/constructs.js","../node_modules/micromark/lib/create-tokenizer.js","../node_modules/micromark/lib/preprocess.js","../node_modules/micromark-util-decode-numeric-character-reference/index.js","../node_modules/micromark-util-decode-string/index.js","../node_modules/mdast-util-from-markdown/lib/index.js","../node_modules/micromark/lib/postprocess.js","../node_modules/micromark/lib/parse.js","../node_modules/remark-parse/lib/index.js","../node_modules/@ungap/structured-clone/esm/types.js","../node_modules/@ungap/structured-clone/esm/deserialize.js","../node_modules/@ungap/structured-clone/esm/serialize.js","../node_modules/@ungap/structured-clone/esm/index.js","../node_modules/micromark-util-sanitize-uri/index.js","../node_modules/mdast-util-to-hast/lib/footer.js","../node_modules/mdast-util-to-hast/lib/revert.js","../node_modules/mdast-util-to-hast/lib/handlers/list-item.js","../node_modules/trim-lines/index.js","../node_modules/mdast-util-to-hast/lib/handlers/index.js","../node_modules/mdast-util-to-hast/lib/handlers/blockquote.js","../node_modules/mdast-util-to-hast/lib/handlers/break.js","../node_modules/mdast-util-to-hast/lib/handlers/code.js","../node_modules/mdast-util-to-hast/lib/handlers/delete.js","../node_modules/mdast-util-to-hast/lib/handlers/emphasis.js","../node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js","../node_modules/mdast-util-to-hast/lib/handlers/heading.js","../node_modules/mdast-util-to-hast/lib/handlers/html.js","../node_modules/mdast-util-to-hast/lib/handlers/image-reference.js","../node_modules/mdast-util-to-hast/lib/handlers/image.js","../node_modules/mdast-util-to-hast/lib/handlers/inline-code.js","../node_modules/mdast-util-to-hast/lib/handlers/link-reference.js","../node_modules/mdast-util-to-hast/lib/handlers/link.js","../node_modules/mdast-util-to-hast/lib/handlers/list.js","../node_modules/mdast-util-to-hast/lib/handlers/paragraph.js","../node_modules/mdast-util-to-hast/lib/handlers/root.js","../node_modules/mdast-util-to-hast/lib/handlers/strong.js","../node_modules/mdast-util-to-hast/lib/handlers/table.js","../node_modules/mdast-util-to-hast/lib/handlers/table-cell.js","../node_modules/mdast-util-to-hast/lib/handlers/table-row.js","../node_modules/mdast-util-to-hast/lib/handlers/text.js","../node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js","../node_modules/mdast-util-to-hast/lib/state.js","../node_modules/mdast-util-to-hast/lib/index.js","../node_modules/remark-rehype/lib/index.js","../node_modules/bail/index.js","../node_modules/is-plain-obj/index.js","../node_modules/trough/lib/index.js","../node_modules/vfile/lib/minpath.browser.js","../node_modules/vfile/lib/minproc.browser.js","../node_modules/vfile/lib/minurl.shared.js","../node_modules/vfile/lib/minurl.browser.js","../node_modules/vfile/lib/index.js","../node_modules/unified/lib/callable-instance.js","../node_modules/unified/lib/index.js","../node_modules/react-markdown/lib/index.js","../node_modules/unist-util-is/lib/index.js","../node_modules/style-to-js/src/index.ts","../node_modules/mdast-util-to-string/lib/index.js","../node_modules/micromark-util-normalize-identifier/index.js","../node_modules/style-to-object/src/index.ts","../node_modules/unist-util-visit/lib/index.js","../node_modules/inline-style-parser/index.js","../node_modules/devlop/lib/default.js"],"sourcesContent":["/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {number} start\n *   Index to remove/insert at (can be negative).\n * @param {number} remove\n *   Number of items to remove.\n * @param {Array<T>} items\n *   Items to inject into `list`.\n * @returns {undefined}\n *   Nothing.\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length;\n  let chunkStart = 0;\n  /** @type {Array<unknown>} */\n  let parameters;\n\n  // Make start between zero and `end` (included).\n  if (start < 0) {\n    start = -start > end ? 0 : end + start;\n  } else {\n    start = start > end ? end : start;\n  }\n  remove = remove > 0 ? remove : 0;\n\n  // No need to chunk the items if there’s only a couple (10k) items.\n  if (items.length < 10000) {\n    parameters = Array.from(items);\n    parameters.unshift(start, remove);\n    // @ts-expect-error Hush, it’s fine.\n    list.splice(...parameters);\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) list.splice(start, remove);\n\n    // Insert the items in chunks to not cause stack overflows.\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000);\n      parameters.unshift(start, 0);\n      // @ts-expect-error Hush, it’s fine.\n      list.splice(...parameters);\n      chunkStart += 10000;\n      start += 10000;\n    }\n  }\n}\n\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {Array<T>} items\n *   Items to add to `list`.\n * @returns {Array<T>}\n *   Either `list` or `items`.\n */\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items);\n    return list;\n  }\n  return items;\n}","/**\n * @import {Code} from 'micromark-util-types'\n */\n\nimport { markdownLineEndingOrSpace, unicodePunctuation, unicodeWhitespace } from 'micromark-util-character';\n/**\n * Classify whether a code represents whitespace, punctuation, or something\n * else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * > 👉 **Note**: eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n *   Code.\n * @returns {typeof constants.characterGroupWhitespace | typeof constants.characterGroupPunctuation | undefined}\n *   Group.\n */\nexport function classifyCharacter(code) {\n  if (code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n    return 1;\n  }\n  if (unicodePunctuation(code)) {\n    return 2;\n  }\n}","/**\n * @import {Event, Resolver, TokenizeContext} from 'micromark-util-types'\n */\n\n/**\n * Call all `resolveAll`s.\n *\n * @param {ReadonlyArray<{resolveAll?: Resolver | undefined}>} constructs\n *   List of constructs, optionally with `resolveAll`s.\n * @param {Array<Event>} events\n *   List of events.\n * @param {TokenizeContext} context\n *   Context used by `tokenize`.\n * @returns {Array<Event>}\n *   Changed events.\n */\nexport function resolveAll(constructs, events, context) {\n  /** @type {Array<Resolver>} */\n  const called = []\n  let index = -1\n\n  while (++index < constructs.length) {\n    const resolve = constructs[index].resolveAll\n\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context)\n      called.push(resolve)\n    }\n  }\n\n  return events\n}\n","/**\n * @import {Code} from 'micromark-util-types'\n */\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/);\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  );\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/);\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/);\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2;\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32);\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32;\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(/\\p{P}|\\p{S}/u);\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/);\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n *   Expression.\n * @returns {(code: Code) => boolean}\n *   Check.\n */\nfunction regexCheck(regex) {\n  return check;\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code));\n  }\n}","/**\n * @import {\n *   Extension,\n *   Handles,\n *   HtmlExtension,\n *   NormalizedExtension\n * } from 'micromark-util-types'\n */\n\nimport {splice} from 'micromark-util-chunked'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\n/**\n * Combine multiple syntax extensions into one.\n *\n * @param {ReadonlyArray<Extension>} extensions\n *   List of syntax extensions.\n * @returns {NormalizedExtension}\n *   A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {}\n  let index = -1\n\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index])\n  }\n\n  return all\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all\n *   Extension to merge into.\n * @param {Extension} extension\n *   Extension to merge.\n * @returns {undefined}\n *   Nothing.\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {keyof Extension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    /** @type {Record<string, unknown>} */\n    const left = maybe || (all[hook] = {})\n    /** @type {Record<string, unknown> | undefined} */\n    const right = extension[hook]\n    /** @type {string} */\n    let code\n\n    if (right) {\n      for (code in right) {\n        if (!hasOwnProperty.call(left, code)) left[code] = []\n        const value = right[code]\n        constructs(\n          // @ts-expect-error Looks like a list.\n          left[code],\n          Array.isArray(value) ? value : value ? [value] : []\n        )\n      }\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {Array<unknown>} existing\n *   List of constructs to merge into.\n * @param {Array<unknown>} list\n *   List of constructs to merge.\n * @returns {undefined}\n *   Nothing.\n */\nfunction constructs(existing, list) {\n  let index = -1\n  /** @type {Array<unknown>} */\n  const before = []\n\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\n  }\n\n  splice(existing, 0, 0, before)\n}\n\n/**\n * Combine multiple HTML extensions into one.\n *\n * @param {ReadonlyArray<HtmlExtension>} htmlExtensions\n *   List of HTML extensions.\n * @returns {HtmlExtension}\n *   Single combined HTML extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {}\n  let index = -1\n\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index])\n  }\n\n  return handlers\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all\n *   Extension to merge into.\n * @param {HtmlExtension} extension\n *   Extension to merge.\n * @returns {undefined}\n *   Nothing.\n */\nfunction htmlExtension(all, extension) {\n  /** @type {keyof HtmlExtension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {keyof Handles} */\n    let type\n\n    if (right) {\n      for (type in right) {\n        // @ts-expect-error assume document vs regular handler are managed correctly.\n        left[type] = right[type]\n      }\n    }\n  }\n}\n","/**\n * @import {Effects, State, TokenType} from 'micromark-util-types'\n */\n\nimport { markdownSpace } from 'micromark-util-character';\n\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\n\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   spaces in markdown are often optional, in which case this factory can be\n *     used and `ok` will be switched to whether spaces were found or not\n * *   one line ending or space can be detected with `markdownSpace(code)` right\n *     before using `factorySpace`\n *\n * ###### Examples\n *\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\n * single space.\n *\n * ```markdown\n * ␉\n * ␠␠␠␠\n * ␉␠\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {TokenType} type\n *   Type (`' \\t'`).\n * @param {number | undefined} [max=Infinity]\n *   Max (exclusive).\n * @returns {State}\n *   Start state.\n */\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY;\n  let size = 0;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type);\n      return prefix(code);\n    }\n    return ok(code);\n  }\n\n  /** @type {State} */\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code);\n      return prefix;\n    }\n    effects.exit(type);\n    return ok(code);\n  }\n}","'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\nvar defineProperty = Object.defineProperty;\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) { /**/ }\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\n// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target\nvar setProperty = function setProperty(target, options) {\n\tif (defineProperty && options.name === '__proto__') {\n\t\tdefineProperty(target, options.name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\t\t\tvalue: options.newValue,\n\t\t\twritable: true\n\t\t});\n\t} else {\n\t\ttarget[options.name] = options.newValue;\n\t}\n};\n\n// Return undefined instead of __proto__ if '__proto__' is not an own property\nvar getProperty = function getProperty(obj, name) {\n\tif (name === '__proto__') {\n\t\tif (!hasOwn.call(obj, name)) {\n\t\t\treturn void 0;\n\t\t} else if (gOPD) {\n\t\t\t// In early versions of node, obj['__proto__'] is buggy when obj has\n\t\t\t// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.\n\t\t\treturn gOPD(obj, name).value;\n\t\t}\n\t}\n\n\treturn obj[name];\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone;\n\tvar target = arguments[0];\n\tvar i = 1;\n\tvar length = arguments.length;\n\tvar deep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t}\n\tif (target == null || (typeof target !== 'object' && typeof target !== 'function')) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = getProperty(target, name);\n\t\t\t\tcopy = getProperty(options, name);\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: extend(deep, clone, copy) });\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: copy });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n","const CUSTOM_PROPERTY_REGEX = /^--[a-zA-Z0-9_-]+$/;\nconst HYPHEN_REGEX = /-([a-z])/g;\nconst NO_HYPHEN_REGEX = /^[^-]+$/;\nconst VENDOR_PREFIX_REGEX = /^-(webkit|moz|ms|o|khtml)-/;\nconst MS_VENDOR_PREFIX_REGEX = /^-(ms)-/;\n\n/**\n * Checks whether to skip camelCase.\n */\nconst skipCamelCase = (property: string) =>\n  !property ||\n  NO_HYPHEN_REGEX.test(property) ||\n  CUSTOM_PROPERTY_REGEX.test(property);\n\n/**\n * Replacer that capitalizes first character.\n */\nconst capitalize = (match: string, character: string) =>\n  character.toUpperCase();\n\n/**\n * Replacer that removes beginning hyphen of vendor prefix property.\n */\nconst trimHyphen = (match: string, prefix: string) => `${prefix}-`;\n\n/**\n * CamelCase options.\n */\nexport interface CamelCaseOptions {\n  reactCompat?: boolean;\n}\n\n/**\n * CamelCases a CSS property.\n */\nexport const camelCase = (property: string, options: CamelCaseOptions = {}) => {\n  if (skipCamelCase(property)) {\n    return property;\n  }\n\n  property = property.toLowerCase();\n\n  if (options.reactCompat) {\n    // `-ms` vendor prefix should not be capitalized\n    property = property.replace(MS_VENDOR_PREFIX_REGEX, trimHyphen);\n  } else {\n    // for non-React, remove first hyphen so vendor prefix is not capitalized\n    property = property.replace(VENDOR_PREFIX_REGEX, trimHyphen);\n  }\n\n  return property.replace(HYPHEN_REGEX, capitalize);\n};\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {InternalAncestor<InclusiveDescendant<Tree>, Child>} Ancestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {'skip' | boolean} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<VisitedParents>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [VisitedParents=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Matches<InclusiveDescendant<Tree>, Check>, Ancestor<Tree, Matches<InclusiveDescendant<Tree>, Check>>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Tree type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from 'unist-util-visit-parents/do-not-use-color'\n\n/** @type {Readonly<ActionTuple>} */\nconst empty = []\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} test\n *   `unist-util-is`-compatible test\n * @param {Visitor | boolean | null | undefined} [visitor]\n *   Handle each node.\n * @param {boolean | null | undefined} [reverse]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visitParents(tree, test, visitor, reverse) {\n  /** @type {Test} */\n  let check\n\n  if (typeof test === 'function' && typeof visitor !== 'function') {\n    reverse = visitor\n    // @ts-expect-error no visitor given, so `visitor` is test.\n    visitor = test\n  } else {\n    // @ts-expect-error visitor given, so `test` isn’t a visitor.\n    check = test\n  }\n\n  const is = convert(check)\n  const step = reverse ? -1 : 1\n\n  factory(tree, undefined, [])()\n\n  /**\n   * @param {UnistNode} node\n   * @param {number | undefined} index\n   * @param {Array<UnistParent>} parents\n   */\n  function factory(node, index, parents) {\n    const value = /** @type {Record<string, unknown>} */ (\n      node && typeof node === 'object' ? node : {}\n    )\n\n    if (typeof value.type === 'string') {\n      const name =\n        // `hast`\n        typeof value.tagName === 'string'\n          ? value.tagName\n          : // `xast`\n          typeof value.name === 'string'\n          ? value.name\n          : undefined\n\n      Object.defineProperty(visit, 'name', {\n        value:\n          'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n      })\n    }\n\n    return visit\n\n    function visit() {\n      /** @type {Readonly<ActionTuple>} */\n      let result = empty\n      /** @type {Readonly<ActionTuple>} */\n      let subresult\n      /** @type {number} */\n      let offset\n      /** @type {Array<UnistParent>} */\n      let grandparents\n\n      if (!test || is(node, index, parents[parents.length - 1] || undefined)) {\n        // @ts-expect-error: `visitor` is now a visitor.\n        result = toResult(visitor(node, parents))\n\n        if (result[0] === EXIT) {\n          return result\n        }\n      }\n\n      if ('children' in node && node.children) {\n        const nodeAsParent = /** @type {UnistParent} */ (node)\n\n        if (nodeAsParent.children && result[0] !== SKIP) {\n          offset = (reverse ? nodeAsParent.children.length : -1) + step\n          grandparents = parents.concat(nodeAsParent)\n\n          while (offset > -1 && offset < nodeAsParent.children.length) {\n            const child = nodeAsParent.children[offset]\n\n            subresult = factory(child, offset, grandparents)()\n\n            if (subresult[0] === EXIT) {\n              return subresult\n            }\n\n            offset =\n              typeof subresult[1] === 'number' ? subresult[1] : offset + step\n          }\n        }\n      }\n\n      return result\n    }\n  }\n}\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {Readonly<ActionTuple>}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return value === null || value === undefined ? empty : [value]\n}\n","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const blankLine = {\n  partial: true,\n  tokenize: tokenizeBlankLine\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of blank line.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *     ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    return markdownSpace(code) ? factorySpace(effects, after, \"linePrefix\")(code) : after(code);\n  }\n\n  /**\n   * At eof/eol, after optional whitespace.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *       ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code);\n  }\n}","/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [jsx=false]\n *   Support JSX identifiers (default: `false`).\n */\n\nconst startRe = /[$_\\p{ID_Start}]/u\nconst contRe = /[$_\\u{200C}\\u{200D}\\p{ID_Continue}]/u\nconst contReJsx = /[-$_\\u{200C}\\u{200D}\\p{ID_Continue}]/u\nconst nameRe = /^[$_\\p{ID_Start}][$_\\u{200C}\\u{200D}\\p{ID_Continue}]*$/u\nconst nameReJsx = /^[$_\\p{ID_Start}][-$_\\u{200C}\\u{200D}\\p{ID_Continue}]*$/u\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Checks if the given code point can start an identifier.\n *\n * @param {number | undefined} code\n *   Code point to check.\n * @returns {boolean}\n *   Whether `code` can start an identifier.\n */\n// Note: `undefined` is supported so you can pass the result from `''.codePointAt`.\nexport function start(code) {\n  return code ? startRe.test(String.fromCodePoint(code)) : false\n}\n\n/**\n * Checks if the given code point can continue an identifier.\n *\n * @param {number | undefined} code\n *   Code point to check.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {boolean}\n *   Whether `code` can continue an identifier.\n */\n// Note: `undefined` is supported so you can pass the result from `''.codePointAt`.\nexport function cont(code, options) {\n  const settings = options || emptyOptions\n  const re = settings.jsx ? contReJsx : contRe\n  return code ? re.test(String.fromCodePoint(code)) : false\n}\n\n/**\n * Checks if the given value is a valid identifier name.\n *\n * @param {string} name\n *   Identifier to check.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {boolean}\n *   Whether `name` can be an identifier.\n */\nexport function name(name, options) {\n  const settings = options || emptyOptions\n  const re = settings.jsx ? nameReJsx : nameRe\n  return re.test(name)\n}\n","/**\n * @typedef {import('hast').Nodes} Nodes\n */\n\n// HTML whitespace expression.\n// See <https://infra.spec.whatwg.org/#ascii-whitespace>.\nconst re = /[ \\t\\n\\f\\r]/g\n\n/**\n * Check if the given value is *inter-element whitespace*.\n *\n * @param {Nodes | string} thing\n *   Thing to check (`Node` or `string`).\n * @returns {boolean}\n *   Whether the `value` is inter-element whitespace (`boolean`): consisting of\n *   zero or more of space, tab (`\\t`), line feed (`\\n`), carriage return\n *   (`\\r`), or form feed (`\\f`); if a node is passed it must be a `Text` node,\n *   whose `value` field is checked.\n */\nexport function whitespace(thing) {\n  return typeof thing === 'object'\n    ? thing.type === 'text'\n      ? empty(thing.value)\n      : false\n    : empty(thing)\n}\n\n/**\n * @param {string} value\n * @returns {boolean}\n */\nfunction empty(value) {\n  return value.replace(re, '') === ''\n}\n","/**\n * @import {Schema as SchemaType, Space} from 'property-information'\n */\n\n/** @type {SchemaType} */\nexport class Schema {\n  /**\n   * @param {SchemaType['property']} property\n   *   Property.\n   * @param {SchemaType['normal']} normal\n   *   Normal.\n   * @param {Space | undefined} [space]\n   *   Space.\n   * @returns\n   *   Schema.\n   */\n  constructor(property, normal, space) {\n    this.normal = normal\n    this.property = property\n\n    if (space) {\n      this.space = space\n    }\n  }\n}\n\nSchema.prototype.normal = {}\nSchema.prototype.property = {}\nSchema.prototype.space = undefined\n","/**\n * @import {Info, Space} from 'property-information'\n */\n\nimport {Schema} from './schema.js'\n\n/**\n * @param {ReadonlyArray<Schema>} definitions\n *   Definitions.\n * @param {Space | undefined} [space]\n *   Space.\n * @returns {Schema}\n *   Schema.\n */\nexport function merge(definitions, space) {\n  /** @type {Record<string, Info>} */\n  const property = {}\n  /** @type {Record<string, string>} */\n  const normal = {}\n\n  for (const definition of definitions) {\n    Object.assign(property, definition.property)\n    Object.assign(normal, definition.normal)\n  }\n\n  return new Schema(property, normal, space)\n}\n","/**\n * Get the cleaned case insensitive form of an attribute or property.\n *\n * @param {string} value\n *   An attribute-like or property-like name.\n * @returns {string}\n *   Value that can be used to look up the properly cased property on a\n *   `Schema`.\n */\nexport function normalize(value) {\n  return value.toLowerCase()\n}\n","/**\n * @import {Info as InfoType} from 'property-information'\n */\n\n/** @type {InfoType} */\nexport class Info {\n  /**\n   * @param {string} property\n   *   Property.\n   * @param {string} attribute\n   *   Attribute.\n   * @returns\n   *   Info.\n   */\n  constructor(property, attribute) {\n    this.attribute = attribute\n    this.property = property\n  }\n}\n\nInfo.prototype.attribute = ''\nInfo.prototype.booleanish = false\nInfo.prototype.boolean = false\nInfo.prototype.commaOrSpaceSeparated = false\nInfo.prototype.commaSeparated = false\nInfo.prototype.defined = false\nInfo.prototype.mustUseProperty = false\nInfo.prototype.number = false\nInfo.prototype.overloadedBoolean = false\nInfo.prototype.property = ''\nInfo.prototype.spaceSeparated = false\nInfo.prototype.space = undefined\n","let powers = 0\n\nexport const boolean = increment()\nexport const booleanish = increment()\nexport const overloadedBoolean = increment()\nexport const number = increment()\nexport const spaceSeparated = increment()\nexport const commaSeparated = increment()\nexport const commaOrSpaceSeparated = increment()\n\nfunction increment() {\n  return 2 ** ++powers\n}\n","/**\n * @import {Space} from 'property-information'\n */\n\nimport {Info} from './info.js'\nimport * as types from './types.js'\n\nconst checks = /** @type {ReadonlyArray<keyof typeof types>} */ (\n  Object.keys(types)\n)\n\nexport class DefinedInfo extends Info {\n  /**\n   * @constructor\n   * @param {string} property\n   *   Property.\n   * @param {string} attribute\n   *   Attribute.\n   * @param {number | null | undefined} [mask]\n   *   Mask.\n   * @param {Space | undefined} [space]\n   *   Space.\n   * @returns\n   *   Info.\n   */\n  constructor(property, attribute, mask, space) {\n    let index = -1\n\n    super(property, attribute)\n\n    mark(this, 'space', space)\n\n    if (typeof mask === 'number') {\n      while (++index < checks.length) {\n        const check = checks[index]\n        mark(this, checks[index], (mask & types[check]) === types[check])\n      }\n    }\n  }\n}\n\nDefinedInfo.prototype.defined = true\n\n/**\n * @template {keyof DefinedInfo} Key\n *   Key type.\n * @param {DefinedInfo} values\n *   Info.\n * @param {Key} key\n *   Key.\n * @param {DefinedInfo[Key]} value\n *   Value.\n * @returns {undefined}\n *   Nothing.\n */\nfunction mark(values, key, value) {\n  if (value) {\n    values[key] = value\n  }\n}\n","/**\n * @import {Info, Space} from 'property-information'\n */\n\n/**\n * @typedef Definition\n *   Definition of a schema.\n * @property {Record<string, string> | undefined} [attributes]\n *   Normalzed names to special attribute case.\n * @property {ReadonlyArray<string> | undefined} [mustUseProperty]\n *   Normalized names that must be set as properties.\n * @property {Record<string, number | null>} properties\n *   Property names to their types.\n * @property {Space | undefined} [space]\n *   Space.\n * @property {Transform} transform\n *   Transform a property name.\n */\n\n/**\n * @callback Transform\n *   Transform.\n * @param {Record<string, string>} attributes\n *   Attributes.\n * @param {string} property\n *   Property.\n * @returns {string}\n *   Attribute.\n */\n\nimport {normalize} from '../normalize.js'\nimport {DefinedInfo} from './defined-info.js'\nimport {Schema} from './schema.js'\n\n/**\n * @param {Definition} definition\n *   Definition.\n * @returns {Schema}\n *   Schema.\n */\nexport function create(definition) {\n  /** @type {Record<string, Info>} */\n  const properties = {}\n  /** @type {Record<string, string>} */\n  const normals = {}\n\n  for (const [property, value] of Object.entries(definition.properties)) {\n    const info = new DefinedInfo(\n      property,\n      definition.transform(definition.attributes || {}, property),\n      value,\n      definition.space\n    )\n\n    if (\n      definition.mustUseProperty &&\n      definition.mustUseProperty.includes(property)\n    ) {\n      info.mustUseProperty = true\n    }\n\n    properties[property] = info\n\n    normals[normalize(property)] = property\n    normals[normalize(info.attribute)] = property\n  }\n\n  return new Schema(properties, normals, definition.space)\n}\n","import {create} from './util/create.js'\nimport {booleanish, number, spaceSeparated} from './util/types.js'\n\nexport const aria = create({\n  properties: {\n    ariaActiveDescendant: null,\n    ariaAtomic: booleanish,\n    ariaAutoComplete: null,\n    ariaBusy: booleanish,\n    ariaChecked: booleanish,\n    ariaColCount: number,\n    ariaColIndex: number,\n    ariaColSpan: number,\n    ariaControls: spaceSeparated,\n    ariaCurrent: null,\n    ariaDescribedBy: spaceSeparated,\n    ariaDetails: null,\n    ariaDisabled: booleanish,\n    ariaDropEffect: spaceSeparated,\n    ariaErrorMessage: null,\n    ariaExpanded: booleanish,\n    ariaFlowTo: spaceSeparated,\n    ariaGrabbed: booleanish,\n    ariaHasPopup: null,\n    ariaHidden: booleanish,\n    ariaInvalid: null,\n    ariaKeyShortcuts: null,\n    ariaLabel: null,\n    ariaLabelledBy: spaceSeparated,\n    ariaLevel: number,\n    ariaLive: null,\n    ariaModal: booleanish,\n    ariaMultiLine: booleanish,\n    ariaMultiSelectable: booleanish,\n    ariaOrientation: null,\n    ariaOwns: spaceSeparated,\n    ariaPlaceholder: null,\n    ariaPosInSet: number,\n    ariaPressed: booleanish,\n    ariaReadOnly: booleanish,\n    ariaRelevant: null,\n    ariaRequired: booleanish,\n    ariaRoleDescription: spaceSeparated,\n    ariaRowCount: number,\n    ariaRowIndex: number,\n    ariaRowSpan: number,\n    ariaSelected: booleanish,\n    ariaSetSize: number,\n    ariaSort: null,\n    ariaValueMax: number,\n    ariaValueMin: number,\n    ariaValueNow: number,\n    ariaValueText: null,\n    role: null\n  },\n  transform(_, property) {\n    return property === 'role'\n      ? property\n      : 'aria-' + property.slice(4).toLowerCase()\n  }\n})\n","/**\n * @param {Record<string, string>} attributes\n *   Attributes.\n * @param {string} attribute\n *   Attribute.\n * @returns {string}\n *   Transformed attribute.\n */\nexport function caseSensitiveTransform(attributes, attribute) {\n  return attribute in attributes ? attributes[attribute] : attribute\n}\n","import {caseSensitiveTransform} from './case-sensitive-transform.js'\n\n/**\n * @param {Record<string, string>} attributes\n *   Attributes.\n * @param {string} property\n *   Property.\n * @returns {string}\n *   Transformed property.\n */\nexport function caseInsensitiveTransform(attributes, property) {\n  return caseSensitiveTransform(attributes, property.toLowerCase())\n}\n","import {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\nimport {create} from './util/create.js'\nimport {\n  booleanish,\n  boolean,\n  commaSeparated,\n  number,\n  overloadedBoolean,\n  spaceSeparated\n} from './util/types.js'\n\nexport const html = create({\n  attributes: {\n    acceptcharset: 'accept-charset',\n    classname: 'class',\n    htmlfor: 'for',\n    httpequiv: 'http-equiv'\n  },\n  mustUseProperty: ['checked', 'multiple', 'muted', 'selected'],\n  properties: {\n    // Standard Properties.\n    abbr: null,\n    accept: commaSeparated,\n    acceptCharset: spaceSeparated,\n    accessKey: spaceSeparated,\n    action: null,\n    allow: null,\n    allowFullScreen: boolean,\n    allowPaymentRequest: boolean,\n    allowUserMedia: boolean,\n    alt: null,\n    as: null,\n    async: boolean,\n    autoCapitalize: null,\n    autoComplete: spaceSeparated,\n    autoFocus: boolean,\n    autoPlay: boolean,\n    blocking: spaceSeparated,\n    capture: null,\n    charSet: null,\n    checked: boolean,\n    cite: null,\n    className: spaceSeparated,\n    cols: number,\n    colSpan: null,\n    content: null,\n    contentEditable: booleanish,\n    controls: boolean,\n    controlsList: spaceSeparated,\n    coords: number | commaSeparated,\n    crossOrigin: null,\n    data: null,\n    dateTime: null,\n    decoding: null,\n    default: boolean,\n    defer: boolean,\n    dir: null,\n    dirName: null,\n    disabled: boolean,\n    download: overloadedBoolean,\n    draggable: booleanish,\n    encType: null,\n    enterKeyHint: null,\n    fetchPriority: null,\n    form: null,\n    formAction: null,\n    formEncType: null,\n    formMethod: null,\n    formNoValidate: boolean,\n    formTarget: null,\n    headers: spaceSeparated,\n    height: number,\n    hidden: boolean,\n    high: number,\n    href: null,\n    hrefLang: null,\n    htmlFor: spaceSeparated,\n    httpEquiv: spaceSeparated,\n    id: null,\n    imageSizes: null,\n    imageSrcSet: null,\n    inert: boolean,\n    inputMode: null,\n    integrity: null,\n    is: null,\n    isMap: boolean,\n    itemId: null,\n    itemProp: spaceSeparated,\n    itemRef: spaceSeparated,\n    itemScope: boolean,\n    itemType: spaceSeparated,\n    kind: null,\n    label: null,\n    lang: null,\n    language: null,\n    list: null,\n    loading: null,\n    loop: boolean,\n    low: number,\n    manifest: null,\n    max: null,\n    maxLength: number,\n    media: null,\n    method: null,\n    min: null,\n    minLength: number,\n    multiple: boolean,\n    muted: boolean,\n    name: null,\n    nonce: null,\n    noModule: boolean,\n    noValidate: boolean,\n    onAbort: null,\n    onAfterPrint: null,\n    onAuxClick: null,\n    onBeforeMatch: null,\n    onBeforePrint: null,\n    onBeforeToggle: null,\n    onBeforeUnload: null,\n    onBlur: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onContextLost: null,\n    onContextMenu: null,\n    onContextRestored: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFormData: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLanguageChange: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadEnd: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMessageError: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRejectionHandled: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onScrollEnd: null,\n    onSecurityPolicyViolation: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onSlotChange: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnhandledRejection: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onWheel: null,\n    open: boolean,\n    optimum: number,\n    pattern: null,\n    ping: spaceSeparated,\n    placeholder: null,\n    playsInline: boolean,\n    popover: null,\n    popoverTarget: null,\n    popoverTargetAction: null,\n    poster: null,\n    preload: null,\n    readOnly: boolean,\n    referrerPolicy: null,\n    rel: spaceSeparated,\n    required: boolean,\n    reversed: boolean,\n    rows: number,\n    rowSpan: number,\n    sandbox: spaceSeparated,\n    scope: null,\n    scoped: boolean,\n    seamless: boolean,\n    selected: boolean,\n    shadowRootClonable: boolean,\n    shadowRootDelegatesFocus: boolean,\n    shadowRootMode: null,\n    shape: null,\n    size: number,\n    sizes: null,\n    slot: null,\n    span: number,\n    spellCheck: booleanish,\n    src: null,\n    srcDoc: null,\n    srcLang: null,\n    srcSet: null,\n    start: number,\n    step: null,\n    style: null,\n    tabIndex: number,\n    target: null,\n    title: null,\n    translate: null,\n    type: null,\n    typeMustMatch: boolean,\n    useMap: null,\n    value: booleanish,\n    width: number,\n    wrap: null,\n    writingSuggestions: null,\n\n    // Legacy.\n    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis\n    align: null, // Several. Use CSS `text-align` instead,\n    aLink: null, // `<body>`. Use CSS `a:active {color}` instead\n    archive: spaceSeparated, // `<object>`. List of URIs to archives\n    axis: null, // `<td>` and `<th>`. Use `scope` on `<th>`\n    background: null, // `<body>`. Use CSS `background-image` instead\n    bgColor: null, // `<body>` and table elements. Use CSS `background-color` instead\n    border: number, // `<table>`. Use CSS `border-width` instead,\n    borderColor: null, // `<table>`. Use CSS `border-color` instead,\n    bottomMargin: number, // `<body>`\n    cellPadding: null, // `<table>`\n    cellSpacing: null, // `<table>`\n    char: null, // Several table elements. When `align=char`, sets the character to align on\n    charOff: null, // Several table elements. When `char`, offsets the alignment\n    classId: null, // `<object>`\n    clear: null, // `<br>`. Use CSS `clear` instead\n    code: null, // `<object>`\n    codeBase: null, // `<object>`\n    codeType: null, // `<object>`\n    color: null, // `<font>` and `<hr>`. Use CSS instead\n    compact: boolean, // Lists. Use CSS to reduce space between items instead\n    declare: boolean, // `<object>`\n    event: null, // `<script>`\n    face: null, // `<font>`. Use CSS instead\n    frame: null, // `<table>`\n    frameBorder: null, // `<iframe>`. Use CSS `border` instead\n    hSpace: number, // `<img>` and `<object>`\n    leftMargin: number, // `<body>`\n    link: null, // `<body>`. Use CSS `a:link {color: *}` instead\n    longDesc: null, // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`\n    lowSrc: null, // `<img>`. Use a `<picture>`\n    marginHeight: number, // `<body>`\n    marginWidth: number, // `<body>`\n    noResize: boolean, // `<frame>`\n    noHref: boolean, // `<area>`. Use no href instead of an explicit `nohref`\n    noShade: boolean, // `<hr>`. Use background-color and height instead of borders\n    noWrap: boolean, // `<td>` and `<th>`\n    object: null, // `<applet>`\n    profile: null, // `<head>`\n    prompt: null, // `<isindex>`\n    rev: null, // `<link>`\n    rightMargin: number, // `<body>`\n    rules: null, // `<table>`\n    scheme: null, // `<meta>`\n    scrolling: booleanish, // `<frame>`. Use overflow in the child context\n    standby: null, // `<object>`\n    summary: null, // `<table>`\n    text: null, // `<body>`. Use CSS `color` instead\n    topMargin: number, // `<body>`\n    valueType: null, // `<param>`\n    version: null, // `<html>`. Use a doctype.\n    vAlign: null, // Several. Use CSS `vertical-align` instead\n    vLink: null, // `<body>`. Use CSS `a:visited {color}` instead\n    vSpace: number, // `<img>` and `<object>`\n\n    // Non-standard Properties.\n    allowTransparency: null,\n    autoCorrect: null,\n    autoSave: null,\n    disablePictureInPicture: boolean,\n    disableRemotePlayback: boolean,\n    prefix: null,\n    property: null,\n    results: number,\n    security: null,\n    unselectable: null\n  },\n  space: 'html',\n  transform: caseInsensitiveTransform\n})\n","import {caseSensitiveTransform} from './util/case-sensitive-transform.js'\nimport {create} from './util/create.js'\nimport {\n  boolean,\n  commaOrSpaceSeparated,\n  commaSeparated,\n  number,\n  spaceSeparated\n} from './util/types.js'\n\nexport const svg = create({\n  attributes: {\n    accentHeight: 'accent-height',\n    alignmentBaseline: 'alignment-baseline',\n    arabicForm: 'arabic-form',\n    baselineShift: 'baseline-shift',\n    capHeight: 'cap-height',\n    className: 'class',\n    clipPath: 'clip-path',\n    clipRule: 'clip-rule',\n    colorInterpolation: 'color-interpolation',\n    colorInterpolationFilters: 'color-interpolation-filters',\n    colorProfile: 'color-profile',\n    colorRendering: 'color-rendering',\n    crossOrigin: 'crossorigin',\n    dataType: 'datatype',\n    dominantBaseline: 'dominant-baseline',\n    enableBackground: 'enable-background',\n    fillOpacity: 'fill-opacity',\n    fillRule: 'fill-rule',\n    floodColor: 'flood-color',\n    floodOpacity: 'flood-opacity',\n    fontFamily: 'font-family',\n    fontSize: 'font-size',\n    fontSizeAdjust: 'font-size-adjust',\n    fontStretch: 'font-stretch',\n    fontStyle: 'font-style',\n    fontVariant: 'font-variant',\n    fontWeight: 'font-weight',\n    glyphName: 'glyph-name',\n    glyphOrientationHorizontal: 'glyph-orientation-horizontal',\n    glyphOrientationVertical: 'glyph-orientation-vertical',\n    hrefLang: 'hreflang',\n    horizAdvX: 'horiz-adv-x',\n    horizOriginX: 'horiz-origin-x',\n    horizOriginY: 'horiz-origin-y',\n    imageRendering: 'image-rendering',\n    letterSpacing: 'letter-spacing',\n    lightingColor: 'lighting-color',\n    markerEnd: 'marker-end',\n    markerMid: 'marker-mid',\n    markerStart: 'marker-start',\n    navDown: 'nav-down',\n    navDownLeft: 'nav-down-left',\n    navDownRight: 'nav-down-right',\n    navLeft: 'nav-left',\n    navNext: 'nav-next',\n    navPrev: 'nav-prev',\n    navRight: 'nav-right',\n    navUp: 'nav-up',\n    navUpLeft: 'nav-up-left',\n    navUpRight: 'nav-up-right',\n    onAbort: 'onabort',\n    onActivate: 'onactivate',\n    onAfterPrint: 'onafterprint',\n    onBeforePrint: 'onbeforeprint',\n    onBegin: 'onbegin',\n    onCancel: 'oncancel',\n    onCanPlay: 'oncanplay',\n    onCanPlayThrough: 'oncanplaythrough',\n    onChange: 'onchange',\n    onClick: 'onclick',\n    onClose: 'onclose',\n    onCopy: 'oncopy',\n    onCueChange: 'oncuechange',\n    onCut: 'oncut',\n    onDblClick: 'ondblclick',\n    onDrag: 'ondrag',\n    onDragEnd: 'ondragend',\n    onDragEnter: 'ondragenter',\n    onDragExit: 'ondragexit',\n    onDragLeave: 'ondragleave',\n    onDragOver: 'ondragover',\n    onDragStart: 'ondragstart',\n    onDrop: 'ondrop',\n    onDurationChange: 'ondurationchange',\n    onEmptied: 'onemptied',\n    onEnd: 'onend',\n    onEnded: 'onended',\n    onError: 'onerror',\n    onFocus: 'onfocus',\n    onFocusIn: 'onfocusin',\n    onFocusOut: 'onfocusout',\n    onHashChange: 'onhashchange',\n    onInput: 'oninput',\n    onInvalid: 'oninvalid',\n    onKeyDown: 'onkeydown',\n    onKeyPress: 'onkeypress',\n    onKeyUp: 'onkeyup',\n    onLoad: 'onload',\n    onLoadedData: 'onloadeddata',\n    onLoadedMetadata: 'onloadedmetadata',\n    onLoadStart: 'onloadstart',\n    onMessage: 'onmessage',\n    onMouseDown: 'onmousedown',\n    onMouseEnter: 'onmouseenter',\n    onMouseLeave: 'onmouseleave',\n    onMouseMove: 'onmousemove',\n    onMouseOut: 'onmouseout',\n    onMouseOver: 'onmouseover',\n    onMouseUp: 'onmouseup',\n    onMouseWheel: 'onmousewheel',\n    onOffline: 'onoffline',\n    onOnline: 'ononline',\n    onPageHide: 'onpagehide',\n    onPageShow: 'onpageshow',\n    onPaste: 'onpaste',\n    onPause: 'onpause',\n    onPlay: 'onplay',\n    onPlaying: 'onplaying',\n    onPopState: 'onpopstate',\n    onProgress: 'onprogress',\n    onRateChange: 'onratechange',\n    onRepeat: 'onrepeat',\n    onReset: 'onreset',\n    onResize: 'onresize',\n    onScroll: 'onscroll',\n    onSeeked: 'onseeked',\n    onSeeking: 'onseeking',\n    onSelect: 'onselect',\n    onShow: 'onshow',\n    onStalled: 'onstalled',\n    onStorage: 'onstorage',\n    onSubmit: 'onsubmit',\n    onSuspend: 'onsuspend',\n    onTimeUpdate: 'ontimeupdate',\n    onToggle: 'ontoggle',\n    onUnload: 'onunload',\n    onVolumeChange: 'onvolumechange',\n    onWaiting: 'onwaiting',\n    onZoom: 'onzoom',\n    overlinePosition: 'overline-position',\n    overlineThickness: 'overline-thickness',\n    paintOrder: 'paint-order',\n    panose1: 'panose-1',\n    pointerEvents: 'pointer-events',\n    referrerPolicy: 'referrerpolicy',\n    renderingIntent: 'rendering-intent',\n    shapeRendering: 'shape-rendering',\n    stopColor: 'stop-color',\n    stopOpacity: 'stop-opacity',\n    strikethroughPosition: 'strikethrough-position',\n    strikethroughThickness: 'strikethrough-thickness',\n    strokeDashArray: 'stroke-dasharray',\n    strokeDashOffset: 'stroke-dashoffset',\n    strokeLineCap: 'stroke-linecap',\n    strokeLineJoin: 'stroke-linejoin',\n    strokeMiterLimit: 'stroke-miterlimit',\n    strokeOpacity: 'stroke-opacity',\n    strokeWidth: 'stroke-width',\n    tabIndex: 'tabindex',\n    textAnchor: 'text-anchor',\n    textDecoration: 'text-decoration',\n    textRendering: 'text-rendering',\n    transformOrigin: 'transform-origin',\n    typeOf: 'typeof',\n    underlinePosition: 'underline-position',\n    underlineThickness: 'underline-thickness',\n    unicodeBidi: 'unicode-bidi',\n    unicodeRange: 'unicode-range',\n    unitsPerEm: 'units-per-em',\n    vAlphabetic: 'v-alphabetic',\n    vHanging: 'v-hanging',\n    vIdeographic: 'v-ideographic',\n    vMathematical: 'v-mathematical',\n    vectorEffect: 'vector-effect',\n    vertAdvY: 'vert-adv-y',\n    vertOriginX: 'vert-origin-x',\n    vertOriginY: 'vert-origin-y',\n    wordSpacing: 'word-spacing',\n    writingMode: 'writing-mode',\n    xHeight: 'x-height',\n    // These were camelcased in Tiny. Now lowercased in SVG 2\n    playbackOrder: 'playbackorder',\n    timelineBegin: 'timelinebegin'\n  },\n  properties: {\n    about: commaOrSpaceSeparated,\n    accentHeight: number,\n    accumulate: null,\n    additive: null,\n    alignmentBaseline: null,\n    alphabetic: number,\n    amplitude: number,\n    arabicForm: null,\n    ascent: number,\n    attributeName: null,\n    attributeType: null,\n    azimuth: number,\n    bandwidth: null,\n    baselineShift: null,\n    baseFrequency: null,\n    baseProfile: null,\n    bbox: null,\n    begin: null,\n    bias: number,\n    by: null,\n    calcMode: null,\n    capHeight: number,\n    className: spaceSeparated,\n    clip: null,\n    clipPath: null,\n    clipPathUnits: null,\n    clipRule: null,\n    color: null,\n    colorInterpolation: null,\n    colorInterpolationFilters: null,\n    colorProfile: null,\n    colorRendering: null,\n    content: null,\n    contentScriptType: null,\n    contentStyleType: null,\n    crossOrigin: null,\n    cursor: null,\n    cx: null,\n    cy: null,\n    d: null,\n    dataType: null,\n    defaultAction: null,\n    descent: number,\n    diffuseConstant: number,\n    direction: null,\n    display: null,\n    dur: null,\n    divisor: number,\n    dominantBaseline: null,\n    download: boolean,\n    dx: null,\n    dy: null,\n    edgeMode: null,\n    editable: null,\n    elevation: number,\n    enableBackground: null,\n    end: null,\n    event: null,\n    exponent: number,\n    externalResourcesRequired: null,\n    fill: null,\n    fillOpacity: number,\n    fillRule: null,\n    filter: null,\n    filterRes: null,\n    filterUnits: null,\n    floodColor: null,\n    floodOpacity: null,\n    focusable: null,\n    focusHighlight: null,\n    fontFamily: null,\n    fontSize: null,\n    fontSizeAdjust: null,\n    fontStretch: null,\n    fontStyle: null,\n    fontVariant: null,\n    fontWeight: null,\n    format: null,\n    fr: null,\n    from: null,\n    fx: null,\n    fy: null,\n    g1: commaSeparated,\n    g2: commaSeparated,\n    glyphName: commaSeparated,\n    glyphOrientationHorizontal: null,\n    glyphOrientationVertical: null,\n    glyphRef: null,\n    gradientTransform: null,\n    gradientUnits: null,\n    handler: null,\n    hanging: number,\n    hatchContentUnits: null,\n    hatchUnits: null,\n    height: null,\n    href: null,\n    hrefLang: null,\n    horizAdvX: number,\n    horizOriginX: number,\n    horizOriginY: number,\n    id: null,\n    ideographic: number,\n    imageRendering: null,\n    initialVisibility: null,\n    in: null,\n    in2: null,\n    intercept: number,\n    k: number,\n    k1: number,\n    k2: number,\n    k3: number,\n    k4: number,\n    kernelMatrix: commaOrSpaceSeparated,\n    kernelUnitLength: null,\n    keyPoints: null, // SEMI_COLON_SEPARATED\n    keySplines: null, // SEMI_COLON_SEPARATED\n    keyTimes: null, // SEMI_COLON_SEPARATED\n    kerning: null,\n    lang: null,\n    lengthAdjust: null,\n    letterSpacing: null,\n    lightingColor: null,\n    limitingConeAngle: number,\n    local: null,\n    markerEnd: null,\n    markerMid: null,\n    markerStart: null,\n    markerHeight: null,\n    markerUnits: null,\n    markerWidth: null,\n    mask: null,\n    maskContentUnits: null,\n    maskUnits: null,\n    mathematical: null,\n    max: null,\n    media: null,\n    mediaCharacterEncoding: null,\n    mediaContentEncodings: null,\n    mediaSize: number,\n    mediaTime: null,\n    method: null,\n    min: null,\n    mode: null,\n    name: null,\n    navDown: null,\n    navDownLeft: null,\n    navDownRight: null,\n    navLeft: null,\n    navNext: null,\n    navPrev: null,\n    navRight: null,\n    navUp: null,\n    navUpLeft: null,\n    navUpRight: null,\n    numOctaves: null,\n    observer: null,\n    offset: null,\n    onAbort: null,\n    onActivate: null,\n    onAfterPrint: null,\n    onBeforePrint: null,\n    onBegin: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnd: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFocusIn: null,\n    onFocusOut: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onMouseWheel: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRepeat: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onShow: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onZoom: null,\n    opacity: null,\n    operator: null,\n    order: null,\n    orient: null,\n    orientation: null,\n    origin: null,\n    overflow: null,\n    overlay: null,\n    overlinePosition: number,\n    overlineThickness: number,\n    paintOrder: null,\n    panose1: null,\n    path: null,\n    pathLength: number,\n    patternContentUnits: null,\n    patternTransform: null,\n    patternUnits: null,\n    phase: null,\n    ping: spaceSeparated,\n    pitch: null,\n    playbackOrder: null,\n    pointerEvents: null,\n    points: null,\n    pointsAtX: number,\n    pointsAtY: number,\n    pointsAtZ: number,\n    preserveAlpha: null,\n    preserveAspectRatio: null,\n    primitiveUnits: null,\n    propagate: null,\n    property: commaOrSpaceSeparated,\n    r: null,\n    radius: null,\n    referrerPolicy: null,\n    refX: null,\n    refY: null,\n    rel: commaOrSpaceSeparated,\n    rev: commaOrSpaceSeparated,\n    renderingIntent: null,\n    repeatCount: null,\n    repeatDur: null,\n    requiredExtensions: commaOrSpaceSeparated,\n    requiredFeatures: commaOrSpaceSeparated,\n    requiredFonts: commaOrSpaceSeparated,\n    requiredFormats: commaOrSpaceSeparated,\n    resource: null,\n    restart: null,\n    result: null,\n    rotate: null,\n    rx: null,\n    ry: null,\n    scale: null,\n    seed: null,\n    shapeRendering: null,\n    side: null,\n    slope: null,\n    snapshotTime: null,\n    specularConstant: number,\n    specularExponent: number,\n    spreadMethod: null,\n    spacing: null,\n    startOffset: null,\n    stdDeviation: null,\n    stemh: null,\n    stemv: null,\n    stitchTiles: null,\n    stopColor: null,\n    stopOpacity: null,\n    strikethroughPosition: number,\n    strikethroughThickness: number,\n    string: null,\n    stroke: null,\n    strokeDashArray: commaOrSpaceSeparated,\n    strokeDashOffset: null,\n    strokeLineCap: null,\n    strokeLineJoin: null,\n    strokeMiterLimit: number,\n    strokeOpacity: number,\n    strokeWidth: null,\n    style: null,\n    surfaceScale: number,\n    syncBehavior: null,\n    syncBehaviorDefault: null,\n    syncMaster: null,\n    syncTolerance: null,\n    syncToleranceDefault: null,\n    systemLanguage: commaOrSpaceSeparated,\n    tabIndex: number,\n    tableValues: null,\n    target: null,\n    targetX: number,\n    targetY: number,\n    textAnchor: null,\n    textDecoration: null,\n    textRendering: null,\n    textLength: null,\n    timelineBegin: null,\n    title: null,\n    transformBehavior: null,\n    type: null,\n    typeOf: commaOrSpaceSeparated,\n    to: null,\n    transform: null,\n    transformOrigin: null,\n    u1: null,\n    u2: null,\n    underlinePosition: number,\n    underlineThickness: number,\n    unicode: null,\n    unicodeBidi: null,\n    unicodeRange: null,\n    unitsPerEm: number,\n    values: null,\n    vAlphabetic: number,\n    vMathematical: number,\n    vectorEffect: null,\n    vHanging: number,\n    vIdeographic: number,\n    version: null,\n    vertAdvY: number,\n    vertOriginX: number,\n    vertOriginY: number,\n    viewBox: null,\n    viewTarget: null,\n    visibility: null,\n    width: null,\n    widths: null,\n    wordSpacing: null,\n    writingMode: null,\n    x: null,\n    x1: null,\n    x2: null,\n    xChannelSelector: null,\n    xHeight: number,\n    y: null,\n    y1: null,\n    y2: null,\n    yChannelSelector: null,\n    z: null,\n    zoomAndPan: null\n  },\n  space: 'svg',\n  transform: caseSensitiveTransform\n})\n","import {create} from './util/create.js'\n\nexport const xlink = create({\n  properties: {\n    xLinkActuate: null,\n    xLinkArcRole: null,\n    xLinkHref: null,\n    xLinkRole: null,\n    xLinkShow: null,\n    xLinkTitle: null,\n    xLinkType: null\n  },\n  space: 'xlink',\n  transform(_, property) {\n    return 'xlink:' + property.slice(5).toLowerCase()\n  }\n})\n","import {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const xmlns = create({\n  attributes: {xmlnsxlink: 'xmlns:xlink'},\n  properties: {xmlnsXLink: null, xmlns: null},\n  space: 'xmlns',\n  transform: caseInsensitiveTransform\n})\n","import {create} from './util/create.js'\n\nexport const xml = create({\n  properties: {xmlBase: null, xmlLang: null, xmlSpace: null},\n  space: 'xml',\n  transform(_, property) {\n    return 'xml:' + property.slice(3).toLowerCase()\n  }\n})\n","// Note: types exposed from `index.d.ts`.\nimport {merge} from './lib/util/merge.js'\nimport {aria} from './lib/aria.js'\nimport {html as htmlBase} from './lib/html.js'\nimport {svg as svgBase} from './lib/svg.js'\nimport {xlink} from './lib/xlink.js'\nimport {xmlns} from './lib/xmlns.js'\nimport {xml} from './lib/xml.js'\n\nexport {hastToReact} from './lib/hast-to-react.js'\n\nexport const html = merge([aria, htmlBase, xlink, xmlns, xml], 'html')\n\nexport {find} from './lib/find.js'\nexport {normalize} from './lib/normalize.js'\n\nexport const svg = merge([aria, svgBase, xlink, xmlns, xml], 'svg')\n","/**\n * @import {Schema} from 'property-information'\n */\n\nimport {DefinedInfo} from './util/defined-info.js'\nimport {Info} from './util/info.js'\nimport {normalize} from './normalize.js'\n\nconst cap = /[A-Z]/g\nconst dash = /-[a-z]/g\nconst valid = /^data[-\\w.:]+$/i\n\n/**\n * Look up info on a property.\n *\n * In most cases the given `schema` contains info on the property.\n * All standard,\n * most legacy,\n * and some non-standard properties are supported.\n * For these cases,\n * the returned `Info` has hints about the value of the property.\n *\n * `name` can also be a valid data attribute or property,\n * in which case an `Info` object with the correctly cased `attribute` and\n * `property` is returned.\n *\n * `name` can be an unknown attribute,\n * in which case an `Info` object with `attribute` and `property` set to the\n * given name is returned.\n * It is not recommended to provide unsupported legacy or recently specced\n * properties.\n *\n *\n * @param {Schema} schema\n *   Schema;\n *   either the `html` or `svg` export.\n * @param {string} value\n *   An attribute-like or property-like name;\n *   it will be passed through `normalize` to hopefully find the correct info.\n * @returns {Info}\n *   Info.\n */\nexport function find(schema, value) {\n  const normal = normalize(value)\n  let property = value\n  let Type = Info\n\n  if (normal in schema.normal) {\n    return schema.property[schema.normal[normal]]\n  }\n\n  if (normal.length > 4 && normal.slice(0, 4) === 'data' && valid.test(value)) {\n    // Attribute or property.\n    if (value.charAt(4) === '-') {\n      // Turn it into a property.\n      const rest = value.slice(5).replace(dash, camelcase)\n      property = 'data' + rest.charAt(0).toUpperCase() + rest.slice(1)\n    } else {\n      // Turn it into an attribute.\n      const rest = value.slice(4)\n\n      if (!dash.test(rest)) {\n        let dashes = rest.replace(cap, kebab)\n\n        if (dashes.charAt(0) !== '-') {\n          dashes = '-' + dashes\n        }\n\n        value = 'data' + dashes\n      }\n    }\n\n    Type = DefinedInfo\n  }\n\n  return new Type(property, value)\n}\n\n/**\n * @param {string} $0\n *   Value.\n * @returns {string}\n *   Kebab.\n */\nfunction kebab($0) {\n  return '-' + $0.toLowerCase()\n}\n\n/**\n * @param {string} $0\n *   Value.\n * @returns {string}\n *   Camel.\n */\nfunction camelcase($0) {\n  return $0.charAt(1).toUpperCase()\n}\n","/**\n * Special cases for React (`Record<string, string>`).\n *\n * `hast` is close to `React` but differs in a couple of cases.\n * To get a React property from a hast property,\n * check if it is in `hastToReact`.\n * If it is, use the corresponding value;\n * otherwise, use the hast property.\n *\n * @type {Record<string, string>}\n */\nexport const hastToReact = {\n  classId: 'classID',\n  dataType: 'datatype',\n  itemId: 'itemID',\n  strokeDashArray: 'strokeDasharray',\n  strokeDashOffset: 'strokeDashoffset',\n  strokeLineCap: 'strokeLinecap',\n  strokeLineJoin: 'strokeLinejoin',\n  strokeMiterLimit: 'strokeMiterlimit',\n  typeOf: 'typeof',\n  xLinkActuate: 'xlinkActuate',\n  xLinkArcRole: 'xlinkArcrole',\n  xLinkHref: 'xlinkHref',\n  xLinkRole: 'xlinkRole',\n  xLinkShow: 'xlinkShow',\n  xLinkTitle: 'xlinkTitle',\n  xLinkType: 'xlinkType',\n  xmlnsXLink: 'xmlnsXlink'\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Get the ending point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointEnd = point('end')\n\n/**\n * Get the starting point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointStart = point('start')\n\n/**\n * Get the positional info of `node`.\n *\n * @param {'end' | 'start'} type\n *   Side.\n * @returns\n *   Getter.\n */\nfunction point(type) {\n  return point\n\n  /**\n   * Get the point info of `node` at a bound side.\n   *\n   * @param {Node | NodeLike | null | undefined} [node]\n   * @returns {Point | undefined}\n   */\n  function point(node) {\n    const point = (node && node.position && node.position[type]) || {}\n\n    if (\n      typeof point.line === 'number' &&\n      point.line > 0 &&\n      typeof point.column === 'number' &&\n      point.column > 0\n    ) {\n      return {\n        line: point.line,\n        column: point.column,\n        offset:\n          typeof point.offset === 'number' && point.offset > -1\n            ? point.offset\n            : undefined\n      }\n    }\n  }\n}\n\n/**\n * Get the positional info of `node`.\n *\n * @param {Node | NodeLike | null | undefined} [node]\n *   Node.\n * @returns {Position | undefined}\n *   Position.\n */\nexport function position(node) {\n  const start = pointStart(node)\n  const end = pointEnd(node)\n\n  if (start && end) {\n    return {start, end}\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n */\n\n/**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Point | PointLike | Position | PositionLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position)\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value)\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n *\n * @typedef Options\n *   Configuration.\n * @property {Array<Node> | null | undefined} [ancestors]\n *   Stack of (inclusive) ancestor nodes surrounding the message (optional).\n * @property {Error | null | undefined} [cause]\n *   Original error cause of the message (optional).\n * @property {Point | Position | null | undefined} [place]\n *   Place of message (optional).\n * @property {string | null | undefined} [ruleId]\n *   Category of message (optional, example: `'my-rule'`).\n * @property {string | null | undefined} [source]\n *   Namespace of who sent the message (optional, example: `'my-package'`).\n */\n\nimport {stringifyPosition} from 'unist-util-stringify-position'\n\n/**\n * Message.\n */\nexport class VFileMessage extends Error {\n  /**\n   * Create a message for `reason`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Options | null | undefined} [options]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | Options | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns\n   *   Instance of `VFileMessage`.\n   */\n  // eslint-disable-next-line complexity\n  constructor(causeOrReason, optionsOrParentOrPlace, origin) {\n    super()\n\n    if (typeof optionsOrParentOrPlace === 'string') {\n      origin = optionsOrParentOrPlace\n      optionsOrParentOrPlace = undefined\n    }\n\n    /** @type {string} */\n    let reason = ''\n    /** @type {Options} */\n    let options = {}\n    let legacyCause = false\n\n    if (optionsOrParentOrPlace) {\n      // Point.\n      if (\n        'line' in optionsOrParentOrPlace &&\n        'column' in optionsOrParentOrPlace\n      ) {\n        options = {place: optionsOrParentOrPlace}\n      }\n      // Position.\n      else if (\n        'start' in optionsOrParentOrPlace &&\n        'end' in optionsOrParentOrPlace\n      ) {\n        options = {place: optionsOrParentOrPlace}\n      }\n      // Node.\n      else if ('type' in optionsOrParentOrPlace) {\n        options = {\n          ancestors: [optionsOrParentOrPlace],\n          place: optionsOrParentOrPlace.position\n        }\n      }\n      // Options.\n      else {\n        options = {...optionsOrParentOrPlace}\n      }\n    }\n\n    if (typeof causeOrReason === 'string') {\n      reason = causeOrReason\n    }\n    // Error.\n    else if (!options.cause && causeOrReason) {\n      legacyCause = true\n      reason = causeOrReason.message\n      options.cause = causeOrReason\n    }\n\n    if (!options.ruleId && !options.source && typeof origin === 'string') {\n      const index = origin.indexOf(':')\n\n      if (index === -1) {\n        options.ruleId = origin\n      } else {\n        options.source = origin.slice(0, index)\n        options.ruleId = origin.slice(index + 1)\n      }\n    }\n\n    if (!options.place && options.ancestors && options.ancestors) {\n      const parent = options.ancestors[options.ancestors.length - 1]\n\n      if (parent) {\n        options.place = parent.position\n      }\n    }\n\n    const start =\n      options.place && 'start' in options.place\n        ? options.place.start\n        : options.place\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * Stack of ancestor nodes surrounding the message.\n     *\n     * @type {Array<Node> | undefined}\n     */\n    this.ancestors = options.ancestors || undefined\n\n    /**\n     * Original error cause of the message.\n     *\n     * @type {Error | undefined}\n     */\n    this.cause = options.cause || undefined\n\n    /**\n     * Starting column of message.\n     *\n     * @type {number | undefined}\n     */\n    this.column = start ? start.column : undefined\n\n    /**\n     * State of problem.\n     *\n     * * `true` — error, file not usable\n     * * `false` — warning, change may be needed\n     * * `undefined` — change likely not needed\n     *\n     * @type {boolean | null | undefined}\n     */\n    this.fatal = undefined\n\n    /**\n     * Path of a file (used throughout the `VFile` ecosystem).\n     *\n     * @type {string | undefined}\n     */\n    this.file\n\n    // Field from `Error`.\n    /**\n     * Reason for message.\n     *\n     * @type {string}\n     */\n    this.message = reason\n\n    /**\n     * Starting line of error.\n     *\n     * @type {number | undefined}\n     */\n    this.line = start ? start.line : undefined\n\n    // Field from `Error`.\n    /**\n     * Serialized positional info of message.\n     *\n     * On normal errors, this would be something like `ParseError`, buit in\n     * `VFile` messages we use this space to show where an error happened.\n     */\n    this.name = stringifyPosition(options.place) || '1:1'\n\n    /**\n     * Place of message.\n     *\n     * @type {Point | Position | undefined}\n     */\n    this.place = options.place || undefined\n\n    /**\n     * Reason for message, should use markdown.\n     *\n     * @type {string}\n     */\n    this.reason = this.message\n\n    /**\n     * Category of message (example: `'my-rule'`).\n     *\n     * @type {string | undefined}\n     */\n    this.ruleId = options.ruleId || undefined\n\n    /**\n     * Namespace of message (example: `'my-package'`).\n     *\n     * @type {string | undefined}\n     */\n    this.source = options.source || undefined\n\n    // Field from `Error`.\n    /**\n     * Stack of message.\n     *\n     * This is used by normal errors to show where something happened in\n     * programming code, irrelevant for `VFile` messages,\n     *\n     * @type {string}\n     */\n    this.stack =\n      legacyCause && options.cause && typeof options.cause.stack === 'string'\n        ? options.cause.stack\n        : ''\n\n    // The following fields are “well known”.\n    // Not standard.\n    // Feel free to add other non-standard fields to your messages.\n\n    /**\n     * Specify the source value that’s being reported, which is deemed\n     * incorrect.\n     *\n     * @type {string | undefined}\n     */\n    this.actual\n\n    /**\n     * Suggest acceptable values that can be used instead of `actual`.\n     *\n     * @type {Array<string> | undefined}\n     */\n    this.expected\n\n    /**\n     * Long form description of the message (you should use markdown).\n     *\n     * @type {string | undefined}\n     */\n    this.note\n\n    /**\n     * Link to docs for the message.\n     *\n     * > 👉 **Note**: this must be an absolute URL that can be passed as `x`\n     * > to `new URL(x)`.\n     *\n     * @type {string | undefined}\n     */\n    this.url\n    /* eslint-enable no-unused-expressions */\n  }\n}\n\nVFileMessage.prototype.file = ''\nVFileMessage.prototype.name = ''\nVFileMessage.prototype.reason = ''\nVFileMessage.prototype.message = ''\nVFileMessage.prototype.stack = ''\nVFileMessage.prototype.column = undefined\nVFileMessage.prototype.line = undefined\nVFileMessage.prototype.ancestors = undefined\nVFileMessage.prototype.cause = undefined\nVFileMessage.prototype.fatal = undefined\nVFileMessage.prototype.place = undefined\nVFileMessage.prototype.ruleId = undefined\nVFileMessage.prototype.source = undefined\n","/**\n * @import {Identifier, Literal, MemberExpression} from 'estree'\n * @import {Jsx, JsxDev, Options, Props} from 'hast-util-to-jsx-runtime'\n * @import {Element, Nodes, Parents, Root, Text} from 'hast'\n * @import {MdxFlowExpressionHast, MdxTextExpressionHast} from 'mdast-util-mdx-expression'\n * @import {MdxJsxFlowElementHast, MdxJsxTextElementHast} from 'mdast-util-mdx-jsx'\n * @import {MdxjsEsmHast} from 'mdast-util-mdxjs-esm'\n * @import {Position} from 'unist'\n * @import {Child, Create, Field, JsxElement, State, Style} from './types.js'\n */\n\nimport {stringify as commas} from 'comma-separated-tokens'\nimport {ok as assert} from 'devlop'\nimport {name as isIdentifierName} from 'estree-util-is-identifier-name'\nimport {whitespace} from 'hast-util-whitespace'\nimport {find, hastToReact, html, svg} from 'property-information'\nimport {stringify as spaces} from 'space-separated-tokens'\nimport styleToJs from 'style-to-js'\nimport {pointStart} from 'unist-util-position'\nimport {VFileMessage} from 'vfile-message'\n\n// To do: next major: `Object.hasOwn`.\nconst own = {}.hasOwnProperty\n\n/** @type {Map<string, number>} */\nconst emptyMap = new Map()\n\nconst cap = /[A-Z]/g\n\n// `react-dom` triggers a warning for *any* white space in tables.\n// To follow GFM, `mdast-util-to-hast` injects line endings between elements.\n// Other tools might do so too, but they don’t do here, so we remove all of\n// that.\n\n// See: <https://github.com/facebook/react/pull/7081>.\n// See: <https://github.com/facebook/react/pull/7515>.\n// See: <https://github.com/remarkjs/remark-react/issues/64>.\n// See: <https://github.com/rehypejs/rehype-react/pull/29>.\n// See: <https://github.com/rehypejs/rehype-react/pull/32>.\n// See: <https://github.com/rehypejs/rehype-react/pull/45>.\nconst tableElements = new Set(['table', 'tbody', 'thead', 'tfoot', 'tr'])\n\nconst tableCellElement = new Set(['td', 'th'])\n\nconst docs = 'https://github.com/syntax-tree/hast-util-to-jsx-runtime'\n\n/**\n * Transform a hast tree to preact, react, solid, svelte, vue, etc.,\n * with an automatic JSX runtime.\n *\n * @param {Nodes} tree\n *   Tree to transform.\n * @param {Options} options\n *   Configuration (required).\n * @returns {JsxElement}\n *   JSX element.\n */\n\nexport function toJsxRuntime(tree, options) {\n  if (!options || options.Fragment === undefined) {\n    throw new TypeError('Expected `Fragment` in options')\n  }\n\n  const filePath = options.filePath || undefined\n  /** @type {Create} */\n  let create\n\n  if (options.development) {\n    if (typeof options.jsxDEV !== 'function') {\n      throw new TypeError(\n        'Expected `jsxDEV` in options when `development: true`'\n      )\n    }\n\n    create = developmentCreate(filePath, options.jsxDEV)\n  } else {\n    if (typeof options.jsx !== 'function') {\n      throw new TypeError('Expected `jsx` in production options')\n    }\n\n    if (typeof options.jsxs !== 'function') {\n      throw new TypeError('Expected `jsxs` in production options')\n    }\n\n    create = productionCreate(filePath, options.jsx, options.jsxs)\n  }\n\n  /** @type {State} */\n  const state = {\n    Fragment: options.Fragment,\n    ancestors: [],\n    components: options.components || {},\n    create,\n    elementAttributeNameCase: options.elementAttributeNameCase || 'react',\n    evaluater: options.createEvaluater ? options.createEvaluater() : undefined,\n    filePath,\n    ignoreInvalidStyle: options.ignoreInvalidStyle || false,\n    passKeys: options.passKeys !== false,\n    passNode: options.passNode || false,\n    schema: options.space === 'svg' ? svg : html,\n    stylePropertyNameCase: options.stylePropertyNameCase || 'dom',\n    tableCellAlignToStyle: options.tableCellAlignToStyle !== false\n  }\n\n  const result = one(state, tree, undefined)\n\n  // JSX element.\n  if (result && typeof result !== 'string') {\n    return result\n  }\n\n  // Text node or something that turned into nothing.\n  return state.create(\n    tree,\n    state.Fragment,\n    {children: result || undefined},\n    undefined\n  )\n}\n\n/**\n * Transform a node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Nodes} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction one(state, node, key) {\n  if (node.type === 'element') {\n    return element(state, node, key)\n  }\n\n  if (node.type === 'mdxFlowExpression' || node.type === 'mdxTextExpression') {\n    return mdxExpression(state, node)\n  }\n\n  if (node.type === 'mdxJsxFlowElement' || node.type === 'mdxJsxTextElement') {\n    return mdxJsxElement(state, node, key)\n  }\n\n  if (node.type === 'mdxjsEsm') {\n    return mdxEsm(state, node)\n  }\n\n  if (node.type === 'root') {\n    return root(state, node, key)\n  }\n\n  if (node.type === 'text') {\n    return text(state, node)\n  }\n}\n\n/**\n * Handle element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Element} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction element(state, node, key) {\n  const parentSchema = state.schema\n  let schema = parentSchema\n\n  if (node.tagName.toLowerCase() === 'svg' && parentSchema.space === 'html') {\n    schema = svg\n    state.schema = schema\n  }\n\n  state.ancestors.push(node)\n\n  const type = findComponentFromName(state, node.tagName, false)\n  const props = createElementProps(state, node)\n  let children = createChildren(state, node)\n\n  if (tableElements.has(node.tagName)) {\n    children = children.filter(function (child) {\n      return typeof child === 'string' ? !whitespace(child) : true\n    })\n  }\n\n  addNode(state, props, type, node)\n  addChildren(props, children)\n\n  // Restore.\n  state.ancestors.pop()\n  state.schema = parentSchema\n\n  return state.create(node, type, props, key)\n}\n\n/**\n * Handle MDX expression.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxFlowExpressionHast | MdxTextExpressionHast} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxExpression(state, node) {\n  if (node.data && node.data.estree && state.evaluater) {\n    const program = node.data.estree\n    const expression = program.body[0]\n    assert(expression.type === 'ExpressionStatement')\n\n    // Assume result is a child.\n    return /** @type {Child | undefined} */ (\n      state.evaluater.evaluateExpression(expression.expression)\n    )\n  }\n\n  crashEstree(state, node.position)\n}\n\n/**\n * Handle MDX ESM.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxjsEsmHast} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxEsm(state, node) {\n  if (node.data && node.data.estree && state.evaluater) {\n    // Assume result is a child.\n    return /** @type {Child | undefined} */ (\n      state.evaluater.evaluateProgram(node.data.estree)\n    )\n  }\n\n  crashEstree(state, node.position)\n}\n\n/**\n * Handle MDX JSX.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxJsxFlowElementHast | MdxJsxTextElementHast} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxJsxElement(state, node, key) {\n  const parentSchema = state.schema\n  let schema = parentSchema\n\n  if (node.name === 'svg' && parentSchema.space === 'html') {\n    schema = svg\n    state.schema = schema\n  }\n\n  state.ancestors.push(node)\n\n  const type =\n    node.name === null\n      ? state.Fragment\n      : findComponentFromName(state, node.name, true)\n  const props = createJsxElementProps(state, node)\n  const children = createChildren(state, node)\n\n  addNode(state, props, type, node)\n  addChildren(props, children)\n\n  // Restore.\n  state.ancestors.pop()\n  state.schema = parentSchema\n\n  return state.create(node, type, props, key)\n}\n\n/**\n * Handle root.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Root} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction root(state, node, key) {\n  /** @type {Props} */\n  const props = {}\n\n  addChildren(props, createChildren(state, node))\n\n  return state.create(node, state.Fragment, props, key)\n}\n\n/**\n * Handle text.\n *\n * @param {State} _\n *   Info passed around.\n * @param {Text} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction text(_, node) {\n  return node.value\n}\n\n/**\n * Add `node` to props.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Props} props\n *   Props.\n * @param {unknown} type\n *   Type.\n * @param {Element | MdxJsxFlowElementHast | MdxJsxTextElementHast} node\n *   Node.\n * @returns {undefined}\n *   Nothing.\n */\nfunction addNode(state, props, type, node) {\n  // If this is swapped out for a component:\n  if (typeof type !== 'string' && type !== state.Fragment && state.passNode) {\n    props.node = node\n  }\n}\n\n/**\n * Add children to props.\n *\n * @param {Props} props\n *   Props.\n * @param {Array<Child>} children\n *   Children.\n * @returns {undefined}\n *   Nothing.\n */\nfunction addChildren(props, children) {\n  if (children.length > 0) {\n    const value = children.length > 1 ? children : children[0]\n\n    if (value) {\n      props.children = value\n    }\n  }\n}\n\n/**\n * @param {string | undefined} _\n *   Path to file.\n * @param {Jsx} jsx\n *   Dynamic.\n * @param {Jsx} jsxs\n *   Static.\n * @returns {Create}\n *   Create a production element.\n */\nfunction productionCreate(_, jsx, jsxs) {\n  return create\n  /** @type {Create} */\n  function create(_, type, props, key) {\n    // Only an array when there are 2 or more children.\n    const isStaticChildren = Array.isArray(props.children)\n    const fn = isStaticChildren ? jsxs : jsx\n    return key ? fn(type, props, key) : fn(type, props)\n  }\n}\n\n/**\n * @param {string | undefined} filePath\n *   Path to file.\n * @param {JsxDev} jsxDEV\n *   Development.\n * @returns {Create}\n *   Create a development element.\n */\nfunction developmentCreate(filePath, jsxDEV) {\n  return create\n  /** @type {Create} */\n  function create(node, type, props, key) {\n    // Only an array when there are 2 or more children.\n    const isStaticChildren = Array.isArray(props.children)\n    const point = pointStart(node)\n    return jsxDEV(\n      type,\n      props,\n      key,\n      isStaticChildren,\n      {\n        columnNumber: point ? point.column - 1 : undefined,\n        fileName: filePath,\n        lineNumber: point ? point.line : undefined\n      },\n      undefined\n    )\n  }\n}\n\n/**\n * Create props from an element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Element} node\n *   Current element.\n * @returns {Props}\n *   Props.\n */\nfunction createElementProps(state, node) {\n  /** @type {Props} */\n  const props = {}\n  /** @type {string | undefined} */\n  let alignValue\n  /** @type {string} */\n  let prop\n\n  for (prop in node.properties) {\n    if (prop !== 'children' && own.call(node.properties, prop)) {\n      const result = createProperty(state, prop, node.properties[prop])\n\n      if (result) {\n        const [key, value] = result\n\n        if (\n          state.tableCellAlignToStyle &&\n          key === 'align' &&\n          typeof value === 'string' &&\n          tableCellElement.has(node.tagName)\n        ) {\n          alignValue = value\n        } else {\n          props[key] = value\n        }\n      }\n    }\n  }\n\n  if (alignValue) {\n    // Assume style is an object.\n    const style = /** @type {Style} */ (props.style || (props.style = {}))\n    style[state.stylePropertyNameCase === 'css' ? 'text-align' : 'textAlign'] =\n      alignValue\n  }\n\n  return props\n}\n\n/**\n * Create props from a JSX element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxJsxFlowElementHast | MdxJsxTextElementHast} node\n *   Current JSX element.\n * @returns {Props}\n *   Props.\n */\nfunction createJsxElementProps(state, node) {\n  /** @type {Props} */\n  const props = {}\n\n  for (const attribute of node.attributes) {\n    if (attribute.type === 'mdxJsxExpressionAttribute') {\n      if (attribute.data && attribute.data.estree && state.evaluater) {\n        const program = attribute.data.estree\n        const expression = program.body[0]\n        assert(expression.type === 'ExpressionStatement')\n        const objectExpression = expression.expression\n        assert(objectExpression.type === 'ObjectExpression')\n        const property = objectExpression.properties[0]\n        assert(property.type === 'SpreadElement')\n\n        Object.assign(\n          props,\n          state.evaluater.evaluateExpression(property.argument)\n        )\n      } else {\n        crashEstree(state, node.position)\n      }\n    } else {\n      // For JSX, the author is responsible of passing in the correct values.\n      const name = attribute.name\n      /** @type {unknown} */\n      let value\n\n      if (attribute.value && typeof attribute.value === 'object') {\n        if (\n          attribute.value.data &&\n          attribute.value.data.estree &&\n          state.evaluater\n        ) {\n          const program = attribute.value.data.estree\n          const expression = program.body[0]\n          assert(expression.type === 'ExpressionStatement')\n          value = state.evaluater.evaluateExpression(expression.expression)\n        } else {\n          crashEstree(state, node.position)\n        }\n      } else {\n        value = attribute.value === null ? true : attribute.value\n      }\n\n      // Assume a prop.\n      props[name] = /** @type {Props[keyof Props]} */ (value)\n    }\n  }\n\n  return props\n}\n\n/**\n * Create children.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Parents} node\n *   Current element.\n * @returns {Array<Child>}\n *   Children.\n */\nfunction createChildren(state, node) {\n  /** @type {Array<Child>} */\n  const children = []\n  let index = -1\n  /** @type {Map<string, number>} */\n  // Note: test this when Solid doesn’t want to merge my upcoming PR.\n  /* c8 ignore next */\n  const countsByName = state.passKeys ? new Map() : emptyMap\n\n  while (++index < node.children.length) {\n    const child = node.children[index]\n    /** @type {string | undefined} */\n    let key\n\n    if (state.passKeys) {\n      const name =\n        child.type === 'element'\n          ? child.tagName\n          : child.type === 'mdxJsxFlowElement' ||\n              child.type === 'mdxJsxTextElement'\n            ? child.name\n            : undefined\n\n      if (name) {\n        const count = countsByName.get(name) || 0\n        key = name + '-' + count\n        countsByName.set(name, count + 1)\n      }\n    }\n\n    const result = one(state, child, key)\n    if (result !== undefined) children.push(result)\n  }\n\n  return children\n}\n\n/**\n * Handle a property.\n *\n * @param {State} state\n *   Info passed around.\n * @param {string} prop\n *   Key.\n * @param {Array<number | string> | boolean | number | string | null | undefined} value\n *   hast property value.\n * @returns {Field | undefined}\n *   Field for runtime, optional.\n */\nfunction createProperty(state, prop, value) {\n  const info = find(state.schema, prop)\n\n  // Ignore nullish and `NaN` values.\n  if (\n    value === null ||\n    value === undefined ||\n    (typeof value === 'number' && Number.isNaN(value))\n  ) {\n    return\n  }\n\n  if (Array.isArray(value)) {\n    // Accept `array`.\n    // Most props are space-separated.\n    value = info.commaSeparated ? commas(value) : spaces(value)\n  }\n\n  // React only accepts `style` as object.\n  if (info.property === 'style') {\n    let styleObject =\n      typeof value === 'object' ? value : parseStyle(state, String(value))\n\n    if (state.stylePropertyNameCase === 'css') {\n      styleObject = transformStylesToCssCasing(styleObject)\n    }\n\n    return ['style', styleObject]\n  }\n\n  return [\n    state.elementAttributeNameCase === 'react' && info.space\n      ? hastToReact[info.property] || info.property\n      : info.attribute,\n    value\n  ]\n}\n\n/**\n * Parse a CSS declaration to an object.\n *\n * @param {State} state\n *   Info passed around.\n * @param {string} value\n *   CSS declarations.\n * @returns {Style}\n *   Properties.\n * @throws\n *   Throws `VFileMessage` when CSS cannot be parsed.\n */\nfunction parseStyle(state, value) {\n  try {\n    return styleToJs(value, {reactCompat: true})\n  } catch (error) {\n    if (state.ignoreInvalidStyle) {\n      return {}\n    }\n\n    const cause = /** @type {Error} */ (error)\n    const message = new VFileMessage('Cannot parse `style` attribute', {\n      ancestors: state.ancestors,\n      cause,\n      ruleId: 'style',\n      source: 'hast-util-to-jsx-runtime'\n    })\n    message.file = state.filePath || undefined\n    message.url = docs + '#cannot-parse-style-attribute'\n\n    throw message\n  }\n}\n\n/**\n * Create a JSX name from a string.\n *\n * @param {State} state\n *   To do.\n * @param {string} name\n *   Name.\n * @param {boolean} allowExpression\n *   Allow member expressions and identifiers.\n * @returns {unknown}\n *   To do.\n */\nfunction findComponentFromName(state, name, allowExpression) {\n  /** @type {Identifier | Literal | MemberExpression} */\n  let result\n\n  if (!allowExpression) {\n    result = {type: 'Literal', value: name}\n  } else if (name.includes('.')) {\n    const identifiers = name.split('.')\n    let index = -1\n    /** @type {Identifier | Literal | MemberExpression | undefined} */\n    let node\n\n    while (++index < identifiers.length) {\n      /** @type {Identifier | Literal} */\n      const prop = isIdentifierName(identifiers[index])\n        ? {type: 'Identifier', name: identifiers[index]}\n        : {type: 'Literal', value: identifiers[index]}\n      node = node\n        ? {\n            type: 'MemberExpression',\n            object: node,\n            property: prop,\n            computed: Boolean(index && prop.type === 'Literal'),\n            optional: false\n          }\n        : prop\n    }\n\n    assert(node, 'always a result')\n    result = node\n  } else {\n    result =\n      isIdentifierName(name) && !/^[a-z]/.test(name)\n        ? {type: 'Identifier', name}\n        : {type: 'Literal', value: name}\n  }\n\n  // Only literals can be passed in `components` currently.\n  // No identifiers / member expressions.\n  if (result.type === 'Literal') {\n    const name = /** @type {string | number} */ (result.value)\n    return own.call(state.components, name) ? state.components[name] : name\n  }\n\n  // Assume component.\n  if (state.evaluater) {\n    return state.evaluater.evaluateExpression(result)\n  }\n\n  crashEstree(state)\n}\n\n/**\n * @param {State} state\n * @param {Position | undefined} [place]\n * @returns {never}\n */\nfunction crashEstree(state, place) {\n  const message = new VFileMessage(\n    'Cannot handle MDX estrees without `createEvaluater`',\n    {\n      ancestors: state.ancestors,\n      place,\n      ruleId: 'mdx-estree',\n      source: 'hast-util-to-jsx-runtime'\n    }\n  )\n  message.file = state.filePath || undefined\n  message.url = docs + '#cannot-handle-mdx-estrees-without-createevaluater'\n\n  throw message\n}\n\n/**\n * Transform a DOM casing style object to a CSS casing style object.\n *\n * @param {Style} domCasing\n * @returns {Style}\n */\nfunction transformStylesToCssCasing(domCasing) {\n  /** @type {Style} */\n  const cssCasing = {}\n  /** @type {string} */\n  let from\n\n  for (from in domCasing) {\n    if (own.call(domCasing, from)) {\n      cssCasing[transformStyleToCssCasing(from)] = domCasing[from]\n    }\n  }\n\n  return cssCasing\n}\n\n/**\n * Transform a DOM casing style field to a CSS casing style field.\n *\n * @param {string} from\n * @returns {string}\n */\nfunction transformStyleToCssCasing(from) {\n  let to = from.replace(cap, toDash)\n  // Handle `ms-xxx` -> `-ms-xxx`.\n  if (to.slice(0, 3) === 'ms-') to = '-' + to\n  return to\n}\n\n/**\n * Make `$0` dash cased.\n *\n * @param {string} $0\n *   Capitalized ASCII leter.\n * @returns {string}\n *   Dash and lower letter.\n */\nfunction toDash($0) {\n  return '-' + $0.toLowerCase()\n}\n","/**\n * @typedef Options\n *   Configuration for `stringify`.\n * @property {boolean} [padLeft=true]\n *   Whether to pad a space before a token.\n * @property {boolean} [padRight=false]\n *   Whether to pad a space after a token.\n */\n\n/**\n * @typedef {Options} StringifyOptions\n *   Please use `StringifyOptions` instead.\n */\n\n/**\n * Parse comma-separated tokens to an array.\n *\n * @param {string} value\n *   Comma-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  /** @type {Array<string>} */\n  const tokens = []\n  const input = String(value || '')\n  let index = input.indexOf(',')\n  let start = 0\n  /** @type {boolean} */\n  let end = false\n\n  while (!end) {\n    if (index === -1) {\n      index = input.length\n      end = true\n    }\n\n    const token = input.slice(start, index).trim()\n\n    if (token || !end) {\n      tokens.push(token)\n    }\n\n    start = index + 1\n    index = input.indexOf(',', start)\n  }\n\n  return tokens\n}\n\n/**\n * Serialize an array of strings or numbers to comma-separated tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @param {Options} [options]\n *   Configuration for `stringify` (optional).\n * @returns {string}\n *   Comma-separated tokens.\n */\nexport function stringify(values, options) {\n  const settings = options || {}\n\n  // Ensure the last empty entry is seen.\n  const input = values[values.length - 1] === '' ? [...values, ''] : values\n\n  return input\n    .join(\n      (settings.padRight ? ' ' : '') +\n        ',' +\n        (settings.padLeft === false ? '' : ' ')\n    )\n    .trim()\n}\n","/**\n * Parse space-separated tokens to an array of strings.\n *\n * @param {string} value\n *   Space-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  const input = String(value || '').trim()\n  return input ? input.split(/[ \\t\\n\\r\\f]+/g) : []\n}\n\n/**\n * Serialize an array of strings as space separated-tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @returns {string}\n *   Space-separated tokens.\n */\nexport function stringify(values) {\n  return values.join(' ').trim()\n}\n","/**\n * HTML URL properties.\n *\n * Each key is a property name and each value is a list of tag names it applies\n * to or `null` if it applies to all elements.\n *\n * @type {Record<string, Array<string> | null>}\n */\nexport const urlAttributes = {\n  action: ['form'],\n  cite: ['blockquote', 'del', 'ins', 'q'],\n  data: ['object'],\n  formAction: ['button', 'input'],\n  href: ['a', 'area', 'base', 'link'],\n  icon: ['menuitem'],\n  itemId: null,\n  manifest: ['html'],\n  ping: ['a', 'area'],\n  poster: ['video'],\n  src: [\n    'audio',\n    'embed',\n    'iframe',\n    'img',\n    'input',\n    'script',\n    'source',\n    'track',\n    'video'\n  ]\n}\n","/**\n * Some of the internal operations of micromark do lots of editing\n * operations on very large arrays. This runs into problems with two\n * properties of most circa-2020 JavaScript interpreters:\n *\n *  - Array-length modifications at the high end of an array (push/pop) are\n *    expected to be common and are implemented in (amortized) time\n *    proportional to the number of elements added or removed, whereas\n *    other operations (shift/unshift and splice) are much less efficient.\n *  - Function arguments are passed on the stack, so adding tens of thousands\n *    of elements to an array with `arr.push(...newElements)` will frequently\n *    cause stack overflows. (see <https://stackoverflow.com/questions/22123769/rangeerror-maximum-call-stack-size-exceeded-why>)\n *\n * SpliceBuffers are an implementation of gap buffers, which are a\n * generalization of the \"queue made of two stacks\" idea. The splice buffer\n * maintains a cursor, and moving the cursor has cost proportional to the\n * distance the cursor moves, but inserting, deleting, or splicing in\n * new information at the cursor is as efficient as the push/pop operation.\n * This allows for an efficient sequence of splices (or pushes, pops, shifts,\n * or unshifts) as long such edits happen at the same part of the array or\n * generally sweep through the array from the beginning to the end.\n *\n * The interface for splice buffers also supports large numbers of inputs by\n * passing a single array argument rather passing multiple arguments on the\n * function call stack.\n *\n * @template T\n *   Item type.\n */\nexport class SpliceBuffer {\n  /**\n   * @param {ReadonlyArray<T> | null | undefined} [initial]\n   *   Initial items (optional).\n   * @returns\n   *   Splice buffer.\n   */\n  constructor(initial) {\n    /** @type {Array<T>} */\n    this.left = initial ? [...initial] : [];\n    /** @type {Array<T>} */\n    this.right = [];\n  }\n\n  /**\n   * Array access;\n   * does not move the cursor.\n   *\n   * @param {number} index\n   *   Index.\n   * @return {T}\n   *   Item.\n   */\n  get(index) {\n    if (index < 0 || index >= this.left.length + this.right.length) {\n      throw new RangeError('Cannot access index `' + index + '` in a splice buffer of size `' + (this.left.length + this.right.length) + '`');\n    }\n    if (index < this.left.length) return this.left[index];\n    return this.right[this.right.length - index + this.left.length - 1];\n  }\n\n  /**\n   * The length of the splice buffer, one greater than the largest index in the\n   * array.\n   */\n  get length() {\n    return this.left.length + this.right.length;\n  }\n\n  /**\n   * Remove and return `list[0]`;\n   * moves the cursor to `0`.\n   *\n   * @returns {T | undefined}\n   *   Item, optional.\n   */\n  shift() {\n    this.setCursor(0);\n    return this.right.pop();\n  }\n\n  /**\n   * Slice the buffer to get an array;\n   * does not move the cursor.\n   *\n   * @param {number} start\n   *   Start.\n   * @param {number | null | undefined} [end]\n   *   End (optional).\n   * @returns {Array<T>}\n   *   Array of items.\n   */\n  slice(start, end) {\n    /** @type {number} */\n    const stop = end === null || end === undefined ? Number.POSITIVE_INFINITY : end;\n    if (stop < this.left.length) {\n      return this.left.slice(start, stop);\n    }\n    if (start > this.left.length) {\n      return this.right.slice(this.right.length - stop + this.left.length, this.right.length - start + this.left.length).reverse();\n    }\n    return this.left.slice(start).concat(this.right.slice(this.right.length - stop + this.left.length).reverse());\n  }\n\n  /**\n   * Mimics the behavior of Array.prototype.splice() except for the change of\n   * interface necessary to avoid segfaults when patching in very large arrays.\n   *\n   * This operation moves cursor is moved to `start` and results in the cursor\n   * placed after any inserted items.\n   *\n   * @param {number} start\n   *   Start;\n   *   zero-based index at which to start changing the array;\n   *   negative numbers count backwards from the end of the array and values\n   *   that are out-of bounds are clamped to the appropriate end of the array.\n   * @param {number | null | undefined} [deleteCount=0]\n   *   Delete count (default: `0`);\n   *   maximum number of elements to delete, starting from start.\n   * @param {Array<T> | null | undefined} [items=[]]\n   *   Items to include in place of the deleted items (default: `[]`).\n   * @return {Array<T>}\n   *   Any removed items.\n   */\n  splice(start, deleteCount, items) {\n    /** @type {number} */\n    const count = deleteCount || 0;\n    this.setCursor(Math.trunc(start));\n    const removed = this.right.splice(this.right.length - count, Number.POSITIVE_INFINITY);\n    if (items) chunkedPush(this.left, items);\n    return removed.reverse();\n  }\n\n  /**\n   * Remove and return the highest-numbered item in the array, so\n   * `list[list.length - 1]`;\n   * Moves the cursor to `length`.\n   *\n   * @returns {T | undefined}\n   *   Item, optional.\n   */\n  pop() {\n    this.setCursor(Number.POSITIVE_INFINITY);\n    return this.left.pop();\n  }\n\n  /**\n   * Inserts a single item to the high-numbered side of the array;\n   * moves the cursor to `length`.\n   *\n   * @param {T} item\n   *   Item.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  push(item) {\n    this.setCursor(Number.POSITIVE_INFINITY);\n    this.left.push(item);\n  }\n\n  /**\n   * Inserts many items to the high-numbered side of the array.\n   * Moves the cursor to `length`.\n   *\n   * @param {Array<T>} items\n   *   Items.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  pushMany(items) {\n    this.setCursor(Number.POSITIVE_INFINITY);\n    chunkedPush(this.left, items);\n  }\n\n  /**\n   * Inserts a single item to the low-numbered side of the array;\n   * Moves the cursor to `0`.\n   *\n   * @param {T} item\n   *   Item.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  unshift(item) {\n    this.setCursor(0);\n    this.right.push(item);\n  }\n\n  /**\n   * Inserts many items to the low-numbered side of the array;\n   * moves the cursor to `0`.\n   *\n   * @param {Array<T>} items\n   *   Items.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  unshiftMany(items) {\n    this.setCursor(0);\n    chunkedPush(this.right, items.reverse());\n  }\n\n  /**\n   * Move the cursor to a specific position in the array. Requires\n   * time proportional to the distance moved.\n   *\n   * If `n < 0`, the cursor will end up at the beginning.\n   * If `n > length`, the cursor will end up at the end.\n   *\n   * @param {number} n\n   *   Position.\n   * @return {undefined}\n   *   Nothing.\n   */\n  setCursor(n) {\n    if (n === this.left.length || n > this.left.length && this.right.length === 0 || n < 0 && this.left.length === 0) return;\n    if (n < this.left.length) {\n      // Move cursor to the this.left\n      const removed = this.left.splice(n, Number.POSITIVE_INFINITY);\n      chunkedPush(this.right, removed.reverse());\n    } else {\n      // Move cursor to the this.right\n      const removed = this.right.splice(this.left.length + this.right.length - n, Number.POSITIVE_INFINITY);\n      chunkedPush(this.left, removed.reverse());\n    }\n  }\n}\n\n/**\n * Avoid stack overflow by pushing items onto the stack in segments\n *\n * @template T\n *   Item type.\n * @param {Array<T>} list\n *   List to inject into.\n * @param {ReadonlyArray<T>} right\n *   Items to inject.\n * @return {undefined}\n *   Nothing.\n */\nfunction chunkedPush(list, right) {\n  /** @type {number} */\n  let chunkStart = 0;\n  if (right.length < 10000) {\n    list.push(...right);\n  } else {\n    while (chunkStart < right.length) {\n      list.push(...right.slice(chunkStart, chunkStart + 10000));\n      chunkStart += 10000;\n    }\n  }\n}","/**\n * @import {Chunk, Event, Token} from 'micromark-util-types'\n */\n\nimport { splice } from 'micromark-util-chunked';\nimport { SpliceBuffer } from './lib/splice-buffer.js';\n\n// Hidden API exposed for testing.\nexport { SpliceBuffer } from './lib/splice-buffer.js';\n\n/**\n * Tokenize subcontent.\n *\n * @param {Array<Event>} eventsArray\n *   List of events.\n * @returns {boolean}\n *   Whether subtokens were found.\n */\n// eslint-disable-next-line complexity\nexport function subtokenize(eventsArray) {\n  /** @type {Record<string, number>} */\n  const jumps = {};\n  let index = -1;\n  /** @type {Event} */\n  let event;\n  /** @type {number | undefined} */\n  let lineIndex;\n  /** @type {number} */\n  let otherIndex;\n  /** @type {Event} */\n  let otherEvent;\n  /** @type {Array<Event>} */\n  let parameters;\n  /** @type {Array<Event>} */\n  let subevents;\n  /** @type {boolean | undefined} */\n  let more;\n  const events = new SpliceBuffer(eventsArray);\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index];\n    }\n    event = events.get(index);\n\n    // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n    if (index && event[1].type === \"chunkFlow\" && events.get(index - 1)[1].type === \"listItemPrefix\") {\n      subevents = event[1]._tokenizer.events;\n      otherIndex = 0;\n      if (otherIndex < subevents.length && subevents[otherIndex][1].type === \"lineEndingBlank\") {\n        otherIndex += 2;\n      }\n      if (otherIndex < subevents.length && subevents[otherIndex][1].type === \"content\") {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === \"content\") {\n            break;\n          }\n          if (subevents[otherIndex][1].type === \"chunkText\") {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true;\n            otherIndex++;\n          }\n        }\n      }\n    }\n\n    // Enter.\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index));\n        index = jumps[index];\n        more = true;\n      }\n    }\n    // Exit.\n    else if (event[1]._container) {\n      otherIndex = index;\n      lineIndex = undefined;\n      while (otherIndex--) {\n        otherEvent = events.get(otherIndex);\n        if (otherEvent[1].type === \"lineEnding\" || otherEvent[1].type === \"lineEndingBlank\") {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events.get(lineIndex)[1].type = \"lineEndingBlank\";\n            }\n            otherEvent[1].type = \"lineEnding\";\n            lineIndex = otherIndex;\n          }\n        } else if (otherEvent[1].type === \"linePrefix\" || otherEvent[1].type === \"listItemIndent\") {\n          // Move past.\n        } else {\n          break;\n        }\n      }\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = {\n          ...events.get(lineIndex)[1].start\n        };\n\n        // Switch container exit w/ line endings.\n        parameters = events.slice(lineIndex, index);\n        parameters.unshift(event);\n        events.splice(lineIndex, index - lineIndex + 1, parameters);\n      }\n    }\n  }\n\n  // The changes to the `events` buffer must be copied back into the eventsArray\n  splice(eventsArray, 0, Number.POSITIVE_INFINITY, events.slice(0));\n  return !more;\n}\n\n/**\n * Tokenize embedded tokens.\n *\n * @param {SpliceBuffer<Event>} events\n *   Events.\n * @param {number} eventIndex\n *   Index.\n * @returns {Record<string, number>}\n *   Gaps.\n */\nfunction subcontent(events, eventIndex) {\n  const token = events.get(eventIndex)[1];\n  const context = events.get(eventIndex)[2];\n  let startPosition = eventIndex - 1;\n  /** @type {Array<number>} */\n  const startPositions = [];\n  let tokenizer = token._tokenizer;\n  if (!tokenizer) {\n    tokenizer = context.parser[token.contentType](token.start);\n    if (token._contentTypeTextTrailing) {\n      tokenizer._contentTypeTextTrailing = true;\n    }\n  }\n  const childEvents = tokenizer.events;\n  /** @type {Array<[number, number]>} */\n  const jumps = [];\n  /** @type {Record<string, number>} */\n  const gaps = {};\n  /** @type {Array<Chunk>} */\n  let stream;\n  /** @type {Token | undefined} */\n  let previous;\n  let index = -1;\n  /** @type {Token | undefined} */\n  let current = token;\n  let adjust = 0;\n  let start = 0;\n  const breaks = [start];\n\n  // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n  while (current) {\n    // Find the position of the event for this token.\n    while (events.get(++startPosition)[1] !== current) {\n      // Empty.\n    }\n    startPositions.push(startPosition);\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current);\n      if (!current.next) {\n        stream.push(null);\n      }\n      if (previous) {\n        tokenizer.defineSkip(current.start);\n      }\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true;\n      }\n      tokenizer.write(stream);\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined;\n      }\n    }\n\n    // Unravel the next token.\n    previous = current;\n    current = current.next;\n  }\n\n  // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n  current = token;\n  while (++index < childEvents.length) {\n    if (\n    // Find a void token that includes a break.\n    childEvents[index][0] === 'exit' && childEvents[index - 1][0] === 'enter' && childEvents[index][1].type === childEvents[index - 1][1].type && childEvents[index][1].start.line !== childEvents[index][1].end.line) {\n      start = index + 1;\n      breaks.push(start);\n      // Help GC.\n      current._tokenizer = undefined;\n      current.previous = undefined;\n      current = current.next;\n    }\n  }\n\n  // Help GC.\n  tokenizer.events = [];\n\n  // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined;\n    current.previous = undefined;\n  } else {\n    breaks.pop();\n  }\n\n  // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n  index = breaks.length;\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1]);\n    const start = startPositions.pop();\n    jumps.push([start, start + slice.length - 1]);\n    events.splice(start, 2, slice);\n  }\n  jumps.reverse();\n  index = -1;\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1];\n    adjust += jumps[index][1] - jumps[index][0] - 1;\n  }\n  return gaps;\n}","/**\n * @import {\n *   InitialConstruct,\n *   Initializer,\n *   State,\n *   TokenizeContext,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {InitialConstruct} */\nexport const content = {\n  tokenize: initializeContent\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Initializer}\n *   Content.\n */\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(this.parser.constructs.contentInitial, afterContentStartConstruct, paragraphInitial);\n  /** @type {Token} */\n  let previous;\n  return contentStart;\n\n  /** @type {State} */\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code);\n      return;\n    }\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return factorySpace(effects, contentStart, \"linePrefix\");\n  }\n\n  /** @type {State} */\n  function paragraphInitial(code) {\n    effects.enter(\"paragraph\");\n    return lineStart(code);\n  }\n\n  /** @type {State} */\n  function lineStart(code) {\n    const token = effects.enter(\"chunkText\", {\n      contentType: \"text\",\n      previous\n    });\n    if (previous) {\n      previous.next = token;\n    }\n    previous = token;\n    return data(code);\n  }\n\n  /** @type {State} */\n  function data(code) {\n    if (code === null) {\n      effects.exit(\"chunkText\");\n      effects.exit(\"paragraph\");\n      effects.consume(code);\n      return;\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code);\n      effects.exit(\"chunkText\");\n      return lineStart;\n    }\n\n    // Data.\n    effects.consume(code);\n    return data;\n  }\n}","/**\n * @import {\n *   Construct,\n *   ContainerState,\n *   InitialConstruct,\n *   Initializer,\n *   Point,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\n/**\n * @typedef {[Construct, ContainerState]} StackItem\n *   Construct and its state.\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { splice } from 'micromark-util-chunked';\n/** @type {InitialConstruct} */\nexport const document = {\n  tokenize: initializeDocument\n};\n\n/** @type {Construct} */\nconst containerConstruct = {\n  tokenize: tokenizeContainer\n};\n\n/**\n * @this {TokenizeContext}\n *   Self.\n * @type {Initializer}\n *   Initializer.\n */\nfunction initializeDocument(effects) {\n  const self = this;\n  /** @type {Array<StackItem>} */\n  const stack = [];\n  let continued = 0;\n  /** @type {TokenizeContext | undefined} */\n  let childFlow;\n  /** @type {Token | undefined} */\n  let childToken;\n  /** @type {number} */\n  let lineStartOffset;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued];\n      self.containerState = item[1];\n      return effects.attempt(item[0].continuation, documentContinue, checkNewContainers)(code);\n    }\n\n    // Done.\n    return checkNewContainers(code);\n  }\n\n  /** @type {State} */\n  function documentContinue(code) {\n    continued++;\n\n    // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined;\n      if (childFlow) {\n        closeFlow();\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n      const indexBeforeExits = self.events.length;\n      let indexBeforeFlow = indexBeforeExits;\n      /** @type {Point | undefined} */\n      let point;\n\n      // Find the flow chunk.\n      while (indexBeforeFlow--) {\n        if (self.events[indexBeforeFlow][0] === 'exit' && self.events[indexBeforeFlow][1].type === \"chunkFlow\") {\n          point = self.events[indexBeforeFlow][1].end;\n          break;\n        }\n      }\n      exitContainers(continued);\n\n      // Fix positions.\n      let index = indexBeforeExits;\n      while (index < self.events.length) {\n        self.events[index][1].end = {\n          ...point\n        };\n        index++;\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(self.events, indexBeforeFlow + 1, 0, self.events.slice(indexBeforeExits));\n\n      // Discard the duplicate exits.\n      self.events.length = index;\n      return checkNewContainers(code);\n    }\n    return start(code);\n  }\n\n  /** @type {State} */\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code);\n      }\n\n      // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code);\n      }\n\n      // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n      // To do: next major: remove `_gfmTableDynamicInterruptHack` (no longer\n      // needed in micromark-extension-gfm-table@1.0.6).\n      self.interrupt = Boolean(childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack);\n    }\n\n    // Check if there is a new container.\n    self.containerState = {};\n    return effects.check(containerConstruct, thereIsANewContainer, thereIsNoNewContainer)(code);\n  }\n\n  /** @type {State} */\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow();\n    exitContainers(continued);\n    return documentContinued(code);\n  }\n\n  /** @type {State} */\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length;\n    lineStartOffset = self.now().offset;\n    return flowStart(code);\n  }\n\n  /** @type {State} */\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {};\n    return effects.attempt(containerConstruct, containerContinue, flowStart)(code);\n  }\n\n  /** @type {State} */\n  function containerContinue(code) {\n    continued++;\n    stack.push([self.currentConstruct, self.containerState]);\n    // Try another.\n    return documentContinued(code);\n  }\n\n  /** @type {State} */\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow();\n      exitContainers(0);\n      effects.consume(code);\n      return;\n    }\n    childFlow = childFlow || self.parser.flow(self.now());\n    effects.enter(\"chunkFlow\", {\n      _tokenizer: childFlow,\n      contentType: \"flow\",\n      previous: childToken\n    });\n    return flowContinue(code);\n  }\n\n  /** @type {State} */\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit(\"chunkFlow\"), true);\n      exitContainers(0);\n      effects.consume(code);\n      return;\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code);\n      writeToChild(effects.exit(\"chunkFlow\"));\n      // Get ready for the next line.\n      continued = 0;\n      self.interrupt = undefined;\n      return start;\n    }\n    effects.consume(code);\n    return flowContinue;\n  }\n\n  /**\n   * @param {Token} token\n   *   Token.\n   * @param {boolean | undefined} [endOfFile]\n   *   Whether the token is at the end of the file (default: `false`).\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function writeToChild(token, endOfFile) {\n    const stream = self.sliceStream(token);\n    if (endOfFile) stream.push(null);\n    token.previous = childToken;\n    if (childToken) childToken.next = token;\n    childToken = token;\n    childFlow.defineSkip(token.start);\n    childFlow.write(stream);\n\n    // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length;\n      while (index--) {\n        if (\n        // The token starts before the line ending…\n        childFlow.events[index][1].start.offset < lineStartOffset && (\n        // …and either is not ended yet…\n        !childFlow.events[index][1].end ||\n        // …or ends after it.\n        childFlow.events[index][1].end.offset > lineStartOffset)) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return;\n        }\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n      const indexBeforeExits = self.events.length;\n      let indexBeforeFlow = indexBeforeExits;\n      /** @type {boolean | undefined} */\n      let seen;\n      /** @type {Point | undefined} */\n      let point;\n\n      // Find the previous chunk (the one before the lazy line).\n      while (indexBeforeFlow--) {\n        if (self.events[indexBeforeFlow][0] === 'exit' && self.events[indexBeforeFlow][1].type === \"chunkFlow\") {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end;\n            break;\n          }\n          seen = true;\n        }\n      }\n      exitContainers(continued);\n\n      // Fix positions.\n      index = indexBeforeExits;\n      while (index < self.events.length) {\n        self.events[index][1].end = {\n          ...point\n        };\n        index++;\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(self.events, indexBeforeFlow + 1, 0, self.events.slice(indexBeforeExits));\n\n      // Discard the duplicate exits.\n      self.events.length = index;\n    }\n  }\n\n  /**\n   * @param {number} size\n   *   Size.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function exitContainers(size) {\n    let index = stack.length;\n\n    // Exit open containers.\n    while (index-- > size) {\n      const entry = stack[index];\n      self.containerState = entry[1];\n      entry[0].exit.call(self, effects);\n    }\n    stack.length = size;\n  }\n  function closeFlow() {\n    childFlow.write([null]);\n    childToken = undefined;\n    childFlow = undefined;\n    self.containerState._closeFlow = undefined;\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n *   Tokenizer.\n */\nfunction tokenizeContainer(effects, ok, nok) {\n  // Always populated by defaults.\n\n  return factorySpace(effects, effects.attempt(this.parser.constructs.document, ok, nok), \"linePrefix\", this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4);\n}","/**\n * @import {\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { subtokenize } from 'micromark-util-subtokenize';\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  resolve: resolveContent,\n  tokenize: tokenizeContent\n};\n\n/** @type {Construct} */\nconst continuationConstruct = {\n  partial: true,\n  tokenize: tokenizeContinuation\n};\n\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\nfunction resolveContent(events) {\n  subtokenize(events);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token | undefined} */\n  let previous;\n  return chunkStart;\n\n  /**\n   * Before a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkStart(code) {\n    effects.enter(\"content\");\n    previous = effects.enter(\"chunkContent\", {\n      contentType: \"content\"\n    });\n    return chunkInside(code);\n  }\n\n  /**\n   * In a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkInside(code) {\n    if (code === null) {\n      return contentEnd(code);\n    }\n\n    // To do: in `markdown-rs`, each line is parsed on its own, and everything\n    // is stitched together resolving.\n    if (markdownLineEnding(code)) {\n      return effects.check(continuationConstruct, contentContinue, contentEnd)(code);\n    }\n\n    // Data.\n    effects.consume(code);\n    return chunkInside;\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentEnd(code) {\n    effects.exit(\"chunkContent\");\n    effects.exit(\"content\");\n    return ok(code);\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentContinue(code) {\n    effects.consume(code);\n    effects.exit(\"chunkContent\");\n    previous.next = effects.enter(\"chunkContent\", {\n      contentType: \"content\",\n      previous\n    });\n    previous = previous.next;\n    return chunkInside;\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this;\n  return startLookahead;\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function startLookahead(code) {\n    effects.exit(\"chunkContent\");\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return factorySpace(effects, prefixed, \"linePrefix\");\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code);\n    }\n\n    // Always populated by defaults.\n\n    const tail = self.events[self.events.length - 1];\n    if (!self.parser.constructs.disable.null.includes('codeIndented') && tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4) {\n      return ok(code);\n    }\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code);\n  }\n}","/**\n * @import {\n *   InitialConstruct,\n *   Initializer,\n *   State,\n *   TokenizeContext\n * } from 'micromark-util-types'\n */\n\nimport { blankLine, content } from 'micromark-core-commonmark';\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {InitialConstruct} */\nexport const flow = {\n  tokenize: initializeFlow\n};\n\n/**\n * @this {TokenizeContext}\n *   Self.\n * @type {Initializer}\n *   Initializer.\n */\nfunction initializeFlow(effects) {\n  const self = this;\n  const initial = effects.attempt(\n  // Try to parse a blank line.\n  blankLine, atBlankEnding,\n  // Try to parse initial flow (essentially, only code).\n  effects.attempt(this.parser.constructs.flowInitial, afterConstruct, factorySpace(effects, effects.attempt(this.parser.constructs.flow, afterConstruct, effects.attempt(content, afterConstruct)), \"linePrefix\")));\n  return initial;\n\n  /** @type {State} */\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code);\n      return;\n    }\n    effects.enter(\"lineEndingBlank\");\n    effects.consume(code);\n    effects.exit(\"lineEndingBlank\");\n    self.currentConstruct = undefined;\n    return initial;\n  }\n\n  /** @type {State} */\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code);\n      return;\n    }\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    self.currentConstruct = undefined;\n    return initial;\n  }\n}","/**\n * @import {\n *   Code,\n *   InitialConstruct,\n *   Initializer,\n *   Resolver,\n *   State,\n *   TokenizeContext\n * } from 'micromark-util-types'\n */\n\nexport const resolver = {\n  resolveAll: createResolver()\n};\nexport const string = initializeFactory('string');\nexport const text = initializeFactory('text');\n\n/**\n * @param {'string' | 'text'} field\n *   Field.\n * @returns {InitialConstruct}\n *   Construct.\n */\nfunction initializeFactory(field) {\n  return {\n    resolveAll: createResolver(field === 'text' ? resolveAllLineSuffixes : undefined),\n    tokenize: initializeText\n  };\n\n  /**\n   * @this {TokenizeContext}\n   *   Context.\n   * @type {Initializer}\n   */\n  function initializeText(effects) {\n    const self = this;\n    const constructs = this.parser.constructs[field];\n    const text = effects.attempt(constructs, start, notText);\n    return start;\n\n    /** @type {State} */\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code);\n    }\n\n    /** @type {State} */\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code);\n        return;\n      }\n      effects.enter(\"data\");\n      effects.consume(code);\n      return data;\n    }\n\n    /** @type {State} */\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit(\"data\");\n        return text(code);\n      }\n\n      // Data.\n      effects.consume(code);\n      return data;\n    }\n\n    /**\n     * @param {Code} code\n     *   Code.\n     * @returns {boolean}\n     *   Whether the code is a break.\n     */\n    function atBreak(code) {\n      if (code === null) {\n        return true;\n      }\n      const list = constructs[code];\n      let index = -1;\n      if (list) {\n        // Always populated by defaults.\n\n        while (++index < list.length) {\n          const item = list[index];\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n  }\n}\n\n/**\n * @param {Resolver | undefined} [extraResolver]\n *   Resolver.\n * @returns {Resolver}\n *   Resolver.\n */\nfunction createResolver(extraResolver) {\n  return resolveAllText;\n\n  /** @type {Resolver} */\n  function resolveAllText(events, context) {\n    let index = -1;\n    /** @type {number | undefined} */\n    let enter;\n\n    // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === \"data\") {\n          enter = index;\n          index++;\n        }\n      } else if (!events[index] || events[index][1].type !== \"data\") {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end;\n          events.splice(enter + 2, index - enter - 2);\n          index = enter + 2;\n        }\n        enter = undefined;\n      }\n    }\n    return extraResolver ? extraResolver(events, context) : events;\n  }\n}\n\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0; // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if ((eventIndex === events.length || events[eventIndex][1].type === \"lineEnding\") && events[eventIndex - 1][1].type === \"data\") {\n      const data = events[eventIndex - 1][1];\n      const chunks = context.sliceStream(data);\n      let index = chunks.length;\n      let bufferIndex = -1;\n      let size = 0;\n      /** @type {boolean | undefined} */\n      let tabs;\n      while (index--) {\n        const chunk = chunks[index];\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length;\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++;\n            bufferIndex--;\n          }\n          if (bufferIndex) break;\n          bufferIndex = -1;\n        }\n        // Number\n        else if (chunk === -2) {\n          tabs = true;\n          size++;\n        } else if (chunk === -1) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++;\n          break;\n        }\n      }\n\n      // Allow final trailing whitespace.\n      if (context._contentTypeTextTrailing && eventIndex === events.length) {\n        size = 0;\n      }\n      if (size) {\n        const token = {\n          type: eventIndex === events.length || tabs || size < 2 ? \"lineSuffix\" : \"hardBreakTrailing\",\n          start: {\n            _bufferIndex: index ? bufferIndex : data.start._bufferIndex + bufferIndex,\n            _index: data.start._index + index,\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size\n          },\n          end: {\n            ...data.end\n          }\n        };\n        data.end = {\n          ...token.start\n        };\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token);\n        } else {\n          events.splice(eventIndex, 0, ['enter', token, context], ['exit', token, context]);\n          eventIndex += 2;\n        }\n      }\n      eventIndex++;\n    }\n  }\n  return events;\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Start of thematic break.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"thematicBreak\");\n    // To do: parse indent like `markdown-rs`.\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at marker.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    marker = code;\n    return atBreak(code);\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter(\"thematicBreakSequence\");\n      return sequence(code);\n    }\n    if (size >= 3 && (code === null || markdownLineEnding(code))) {\n      effects.exit(\"thematicBreak\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code);\n      size++;\n      return sequence;\n    }\n    effects.exit(\"thematicBreakSequence\");\n    return markdownSpace(code) ? factorySpace(effects, atBreak, \"whitespace\")(code) : atBreak(code);\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   Exiter,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { asciiDigit, markdownSpace } from 'micromark-util-character';\nimport { blankLine } from './blank-line.js';\nimport { thematicBreak } from './thematic-break.js';\n\n/** @type {Construct} */\nexport const list = {\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd,\n  name: 'list',\n  tokenize: tokenizeListStart\n};\n\n/** @type {Construct} */\nconst listItemPrefixWhitespaceConstruct = {\n  partial: true,\n  tokenize: tokenizeListItemPrefixWhitespace\n};\n\n/** @type {Construct} */\nconst indentConstruct = {\n  partial: true,\n  tokenize: tokenizeIndent\n};\n\n// To do: `markdown-rs` parses list items on their own and later stitches them\n// together.\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this;\n  const tail = self.events[self.events.length - 1];\n  let initialSize = tail && tail[1].type === \"linePrefix\" ? tail[2].sliceSerialize(tail[1], true).length : 0;\n  let size = 0;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    const kind = self.containerState.type || (code === 42 || code === 43 || code === 45 ? \"listUnordered\" : \"listOrdered\");\n    if (kind === \"listUnordered\" ? !self.containerState.marker || code === self.containerState.marker : asciiDigit(code)) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind;\n        effects.enter(kind, {\n          _container: true\n        });\n      }\n      if (kind === \"listUnordered\") {\n        effects.enter(\"listItemPrefix\");\n        return code === 42 || code === 45 ? effects.check(thematicBreak, nok, atMarker)(code) : atMarker(code);\n      }\n      if (!self.interrupt || code === 49) {\n        effects.enter(\"listItemPrefix\");\n        effects.enter(\"listItemValue\");\n        return inside(code);\n      }\n    }\n    return nok(code);\n  }\n\n  /** @type {State} */\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code);\n      return inside;\n    }\n    if ((!self.interrupt || size < 2) && (self.containerState.marker ? code === self.containerState.marker : code === 41 || code === 46)) {\n      effects.exit(\"listItemValue\");\n      return atMarker(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * @type {State}\n   **/\n  function atMarker(code) {\n    effects.enter(\"listItemMarker\");\n    effects.consume(code);\n    effects.exit(\"listItemMarker\");\n    self.containerState.marker = self.containerState.marker || code;\n    return effects.check(blankLine,\n    // Can’t be empty when interrupting.\n    self.interrupt ? nok : onBlank, effects.attempt(listItemPrefixWhitespaceConstruct, endOfPrefix, otherPrefix));\n  }\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true;\n    initialSize++;\n    return endOfPrefix(code);\n  }\n\n  /** @type {State} */\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter(\"listItemPrefixWhitespace\");\n      effects.consume(code);\n      effects.exit(\"listItemPrefixWhitespace\");\n      return endOfPrefix;\n    }\n    return nok(code);\n  }\n\n  /** @type {State} */\n  function endOfPrefix(code) {\n    self.containerState.size = initialSize + self.sliceSerialize(effects.exit(\"listItemPrefix\"), true).length;\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this;\n  self.containerState._closeFlow = undefined;\n  return effects.check(blankLine, onBlank, notBlank);\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.furtherBlankLines = self.containerState.furtherBlankLines || self.containerState.initialBlankLine;\n\n    // We have a blank line.\n    // Still, try to consume at most the items size.\n    return factorySpace(effects, ok, \"listItemIndent\", self.containerState.size + 1)(code);\n  }\n\n  /** @type {State} */\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined;\n      self.containerState.initialBlankLine = undefined;\n      return notInCurrentItem(code);\n    }\n    self.containerState.furtherBlankLines = undefined;\n    self.containerState.initialBlankLine = undefined;\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code);\n  }\n\n  /** @type {State} */\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true;\n    // As we’re closing flow, we’re no longer interrupting.\n    self.interrupt = undefined;\n    // Always populated by defaults.\n\n    return factorySpace(effects, effects.attempt(list, ok, nok), \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this;\n  return factorySpace(effects, afterPrefix, \"listItemIndent\", self.containerState.size + 1);\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"listItemIndent\" && tail[2].sliceSerialize(tail[1], true).length === self.containerState.size ? ok(code) : nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Exiter}\n */\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type);\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this;\n\n  // Always populated by defaults.\n\n  return factorySpace(effects, afterPrefix, \"listItemPrefixWhitespace\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4 + 1);\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return !markdownSpace(code) && tail && tail[1].type === \"listItemPrefixWhitespace\" ? ok(code) : nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   Exiter,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const blockQuote = {\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit,\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of block quote.\n   *\n   * ```markdown\n   * > | > a\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState;\n      if (!state.open) {\n        effects.enter(\"blockQuote\", {\n          _container: true\n        });\n        state.open = true;\n      }\n      effects.enter(\"blockQuotePrefix\");\n      effects.enter(\"blockQuoteMarker\");\n      effects.consume(code);\n      effects.exit(\"blockQuoteMarker\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `>`, before optional whitespace.\n   *\n   * ```markdown\n   * > | > a\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter(\"blockQuotePrefixWhitespace\");\n      effects.consume(code);\n      effects.exit(\"blockQuotePrefixWhitespace\");\n      effects.exit(\"blockQuotePrefix\");\n      return ok;\n    }\n    effects.exit(\"blockQuotePrefix\");\n    return ok(code);\n  }\n}\n\n/**\n * Start of block quote continuation.\n *\n * ```markdown\n *   | > a\n * > | > b\n *     ^\n * ```\n *\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  const self = this;\n  return contStart;\n\n  /**\n   * Start of block quote continuation.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contStart(code) {\n    if (markdownSpace(code)) {\n      // Always populated by defaults.\n\n      return factorySpace(effects, contBefore, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\n    }\n    return contBefore(code);\n  }\n\n  /**\n   * At `>`, after optional whitespace.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contBefore(code) {\n    return effects.attempt(blockQuote, ok, nok)(code);\n  }\n}\n\n/** @type {Exiter} */\nfunction exit(effects) {\n  effects.exit(\"blockQuote\");\n}","/**\n * @import {Effects, State, TokenType} from 'micromark-util-types'\n */\n\nimport { asciiControl, markdownLineEndingOrSpace, markdownLineEnding } from 'micromark-util-character';\n/**\n * Parse destinations.\n *\n * ###### Examples\n *\n * ```markdown\n * <a>\n * <a\\>b>\n * <a b>\n * <a)>\n * a\n * a\\)b\n * a(b)c\n * a(b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type for whole (`<a>` or `b`).\n * @param {TokenType} literalType\n *   Type when enclosed (`<a>`).\n * @param {TokenType} literalMarkerType\n *   Type for enclosing (`<` and `>`).\n * @param {TokenType} rawType\n *   Type when not enclosed (`b`).\n * @param {TokenType} stringType\n *   Type for the value (`a` or `b`).\n * @param {number | undefined} [max=Infinity]\n *   Depth of nested parens (inclusive).\n * @returns {State}\n *   Start state.\n */\nexport function factoryDestination(effects, ok, nok, type, literalType, literalMarkerType, rawType, stringType, max) {\n  const limit = max || Number.POSITIVE_INFINITY;\n  let balance = 0;\n  return start;\n\n  /**\n   * Start of destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *     ^\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 60) {\n      effects.enter(type);\n      effects.enter(literalType);\n      effects.enter(literalMarkerType);\n      effects.consume(code);\n      effects.exit(literalMarkerType);\n      return enclosedBefore;\n    }\n\n    // ASCII control, space, closing paren.\n    if (code === null || code === 32 || code === 41 || asciiControl(code)) {\n      return nok(code);\n    }\n    effects.enter(type);\n    effects.enter(rawType);\n    effects.enter(stringType);\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return raw(code);\n  }\n\n  /**\n   * After `<`, at an enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedBefore(code) {\n    if (code === 62) {\n      effects.enter(literalMarkerType);\n      effects.consume(code);\n      effects.exit(literalMarkerType);\n      effects.exit(literalType);\n      effects.exit(type);\n      return ok;\n    }\n    effects.enter(stringType);\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return enclosed(code);\n  }\n\n  /**\n   * In enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosed(code) {\n    if (code === 62) {\n      effects.exit(\"chunkString\");\n      effects.exit(stringType);\n      return enclosedBefore(code);\n    }\n    if (code === null || code === 60 || markdownLineEnding(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return code === 92 ? enclosedEscape : enclosed;\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | <a\\*a>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedEscape(code) {\n    if (code === 60 || code === 62 || code === 92) {\n      effects.consume(code);\n      return enclosed;\n    }\n    return enclosed(code);\n  }\n\n  /**\n   * In raw destination.\n   *\n   * ```markdown\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function raw(code) {\n    if (!balance && (code === null || code === 41 || markdownLineEndingOrSpace(code))) {\n      effects.exit(\"chunkString\");\n      effects.exit(stringType);\n      effects.exit(rawType);\n      effects.exit(type);\n      return ok(code);\n    }\n    if (balance < limit && code === 40) {\n      effects.consume(code);\n      balance++;\n      return raw;\n    }\n    if (code === 41) {\n      effects.consume(code);\n      balance--;\n      return raw;\n    }\n\n    // ASCII control (but *not* `\\0`) and space and `(`.\n    // Note: in `markdown-rs`, `\\0` exists in codes, in `micromark-js` it\n    // doesn’t.\n    if (code === null || code === 32 || code === 40 || asciiControl(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return code === 92 ? rawEscape : raw;\n  }\n\n  /**\n   * After `\\`, at special character.\n   *\n   * ```markdown\n   * > | a\\*a\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function rawEscape(code) {\n    if (code === 40 || code === 41 || code === 92) {\n      effects.consume(code);\n      return raw;\n    }\n    return raw(code);\n  }\n}","/**\n * @import {\n *   Effects,\n *   State,\n *   TokenizeContext,\n *   TokenType\n * } from 'micromark-util-types'\n */\n\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/**\n * Parse labels.\n *\n * > 👉 **Note**: labels in markdown are capped at 999 characters in the string.\n *\n * ###### Examples\n *\n * ```markdown\n * [a]\n * [a\n * b]\n * [a\\]b]\n * ```\n *\n * @this {TokenizeContext}\n *   Tokenize context.\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole label (`[a]`).\n * @param {TokenType} markerType\n *   Type for the markers (`[` and `]`).\n * @param {TokenType} stringType\n *   Type for the identifier (`a`).\n * @returns {State}\n *   Start state.\n */\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this;\n  let size = 0;\n  /** @type {boolean} */\n  let seen;\n  return start;\n\n  /**\n   * Start of label.\n   *\n   * ```markdown\n   * > | [a]\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(type);\n    effects.enter(markerType);\n    effects.consume(code);\n    effects.exit(markerType);\n    effects.enter(stringType);\n    return atBreak;\n  }\n\n  /**\n   * In label, at something, before something else.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (size > 999 || code === null || code === 91 || code === 93 && !seen ||\n    // To do: remove in the future once we’ve switched from\n    // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n    // which doesn’t need this.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    code === 94 && !size && '_hiddenFootnoteSupport' in self.parser.constructs) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.exit(stringType);\n      effects.enter(markerType);\n      effects.consume(code);\n      effects.exit(markerType);\n      effects.exit(type);\n      return ok;\n    }\n\n    // To do: indent? Link chunks and EOLs together?\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return atBreak;\n    }\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return labelInside(code);\n  }\n\n  /**\n   * In label, in text.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (code === null || code === 91 || code === 93 || markdownLineEnding(code) || size++ > 999) {\n      effects.exit(\"chunkString\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    if (!seen) seen = !markdownSpace(code);\n    return code === 92 ? labelEscape : labelInside;\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | [a\\*a]\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code);\n      size++;\n      return labelInside;\n    }\n    return labelInside(code);\n  }\n}","/**\n * @import {\n *   Code,\n *   Effects,\n *   State,\n *   TokenType\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/**\n * Parse titles.\n *\n * ###### Examples\n *\n * ```markdown\n * \"a\"\n * 'b'\n * (c)\n * \"a\n * b\"\n * 'a\n *     b'\n * (a\\)b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole title (`\"a\"`, `'b'`, `(c)`).\n * @param {TokenType} markerType\n *   Type for the markers (`\"`, `'`, `(`, and `)`).\n * @param {TokenType} stringType\n *   Type for the value (`a`).\n * @returns {State}\n *   Start state.\n */\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Start of title.\n   *\n   * ```markdown\n   * > | \"a\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      effects.enter(type);\n      effects.enter(markerType);\n      effects.consume(code);\n      effects.exit(markerType);\n      marker = code === 40 ? 41 : code;\n      return begin;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After opening marker.\n   *\n   * This is also used at the closing marker.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function begin(code) {\n    if (code === marker) {\n      effects.enter(markerType);\n      effects.consume(code);\n      effects.exit(markerType);\n      effects.exit(type);\n      return ok;\n    }\n    effects.enter(stringType);\n    return atBreak(code);\n  }\n\n  /**\n   * At something, before something else.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType);\n      return begin(marker);\n    }\n    if (code === null) {\n      return nok(code);\n    }\n\n    // Note: blank lines can’t exist in content.\n    if (markdownLineEnding(code)) {\n      // To do: use `space_or_tab_eol_with_options`, connect.\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return factorySpace(effects, atBreak, \"linePrefix\");\n    }\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return inside(code);\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit(\"chunkString\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return code === 92 ? escape : inside;\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | \"a\\*b\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function escape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code);\n      return inside;\n    }\n    return inside(code);\n  }\n}","/**\n * @import {Effects, State} from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   line endings or spaces in markdown are often optional, in which case this\n *     factory can be used and `ok` will be switched to whether spaces were found\n *     or not\n * *   one line ending or space can be detected with\n *     `markdownLineEndingOrSpace(code)` right before using `factoryWhitespace`\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @returns {State}\n *   Start state.\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      seen = true;\n      return start;\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, start, seen ? \"linePrefix\" : \"lineSuffix\")(code);\n    }\n    return ok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factoryDestination } from 'micromark-factory-destination';\nimport { factoryLabel } from 'micromark-factory-label';\nimport { factorySpace } from 'micromark-factory-space';\nimport { factoryTitle } from 'micromark-factory-title';\nimport { factoryWhitespace } from 'micromark-factory-whitespace';\nimport { markdownLineEndingOrSpace, markdownLineEnding, markdownSpace } from 'micromark-util-character';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n};\n\n/** @type {Construct} */\nconst titleBefore = {\n  partial: true,\n  tokenize: tokenizeTitleBefore\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this;\n  /** @type {string} */\n  let identifier;\n  return start;\n\n  /**\n   * At start of a definition.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Do not interrupt paragraphs (but do follow definitions).\n    // To do: do `interrupt` the way `markdown-rs` does.\n    // To do: parse whitespace the way `markdown-rs` does.\n    effects.enter(\"definition\");\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at `[`.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    // To do: parse whitespace the way `markdown-rs` does.\n\n    return factoryLabel.call(self, effects, labelAfter,\n    // Note: we don’t need to reset the way `markdown-rs` does.\n    nok, \"definitionLabel\", \"definitionLabelMarker\", \"definitionLabelString\")(code);\n  }\n\n  /**\n   * After label.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1));\n    if (code === 58) {\n      effects.enter(\"definitionMarker\");\n      effects.consume(code);\n      effects.exit(\"definitionMarker\");\n      return markerAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After marker.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function markerAfter(code) {\n    // Note: whitespace is optional.\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, destinationBefore)(code) : destinationBefore(code);\n  }\n\n  /**\n   * Before destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationBefore(code) {\n    return factoryDestination(effects, destinationAfter,\n    // Note: we don’t need to reset the way `markdown-rs` does.\n    nok, \"definitionDestination\", \"definitionDestinationLiteral\", \"definitionDestinationLiteralMarker\", \"definitionDestinationRaw\", \"definitionDestinationString\")(code);\n  }\n\n  /**\n   * After destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationAfter(code) {\n    return effects.attempt(titleBefore, after, after)(code);\n  }\n\n  /**\n   * After definition.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return markdownSpace(code) ? factorySpace(effects, afterWhitespace, \"whitespace\")(code) : afterWhitespace(code);\n  }\n\n  /**\n   * After definition, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterWhitespace(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"definition\");\n\n      // Note: we don’t care about uniqueness.\n      // It’s likely that that doesn’t happen very frequently.\n      // It is more likely that it wastes precious time.\n      self.parser.defined.push(identifier);\n\n      // To do: `markdown-rs` interrupt.\n      // // You’d be interrupting.\n      // tokenizer.interrupt = true\n      return ok(code);\n    }\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeTitleBefore(effects, ok, nok) {\n  return titleBefore;\n\n  /**\n   * After destination, at whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleBefore(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, beforeMarker)(code) : nok(code);\n  }\n\n  /**\n   * At title.\n   *\n   * ```markdown\n   *   | [a]: b\n   * > | \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeMarker(code) {\n    return factoryTitle(effects, titleAfter, nok, \"definitionTitle\", \"definitionTitleMarker\", \"definitionTitleString\")(code);\n  }\n\n  /**\n   * After title.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfter(code) {\n    return markdownSpace(code) ? factorySpace(effects, titleAfterOptionalWhitespace, \"whitespace\")(code) : titleAfterOptionalWhitespace(code);\n  }\n\n  /**\n   * After title, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfterOptionalWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n};\n\n/** @type {Construct} */\nconst furtherStart = {\n  partial: true,\n  tokenize: tokenizeFurtherStart\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of code (indented).\n   *\n   * > **Parsing note**: it is not needed to check if this first line is a\n   * > filled line (that it has a non-whitespace character), because blank lines\n   * > are parsed already, so we never run into that.\n   *\n   * ```markdown\n   * > |     aaa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: manually check if interrupting like `markdown-rs`.\n\n    effects.enter(\"codeIndented\");\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, \"linePrefix\", 4 + 1)(code);\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4 ? atBreak(code) : nok(code);\n  }\n\n  /**\n   * At a break.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === null) {\n      return after(code);\n    }\n    if (markdownLineEnding(code)) {\n      return effects.attempt(furtherStart, atBreak, after)(code);\n    }\n    effects.enter(\"codeFlowValue\");\n    return inside(code);\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFlowValue\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return inside;\n  }\n\n  /** @type {State} */\n  function after(code) {\n    effects.exit(\"codeIndented\");\n    // To do: allow interrupting like `markdown-rs`.\n    // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeFurtherStart(effects, ok, nok) {\n  const self = this;\n  return furtherStart;\n\n  /**\n   * At eol, trying to parse another indent.\n   *\n   * ```markdown\n   * > |     aaa\n   *            ^\n   *   |     bbb\n   * ```\n   *\n   * @type {State}\n   */\n  function furtherStart(code) {\n    // To do: improve `lazy` / `pierce` handling.\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return furtherStart;\n    }\n\n    // To do: the code here in `micromark-js` is a bit different from\n    // `markdown-rs` because there it can attempt spaces.\n    // We can’t yet.\n    //\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, \"linePrefix\", 4 + 1)(code);\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4 ? ok(code) : markdownLineEnding(code) ? furtherStart(code) : nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEndingOrSpace, markdownLineEnding, markdownSpace } from 'micromark-util-character';\nimport { splice } from 'micromark-util-chunked';\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  resolve: resolveHeadingAtx,\n  tokenize: tokenizeHeadingAtx\n};\n\n/** @type {Resolver} */\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2;\n  let contentStart = 3;\n  /** @type {Token} */\n  let content;\n  /** @type {Token} */\n  let text;\n\n  // Prefix whitespace, part of the opening.\n  if (events[contentStart][1].type === \"whitespace\") {\n    contentStart += 2;\n  }\n\n  // Suffix whitespace, part of the closing.\n  if (contentEnd - 2 > contentStart && events[contentEnd][1].type === \"whitespace\") {\n    contentEnd -= 2;\n  }\n  if (events[contentEnd][1].type === \"atxHeadingSequence\" && (contentStart === contentEnd - 1 || contentEnd - 4 > contentStart && events[contentEnd - 2][1].type === \"whitespace\")) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4;\n  }\n  if (contentEnd > contentStart) {\n    content = {\n      type: \"atxHeadingText\",\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    };\n    text = {\n      type: \"chunkText\",\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      contentType: \"text\"\n    };\n    splice(events, contentStart, contentEnd - contentStart + 1, [['enter', content, context], ['enter', text, context], ['exit', text, context], ['exit', content, context]]);\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  let size = 0;\n  return start;\n\n  /**\n   * Start of a heading (atx).\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    effects.enter(\"atxHeading\");\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at `#`.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"atxHeadingSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code);\n      return sequenceOpen;\n    }\n\n    // Always at least one `#`.\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"atxHeadingSequence\");\n      return atBreak(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ## aa\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === 35) {\n      effects.enter(\"atxHeadingSequence\");\n      return sequenceFurther(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"atxHeading\");\n      // To do: interrupt like `markdown-rs`.\n      // // Feel free to interrupt.\n      // tokenizer.interrupt = false\n      return ok(code);\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, \"whitespace\")(code);\n    }\n\n    // To do: generate `data` tokens, add the `text` token later.\n    // Needs edit map, see: `markdown.rs`.\n    effects.enter(\"atxHeadingText\");\n    return data(code);\n  }\n\n  /**\n   * In further sequence (after whitespace).\n   *\n   * Could be normal “visible” hashes in the heading or a final sequence.\n   *\n   * ```markdown\n   * > | ## aa ##\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceFurther(code) {\n    if (code === 35) {\n      effects.consume(code);\n      return sequenceFurther;\n    }\n    effects.exit(\"atxHeadingSequence\");\n    return atBreak(code);\n  }\n\n  /**\n   * In text.\n   *\n   * ```markdown\n   * > | ## aa\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"atxHeadingText\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return data;\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  resolveTo: resolveToSetextUnderline,\n  tokenize: tokenizeSetextUnderline\n};\n\n/** @type {Resolver} */\nfunction resolveToSetextUnderline(events, context) {\n  // To do: resolve like `markdown-rs`.\n  let index = events.length;\n  /** @type {number | undefined} */\n  let content;\n  /** @type {number | undefined} */\n  let text;\n  /** @type {number | undefined} */\n  let definition;\n\n  // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === \"content\") {\n        content = index;\n        break;\n      }\n      if (events[index][1].type === \"paragraph\") {\n        text = index;\n      }\n    }\n    // Exit\n    else {\n      if (events[index][1].type === \"content\") {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1);\n      }\n      if (!definition && events[index][1].type === \"definition\") {\n        definition = index;\n      }\n    }\n  }\n  const heading = {\n    type: \"setextHeading\",\n    start: {\n      ...events[content][1].start\n    },\n    end: {\n      ...events[events.length - 1][1].end\n    }\n  };\n\n  // Change the paragraph to setext heading text.\n  events[text][1].type = \"setextHeadingText\";\n\n  // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context]);\n    events.splice(definition + 1, 0, ['exit', events[content][1], context]);\n    events[content][1].end = {\n      ...events[definition][1].end\n    };\n  } else {\n    events[content][1] = heading;\n  }\n\n  // Add the heading exit at the end.\n  events.push(['exit', heading, context]);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * At start of heading (setext) underline.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length;\n    /** @type {boolean | undefined} */\n    let paragraph;\n    // Find an opening.\n    while (index--) {\n      // Skip enter/exit of line ending, line prefix, and content.\n      // We can now either have a definition or a paragraph.\n      if (self.events[index][1].type !== \"lineEnding\" && self.events[index][1].type !== \"linePrefix\" && self.events[index][1].type !== \"content\") {\n        paragraph = self.events[index][1].type === \"paragraph\";\n        break;\n      }\n    }\n\n    // To do: handle lazy/pierce like `markdown-rs`.\n    // To do: parse indent like `markdown-rs`.\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter(\"setextHeadingLine\");\n      marker = code;\n      return before(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * After optional whitespace, at `-` or `=`.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"setextHeadingLineSequence\");\n    return inside(code);\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code);\n      return inside;\n    }\n    effects.exit(\"setextHeadingLineSequence\");\n    return markdownSpace(code) ? factorySpace(effects, after, \"lineSuffix\")(code) : after(code);\n  }\n\n  /**\n   * After sequence, after optional whitespace.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"setextHeadingLine\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n}","/**\n * List of lowercase HTML “block” tag names.\n *\n * The list, when parsing HTML (flow), results in more relaxed rules (condition\n * 6).\n * Because they are known blocks, the HTML-like syntax doesn’t have to be\n * strictly parsed.\n * For tag names not in this list, a more strict algorithm (condition 7) is used\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\n *\n * This is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `search` was added in `CommonMark@0.31`.\n */\nexport const htmlBlockNames = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'search',\n  'section',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n]\n\n/**\n * List of lowercase HTML “raw” tag names.\n *\n * The list, when parsing HTML (flow), results in HTML that can include lines\n * without exiting, until a closing tag also in this list is found (condition\n * 1).\n *\n * This module is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `textarea` was added in `CommonMark@0.30`.\n */\nexport const htmlRawNames = ['pre', 'script', 'style', 'textarea']\n","/**\n * @import {\n *   Code,\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { asciiAlphanumeric, asciiAlpha, markdownLineEndingOrSpace, markdownLineEnding, markdownSpace } from 'micromark-util-character';\nimport { htmlBlockNames, htmlRawNames } from 'micromark-util-html-tag-name';\nimport { blankLine } from './blank-line.js';\n\n/** @type {Construct} */\nexport const htmlFlow = {\n  concrete: true,\n  name: 'htmlFlow',\n  resolveTo: resolveToHtmlFlow,\n  tokenize: tokenizeHtmlFlow\n};\n\n/** @type {Construct} */\nconst blankLineBefore = {\n  partial: true,\n  tokenize: tokenizeBlankLineBefore\n};\nconst nonLazyContinuationStart = {\n  partial: true,\n  tokenize: tokenizeNonLazyContinuationStart\n};\n\n/** @type {Resolver} */\nfunction resolveToHtmlFlow(events) {\n  let index = events.length;\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === \"htmlFlow\") {\n      break;\n    }\n  }\n  if (index > 1 && events[index - 2][1].type === \"linePrefix\") {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start;\n    // Add the prefix start to the HTML line token.\n    events[index + 1][1].start = events[index - 2][1].start;\n    // Remove the line prefix.\n    events.splice(index - 2, 2);\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this;\n  /** @type {number} */\n  let marker;\n  /** @type {boolean} */\n  let closingTag;\n  /** @type {string} */\n  let buffer;\n  /** @type {number} */\n  let index;\n  /** @type {Code} */\n  let markerB;\n  return start;\n\n  /**\n   * Start of HTML (flow).\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    return before(code);\n  }\n\n  /**\n   * At `<`, after optional whitespace.\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"htmlFlow\");\n    effects.enter(\"htmlFlowData\");\n    effects.consume(code);\n    return open;\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | <x />\n   *      ^\n   * > | <!doctype>\n   *      ^\n   * > | <!--xxx-->\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code);\n      return declarationOpen;\n    }\n    if (code === 47) {\n      effects.consume(code);\n      closingTag = true;\n      return tagCloseStart;\n    }\n    if (code === 63) {\n      effects.consume(code);\n      marker = 3;\n      // To do:\n      // tokenizer.concrete = true\n      // To do: use `markdown-rs` style interrupt.\n      // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      // Always the case.\n      effects.consume(code);\n      buffer = String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *       ^\n   * > | <!--xxx-->\n   *       ^\n   * > | <![CDATA[>&<]]>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code);\n      marker = 2;\n      return commentOpenInside;\n    }\n    if (code === 91) {\n      effects.consume(code);\n      marker = 5;\n      index = 0;\n      return cdataOpenInside;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      marker = 4;\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!-`, inside a comment, at another `-`.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<![`, inside CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *        ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = \"CDATA[\";\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code);\n      if (index === value.length) {\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok : continuation;\n      }\n      return cdataOpenInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | </x>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      // Always the case.\n      effects.consume(code);\n      buffer = String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In tag name.\n   *\n   * ```markdown\n   * > | <ab>\n   *      ^^\n   * > | </ab>\n   *       ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagName(code) {\n    if (code === null || code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      const slash = code === 47;\n      const name = buffer.toLowerCase();\n      if (!slash && !closingTag && htmlRawNames.includes(name)) {\n        marker = 1;\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code);\n      }\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        marker = 6;\n        if (slash) {\n          effects.consume(code);\n          return basicSelfClosing;\n        }\n\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code);\n      }\n      marker = 7;\n      // Do not support complete HTML when interrupting.\n      return self.interrupt && !self.parser.lazy[self.now().line] ? nok(code) : closingTag ? completeClosingTagAfter(code) : completeAttributeNameBefore(code);\n    }\n\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      buffer += String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After closing slash of a basic tag name.\n   *\n   * ```markdown\n   * > | <div/>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code);\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuation;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After closing slash of a complete tag name.\n   *\n   * ```markdown\n   * > | <x/>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeClosingTagAfter;\n    }\n    return completeEnd(code);\n  }\n\n  /**\n   * At an attribute name.\n   *\n   * At first, this state is used after a complete tag name, after whitespace,\n   * where it expects optional attributes or the end of the tag.\n   * It is also reused after attributes, when expecting more optional\n   * attributes.\n   *\n   * ```markdown\n   * > | <a />\n   *        ^\n   * > | <a :b>\n   *        ^\n   * > | <a _b>\n   *        ^\n   * > | <a b>\n   *        ^\n   * > | <a >\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code);\n      return completeEnd;\n    }\n\n    // ASCII alphanumerical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code);\n      return completeAttributeName;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeNameBefore;\n    }\n    return completeEnd(code);\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | <a :b>\n   *         ^\n   * > | <a _b>\n   *         ^\n   * > | <a b>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeName(code) {\n    // ASCII alphanumerical and `-`, `.`, `:`, and `_`.\n    if (code === 45 || code === 46 || code === 58 || code === 95 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return completeAttributeName;\n    }\n    return completeAttributeNameAfter(code);\n  }\n\n  /**\n   * After attribute name, at an optional initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b>\n   *         ^\n   * > | <a b=c>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code);\n      return completeAttributeValueBefore;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeNameAfter;\n    }\n    return completeAttributeNameBefore(code);\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * > | <a b=\"c\">\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueBefore(code) {\n    if (code === null || code === 60 || code === 61 || code === 62 || code === 96) {\n      return nok(code);\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code);\n      markerB = code;\n      return completeAttributeValueQuoted;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeValueBefore;\n    }\n    return completeAttributeValueUnquoted(code);\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *           ^\n   * > | <a b='c'>\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuoted(code) {\n    if (code === markerB) {\n      effects.consume(code);\n      markerB = null;\n      return completeAttributeValueQuotedAfter;\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return completeAttributeValueQuoted;\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueUnquoted(code) {\n    if (code === null || code === 34 || code === 39 || code === 47 || code === 60 || code === 61 || code === 62 || code === 96 || markdownLineEndingOrSpace(code)) {\n      return completeAttributeNameAfter(code);\n    }\n    effects.consume(code);\n    return completeAttributeValueUnquoted;\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the\n   * end of the tag.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In certain circumstances of a complete tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code);\n      return completeAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `>` in a complete tag.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return continuation(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In continuation of any HTML kind.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuation(code) {\n    if (code === 45 && marker === 2) {\n      effects.consume(code);\n      return continuationCommentInside;\n    }\n    if (code === 60 && marker === 1) {\n      effects.consume(code);\n      return continuationRawTagOpen;\n    }\n    if (code === 62 && marker === 4) {\n      effects.consume(code);\n      return continuationClose;\n    }\n    if (code === 63 && marker === 3) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    if (code === 93 && marker === 5) {\n      effects.consume(code);\n      return continuationCdataInside;\n    }\n    if (markdownLineEnding(code) && (marker === 6 || marker === 7)) {\n      effects.exit(\"htmlFlowData\");\n      return effects.check(blankLineBefore, continuationAfter, continuationStart)(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"htmlFlowData\");\n      return continuationStart(code);\n    }\n    effects.consume(code);\n    return continuation;\n  }\n\n  /**\n   * In continuation, at eol.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStart(code) {\n    return effects.check(nonLazyContinuationStart, continuationStartNonLazy, continuationAfter)(code);\n  }\n\n  /**\n   * In continuation, at eol, before non-lazy content.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStartNonLazy(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return continuationBefore;\n  }\n\n  /**\n   * In continuation, before non-lazy content.\n   *\n   * ```markdown\n   *   | <x>\n   * > | asd\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return continuationStart(code);\n    }\n    effects.enter(\"htmlFlowData\");\n    return continuation(code);\n  }\n\n  /**\n   * In comment continuation, after one `-`, expecting another.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In raw continuation, after `<`, at `/`.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code);\n      buffer = '';\n      return continuationRawEndTag;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In raw continuation, after `</`, in a raw tag name.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                             ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawEndTag(code) {\n    if (code === 62) {\n      const name = buffer.toLowerCase();\n      if (htmlRawNames.includes(name)) {\n        effects.consume(code);\n        return continuationClose;\n      }\n      return continuation(code);\n    }\n    if (asciiAlpha(code) && buffer.length < 8) {\n      // Always the case.\n      effects.consume(code);\n      buffer += String.fromCharCode(code);\n      return continuationRawEndTag;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In cdata continuation, after `]`, expecting `]>`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *                  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCdataInside(code) {\n    if (code === 93) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In declaration or instruction continuation, at `>`.\n   *\n   * ```markdown\n   * > | <!-->\n   *         ^\n   * > | <?>\n   *       ^\n   * > | <!q>\n   *        ^\n   * > | <!--ab-->\n   *             ^\n   * > | <![CDATA[>&<]]>\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code);\n      return continuationClose;\n    }\n\n    // More dashes.\n    if (code === 45 && marker === 2) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In closed continuation: everything we get until the eol/eof is part of it.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"htmlFlowData\");\n      return continuationAfter(code);\n    }\n    effects.consume(code);\n    return continuationClose;\n  }\n\n  /**\n   * Done.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationAfter(code) {\n    effects.exit(\"htmlFlow\");\n    // // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    // // No longer concrete.\n    // tokenizer.concrete = false\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuationStart(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * At eol, before continuation.\n   *\n   * ```markdown\n   * > | * ```js\n   *            ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * A continuation.\n   *\n   * ```markdown\n   *   | * ```js\n   * > | b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLineBefore(effects, ok, nok) {\n  return start;\n\n  /**\n   * Before eol, expecting blank line.\n   *\n   * ```markdown\n   * > | <div>\n   *          ^\n   *   |\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return effects.attempt(blankLine, ok, nok);\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nconst nonLazyContinuation = {\n  partial: true,\n  tokenize: tokenizeNonLazyContinuation\n};\n\n/** @type {Construct} */\nexport const codeFenced = {\n  concrete: true,\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this;\n  /** @type {Construct} */\n  const closeStart = {\n    partial: true,\n    tokenize: tokenizeCloseStart\n  };\n  let initialPrefix = 0;\n  let sizeOpen = 0;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Start of code.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse whitespace like `markdown-rs`.\n    return beforeSequenceOpen(code);\n  }\n\n  /**\n   * In opening fence, after prefix, at sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeSequenceOpen(code) {\n    const tail = self.events[self.events.length - 1];\n    initialPrefix = tail && tail[1].type === \"linePrefix\" ? tail[2].sliceSerialize(tail[1], true).length : 0;\n    marker = code;\n    effects.enter(\"codeFenced\");\n    effects.enter(\"codeFencedFence\");\n    effects.enter(\"codeFencedFenceSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening fence sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *      ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === marker) {\n      sizeOpen++;\n      effects.consume(code);\n      return sequenceOpen;\n    }\n    if (sizeOpen < 3) {\n      return nok(code);\n    }\n    effects.exit(\"codeFencedFenceSequence\");\n    return markdownSpace(code) ? factorySpace(effects, infoBefore, \"whitespace\")(code) : infoBefore(code);\n  }\n\n  /**\n   * In opening fence, after the sequence (and optional whitespace), before info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function infoBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFencedFence\");\n      return self.interrupt ? ok(code) : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code);\n    }\n    effects.enter(\"codeFencedFenceInfo\");\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return info(code);\n  }\n\n  /**\n   * In info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function info(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceInfo\");\n      return infoBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceInfo\");\n      return factorySpace(effects, metaBefore, \"whitespace\")(code);\n    }\n    if (code === 96 && code === marker) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return info;\n  }\n\n  /**\n   * In opening fence, after info and whitespace, before meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function metaBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return infoBefore(code);\n    }\n    effects.enter(\"codeFencedFenceMeta\");\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return meta(code);\n  }\n\n  /**\n   * In meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceMeta\");\n      return infoBefore(code);\n    }\n    if (code === 96 && code === marker) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return meta;\n  }\n\n  /**\n   * At eol/eof in code, before a non-lazy closing fence or content.\n   *\n   * ```markdown\n   * > | ~~~js\n   *          ^\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function atNonLazyBreak(code) {\n    return effects.attempt(closeStart, after, contentBefore)(code);\n  }\n\n  /**\n   * Before code content, not a closing fence, at eol.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentBefore(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return contentStart;\n  }\n\n  /**\n   * Before code content, not a closing fence.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentStart(code) {\n    return initialPrefix > 0 && markdownSpace(code) ? factorySpace(effects, beforeContentChunk, \"linePrefix\", initialPrefix + 1)(code) : beforeContentChunk(code);\n  }\n\n  /**\n   * Before code content, after optional prefix.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeContentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code);\n    }\n    effects.enter(\"codeFlowValue\");\n    return contentChunk(code);\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^^^^^^^^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFlowValue\");\n      return beforeContentChunk(code);\n    }\n    effects.consume(code);\n    return contentChunk;\n  }\n\n  /**\n   * After code.\n   *\n   * ```markdown\n   *   | ~~~js\n   *   | alert(1)\n   * > | ~~~\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    effects.exit(\"codeFenced\");\n    return ok(code);\n  }\n\n  /**\n   * @this {TokenizeContext}\n   *   Context.\n   * @type {Tokenizer}\n   */\n  function tokenizeCloseStart(effects, ok, nok) {\n    let size = 0;\n    return startBefore;\n\n    /**\n     *\n     *\n     * @type {State}\n     */\n    function startBefore(code) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return start;\n    }\n\n    /**\n     * Before closing fence, at optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      // Always populated by defaults.\n\n      // To do: `enter` here or in next state?\n      effects.enter(\"codeFencedFence\");\n      return markdownSpace(code) ? factorySpace(effects, beforeSequenceClose, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code) : beforeSequenceClose(code);\n    }\n\n    /**\n     * In closing fence, after optional whitespace, at sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function beforeSequenceClose(code) {\n      if (code === marker) {\n        effects.enter(\"codeFencedFenceSequence\");\n        return sequenceClose(code);\n      }\n      return nok(code);\n    }\n\n    /**\n     * In closing fence sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceClose(code) {\n      if (code === marker) {\n        size++;\n        effects.consume(code);\n        return sequenceClose;\n      }\n      if (size >= sizeOpen) {\n        effects.exit(\"codeFencedFenceSequence\");\n        return markdownSpace(code) ? factorySpace(effects, sequenceCloseAfter, \"whitespace\")(code) : sequenceCloseAfter(code);\n      }\n      return nok(code);\n    }\n\n    /**\n     * After closing fence sequence, after optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceCloseAfter(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit(\"codeFencedFence\");\n        return ok(code);\n      }\n      return nok(code);\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuation(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return lineStart;\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function lineStart(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code);\n  }\n}","/// <reference lib=\"dom\" />\n\n/* eslint-env browser */\n\nconst element = document.createElement('i')\n\n/**\n * @param {string} value\n * @returns {string | false}\n */\nexport function decodeNamedCharacterReference(value) {\n  const characterReference = '&' + value + ';'\n  element.innerHTML = characterReference\n  const character = element.textContent\n\n  // Some named character references do not require the closing semicolon\n  // (`&not`, for instance), which leads to situations where parsing the assumed\n  // named reference of `&notit;` will result in the string `¬it;`.\n  // When we encounter a trailing semicolon after parsing, and the character\n  // reference to decode was not a semicolon (`&semi;`), we can assume that the\n  // matching was not complete.\n  if (\n    // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n    // yield `null`.\n    character.charCodeAt(character.length - 1) === 59 /* `;` */ &&\n    value !== 'semi'\n  ) {\n    return false\n  }\n\n  // If the decoded string is equal to the input, the character reference was\n  // not valid.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  return character === characterReference ? false : character\n}\n","/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { asciiAlphanumeric, asciiDigit, asciiHexDigit } from 'micromark-util-character';\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this;\n  let size = 0;\n  /** @type {number} */\n  let max;\n  /** @type {(code: Code) => boolean} */\n  let test;\n  return start;\n\n  /**\n   * Start of character reference.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *      ^\n   * > | a&#123;b\n   *      ^\n   * > | a&#x9;b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"characterReference\");\n    effects.enter(\"characterReferenceMarker\");\n    effects.consume(code);\n    effects.exit(\"characterReferenceMarker\");\n    return open;\n  }\n\n  /**\n   * After `&`, at `#` for numeric references or alphanumeric for named\n   * references.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^\n   * > | a&#123;b\n   *       ^\n   * > | a&#x9;b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 35) {\n      effects.enter(\"characterReferenceMarkerNumeric\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarkerNumeric\");\n      return numeric;\n    }\n    effects.enter(\"characterReferenceValue\");\n    max = 31;\n    test = asciiAlphanumeric;\n    return value(code);\n  }\n\n  /**\n   * After `#`, at `x` for hexadecimals or digit for decimals.\n   *\n   * ```markdown\n   * > | a&#123;b\n   *        ^\n   * > | a&#x9;b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter(\"characterReferenceMarkerHexadecimal\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarkerHexadecimal\");\n      effects.enter(\"characterReferenceValue\");\n      max = 6;\n      test = asciiHexDigit;\n      return value;\n    }\n    effects.enter(\"characterReferenceValue\");\n    max = 7;\n    test = asciiDigit;\n    return value(code);\n  }\n\n  /**\n   * After markers (`&#x`, `&#`, or `&`), in value, before `;`.\n   *\n   * The character reference kind defines what and how many characters are\n   * allowed.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^^^\n   * > | a&#123;b\n   *        ^^^\n   * > | a&#x9;b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function value(code) {\n    if (code === 59 && size) {\n      const token = effects.exit(\"characterReferenceValue\");\n      if (test === asciiAlphanumeric && !decodeNamedCharacterReference(self.sliceSerialize(token))) {\n        return nok(code);\n      }\n\n      // To do: `markdown-rs` uses a different name:\n      // `CharacterReferenceMarkerSemi`.\n      effects.enter(\"characterReferenceMarker\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarker\");\n      effects.exit(\"characterReference\");\n      return ok;\n    }\n    if (test(code) && size++ < max) {\n      effects.consume(code);\n      return value;\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { asciiPunctuation } from 'micromark-util-character';\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of character escape.\n   *\n   * ```markdown\n   * > | a\\*b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"characterEscape\");\n    effects.enter(\"escapeMarker\");\n    effects.consume(code);\n    effects.exit(\"escapeMarker\");\n    return inside;\n  }\n\n  /**\n   * After `\\`, at punctuation.\n   *\n   * ```markdown\n   * > | a\\*b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // ASCII punctuation.\n    if (asciiPunctuation(code)) {\n      effects.enter(\"characterEscapeValue\");\n      effects.consume(code);\n      effects.exit(\"characterEscapeValue\");\n      effects.exit(\"characterEscape\");\n      return ok;\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeLineEnding(effects, ok) {\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return factorySpace(effects, ok, \"linePrefix\");\n  }\n}","/**\n * @import {\n *   Construct,\n *   Event,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { factoryDestination } from 'micromark-factory-destination';\nimport { factoryLabel } from 'micromark-factory-label';\nimport { factoryTitle } from 'micromark-factory-title';\nimport { factoryWhitespace } from 'micromark-factory-whitespace';\nimport { markdownLineEndingOrSpace } from 'micromark-util-character';\nimport { push, splice } from 'micromark-util-chunked';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  resolveAll: resolveAllLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  tokenize: tokenizeLabelEnd\n};\n\n/** @type {Construct} */\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n};\n/** @type {Construct} */\nconst referenceFullConstruct = {\n  tokenize: tokenizeReferenceFull\n};\n/** @type {Construct} */\nconst referenceCollapsedConstruct = {\n  tokenize: tokenizeReferenceCollapsed\n};\n\n/** @type {Resolver} */\nfunction resolveAllLabelEnd(events) {\n  let index = -1;\n  /** @type {Array<Event>} */\n  const newEvents = [];\n  while (++index < events.length) {\n    const token = events[index][1];\n    newEvents.push(events[index]);\n    if (token.type === \"labelImage\" || token.type === \"labelLink\" || token.type === \"labelEnd\") {\n      // Remove the marker.\n      const offset = token.type === \"labelImage\" ? 4 : 2;\n      token.type = \"data\";\n      index += offset;\n    }\n  }\n\n  // If the events are equal, we don't have to copy newEvents to events\n  if (events.length !== newEvents.length) {\n    splice(events, 0, events.length, newEvents);\n  }\n  return events;\n}\n\n/** @type {Resolver} */\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length;\n  let offset = 0;\n  /** @type {Token} */\n  let token;\n  /** @type {number | undefined} */\n  let open;\n  /** @type {number | undefined} */\n  let close;\n  /** @type {Array<Event>} */\n  let media;\n\n  // Find an opening.\n  while (index--) {\n    token = events[index][1];\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (token.type === \"link\" || token.type === \"labelLink\" && token._inactive) {\n        break;\n      }\n\n      // Mark other link openings as inactive, as we can’t have links in\n      // links.\n      if (events[index][0] === 'enter' && token.type === \"labelLink\") {\n        token._inactive = true;\n      }\n    } else if (close) {\n      if (events[index][0] === 'enter' && (token.type === \"labelImage\" || token.type === \"labelLink\") && !token._balanced) {\n        open = index;\n        if (token.type !== \"labelLink\") {\n          offset = 2;\n          break;\n        }\n      }\n    } else if (token.type === \"labelEnd\") {\n      close = index;\n    }\n  }\n  const group = {\n    type: events[open][1].type === \"labelLink\" ? \"link\" : \"image\",\n    start: {\n      ...events[open][1].start\n    },\n    end: {\n      ...events[events.length - 1][1].end\n    }\n  };\n  const label = {\n    type: \"label\",\n    start: {\n      ...events[open][1].start\n    },\n    end: {\n      ...events[close][1].end\n    }\n  };\n  const text = {\n    type: \"labelText\",\n    start: {\n      ...events[open + offset + 2][1].end\n    },\n    end: {\n      ...events[close - 2][1].start\n    }\n  };\n  media = [['enter', group, context], ['enter', label, context]];\n\n  // Opening marker.\n  media = push(media, events.slice(open + 1, open + offset + 3));\n\n  // Text open.\n  media = push(media, [['enter', text, context]]);\n\n  // Always populated by defaults.\n\n  // Between.\n  media = push(media, resolveAll(context.parser.constructs.insideSpan.null, events.slice(open + offset + 4, close - 3), context));\n\n  // Text close, marker close, label close.\n  media = push(media, [['exit', text, context], events[close - 2], events[close - 1], ['exit', label, context]]);\n\n  // Reference, resource, or so.\n  media = push(media, events.slice(close + 1));\n\n  // Media close.\n  media = push(media, [['exit', group, context]]);\n  splice(events, open, events.length, media);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this;\n  let index = self.events.length;\n  /** @type {Token} */\n  let labelStart;\n  /** @type {boolean} */\n  let defined;\n\n  // Find an opening.\n  while (index--) {\n    if ((self.events[index][1].type === \"labelImage\" || self.events[index][1].type === \"labelLink\") && !self.events[index][1]._balanced) {\n      labelStart = self.events[index][1];\n      break;\n    }\n  }\n  return start;\n\n  /**\n   * Start of label end.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // If there is not an okay opening.\n    if (!labelStart) {\n      return nok(code);\n    }\n\n    // If the corresponding label (link) start is marked as inactive,\n    // it means we’d be wrapping a link, like this:\n    //\n    // ```markdown\n    // > | a [b [c](d) e](f) g.\n    //                  ^\n    // ```\n    //\n    // We can’t have that, so it’s just balanced brackets.\n    if (labelStart._inactive) {\n      return labelEndNok(code);\n    }\n    defined = self.parser.defined.includes(normalizeIdentifier(self.sliceSerialize({\n      start: labelStart.end,\n      end: self.now()\n    })));\n    effects.enter(\"labelEnd\");\n    effects.enter(\"labelMarker\");\n    effects.consume(code);\n    effects.exit(\"labelMarker\");\n    effects.exit(\"labelEnd\");\n    return after;\n  }\n\n  /**\n   * After `]`.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Note: `markdown-rs` also parses GFM footnotes here, which for us is in\n    // an extension.\n\n    // Resource (`[asd](fgh)`)?\n    if (code === 40) {\n      return effects.attempt(resourceConstruct, labelEndOk, defined ? labelEndOk : labelEndNok)(code);\n    }\n\n    // Full (`[asd][fgh]`) or collapsed (`[asd][]`) reference?\n    if (code === 91) {\n      return effects.attempt(referenceFullConstruct, labelEndOk, defined ? referenceNotFull : labelEndNok)(code);\n    }\n\n    // Shortcut (`[asd]`) reference?\n    return defined ? labelEndOk(code) : labelEndNok(code);\n  }\n\n  /**\n   * After `]`, at `[`, but not at a full reference.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] b\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceNotFull(code) {\n    return effects.attempt(referenceCollapsedConstruct, labelEndOk, labelEndNok)(code);\n  }\n\n  /**\n   * Done, we found something.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *           ^\n   * > | [a][b] c\n   *           ^\n   * > | [a][] b\n   *          ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndOk(code) {\n    // Note: `markdown-rs` does a bunch of stuff here.\n    return ok(code);\n  }\n\n  /**\n   * Done, it’s nothing.\n   *\n   * There was an okay opening, but we didn’t match anything.\n   *\n   * ```markdown\n   * > | [a](b c\n   *        ^\n   * > | [a][b c\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndNok(code) {\n    labelStart._balanced = true;\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeResource(effects, ok, nok) {\n  return resourceStart;\n\n  /**\n   * At a resource.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceStart(code) {\n    effects.enter(\"resource\");\n    effects.enter(\"resourceMarker\");\n    effects.consume(code);\n    effects.exit(\"resourceMarker\");\n    return resourceBefore;\n  }\n\n  /**\n   * In resource, after `(`, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBefore(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceOpen)(code) : resourceOpen(code);\n  }\n\n  /**\n   * In resource, after optional whitespace, at `)` or a destination.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceOpen(code) {\n    if (code === 41) {\n      return resourceEnd(code);\n    }\n    return factoryDestination(effects, resourceDestinationAfter, resourceDestinationMissing, \"resourceDestination\", \"resourceDestinationLiteral\", \"resourceDestinationLiteralMarker\", \"resourceDestinationRaw\", \"resourceDestinationString\", 32)(code);\n  }\n\n  /**\n   * In resource, after destination, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationAfter(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceBetween)(code) : resourceEnd(code);\n  }\n\n  /**\n   * At invalid destination.\n   *\n   * ```markdown\n   * > | [a](<<) b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationMissing(code) {\n    return nok(code);\n  }\n\n  /**\n   * In resource, after destination and whitespace, at `(` or title.\n   *\n   * ```markdown\n   * > | [a](b ) c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBetween(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(effects, resourceTitleAfter, nok, \"resourceTitle\", \"resourceTitleMarker\", \"resourceTitleString\")(code);\n    }\n    return resourceEnd(code);\n  }\n\n  /**\n   * In resource, after title, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b \"c\") d\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceTitleAfter(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceEnd)(code) : resourceEnd(code);\n  }\n\n  /**\n   * In resource, at `)`.\n   *\n   * ```markdown\n   * > | [a](b) d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceEnd(code) {\n    if (code === 41) {\n      effects.enter(\"resourceMarker\");\n      effects.consume(code);\n      effects.exit(\"resourceMarker\");\n      effects.exit(\"resource\");\n      return ok;\n    }\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceFull(effects, ok, nok) {\n  const self = this;\n  return referenceFull;\n\n  /**\n   * In a reference (full), at the `[`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFull(code) {\n    return factoryLabel.call(self, effects, referenceFullAfter, referenceFullMissing, \"reference\", \"referenceMarker\", \"referenceString\")(code);\n  }\n\n  /**\n   * In a reference (full), after `]`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullAfter(code) {\n    return self.parser.defined.includes(normalizeIdentifier(self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1))) ? ok(code) : nok(code);\n  }\n\n  /**\n   * In reference (full) that was missing.\n   *\n   * ```markdown\n   * > | [a][b d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullMissing(code) {\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceCollapsed(effects, ok, nok) {\n  return referenceCollapsedStart;\n\n  /**\n   * In reference (collapsed), at `[`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceCollapsedStart(code) {\n    // We only attempt a collapsed label if there’s a `[`.\n\n    effects.enter(\"reference\");\n    effects.enter(\"referenceMarker\");\n    effects.consume(code);\n    effects.exit(\"referenceMarker\");\n    return referenceCollapsedOpen;\n  }\n\n  /**\n   * In reference (collapsed), at `]`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *         ^\n   * ```\n   *\n   *  @type {State}\n   */\n  function referenceCollapsedOpen(code) {\n    if (code === 93) {\n      effects.enter(\"referenceMarker\");\n      effects.consume(code);\n      effects.exit(\"referenceMarker\");\n      effects.exit(\"reference\");\n      return ok;\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { labelEnd } from './label-end.js';\n\n/** @type {Construct} */\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  resolveAll: labelEnd.resolveAll,\n  tokenize: tokenizeLabelStartImage\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of label (image) start.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"labelImage\");\n    effects.enter(\"labelImageMarker\");\n    effects.consume(code);\n    effects.exit(\"labelImageMarker\");\n    return open;\n  }\n\n  /**\n   * After `!`, at `[`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 91) {\n      effects.enter(\"labelMarker\");\n      effects.consume(code);\n      effects.exit(\"labelMarker\");\n      effects.exit(\"labelImage\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `![`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *         ^\n   * ```\n   *\n   * This is needed in because, when GFM footnotes are enabled, images never\n   * form when started with a `^`.\n   * Instead, links form:\n   *\n   * ```markdown\n   * ![^a](b)\n   *\n   * ![^a][b]\n   *\n   * [b]: c\n   * ```\n   *\n   * ```html\n   * <p>!<a href=\\\"b\\\">^a</a></p>\n   * <p>!<a href=\\\"c\\\">^a</a></p>\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // To do: use a new field to do this, this is still needed for\n    // `micromark-extension-gfm-footnote`, but the `label-start-link`\n    // behavior isn’t.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs ? nok(code) : ok(code);\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   Event,\n *   Point,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { push, splice } from 'micromark-util-chunked';\nimport { classifyCharacter } from 'micromark-util-classify-character';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  resolveAll: resolveAllAttention,\n  tokenize: tokenizeAttention\n};\n\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\n// eslint-disable-next-line complexity\nfunction resolveAllAttention(events, context) {\n  let index = -1;\n  /** @type {number} */\n  let open;\n  /** @type {Token} */\n  let group;\n  /** @type {Token} */\n  let text;\n  /** @type {Token} */\n  let openingSequence;\n  /** @type {Token} */\n  let closingSequence;\n  /** @type {number} */\n  let use;\n  /** @type {Array<Event>} */\n  let nextEvents;\n  /** @type {number} */\n  let offset;\n\n  // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (events[index][0] === 'enter' && events[index][1].type === 'attentionSequence' && events[index][1]._close) {\n      open = index;\n\n      // Now walk back to find an opener.\n      while (open--) {\n        // Find a token that can open the closer.\n        if (events[open][0] === 'exit' && events[open][1].type === 'attentionSequence' && events[open][1]._open &&\n        // If the markers are the same:\n        context.sliceSerialize(events[open][1]).charCodeAt(0) === context.sliceSerialize(events[index][1]).charCodeAt(0)) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if ((events[open][1]._close || events[index][1]._open) && (events[index][1].end.offset - events[index][1].start.offset) % 3 && !((events[open][1].end.offset - events[open][1].start.offset + events[index][1].end.offset - events[index][1].start.offset) % 3)) {\n            continue;\n          }\n\n          // Number of markers to use from the sequence.\n          use = events[open][1].end.offset - events[open][1].start.offset > 1 && events[index][1].end.offset - events[index][1].start.offset > 1 ? 2 : 1;\n          const start = {\n            ...events[open][1].end\n          };\n          const end = {\n            ...events[index][1].start\n          };\n          movePoint(start, -use);\n          movePoint(end, use);\n          openingSequence = {\n            type: use > 1 ? \"strongSequence\" : \"emphasisSequence\",\n            start,\n            end: {\n              ...events[open][1].end\n            }\n          };\n          closingSequence = {\n            type: use > 1 ? \"strongSequence\" : \"emphasisSequence\",\n            start: {\n              ...events[index][1].start\n            },\n            end\n          };\n          text = {\n            type: use > 1 ? \"strongText\" : \"emphasisText\",\n            start: {\n              ...events[open][1].end\n            },\n            end: {\n              ...events[index][1].start\n            }\n          };\n          group = {\n            type: use > 1 ? \"strong\" : \"emphasis\",\n            start: {\n              ...openingSequence.start\n            },\n            end: {\n              ...closingSequence.end\n            }\n          };\n          events[open][1].end = {\n            ...openingSequence.start\n          };\n          events[index][1].start = {\n            ...closingSequence.end\n          };\n          nextEvents = [];\n\n          // If there are more markers in the opening, add them before.\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [['enter', events[open][1], context], ['exit', events[open][1], context]]);\n          }\n\n          // Opening.\n          nextEvents = push(nextEvents, [['enter', group, context], ['enter', openingSequence, context], ['exit', openingSequence, context], ['enter', text, context]]);\n\n          // Always populated by defaults.\n\n          // Between.\n          nextEvents = push(nextEvents, resolveAll(context.parser.constructs.insideSpan.null, events.slice(open + 1, index), context));\n\n          // Closing.\n          nextEvents = push(nextEvents, [['exit', text, context], ['enter', closingSequence, context], ['exit', closingSequence, context], ['exit', group, context]]);\n\n          // If there are more markers in the closing, add them after.\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2;\n            nextEvents = push(nextEvents, [['enter', events[index][1], context], ['exit', events[index][1], context]]);\n          } else {\n            offset = 0;\n          }\n          splice(events, open - 1, index - open + 3, nextEvents);\n          index = open + nextEvents.length - offset - 2;\n          break;\n        }\n      }\n    }\n  }\n\n  // Remove remaining sequences.\n  index = -1;\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data';\n    }\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null;\n  const previous = this.previous;\n  const before = classifyCharacter(previous);\n\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Before a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    marker = code;\n    effects.enter('attentionSequence');\n    return inside(code);\n  }\n\n  /**\n   * In a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code);\n      return inside;\n    }\n    const token = effects.exit('attentionSequence');\n\n    // To do: next major: move this to resolver, just like `markdown-rs`.\n    const after = classifyCharacter(code);\n\n    // Always populated by defaults.\n\n    const open = !after || after === 2 && before || attentionMarkers.includes(code);\n    const close = !before || before === 2 && after || attentionMarkers.includes(previous);\n    token._open = Boolean(marker === 42 ? open : open && (before || !close));\n    token._close = Boolean(marker === 42 ? close : close && (after || !open));\n    return ok(code);\n  }\n}\n\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n *   Point.\n * @param {number} offset\n *   Amount to move.\n * @returns {undefined}\n *   Nothing.\n */\nfunction movePoint(point, offset) {\n  point.column += offset;\n  point.offset += offset;\n  point._bufferIndex += offset;\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { asciiAlphanumeric, asciiAlpha, asciiAtext, asciiControl } from 'micromark-util-character';\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 0;\n  return start;\n\n  /**\n   * Start of an autolink.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *      ^\n   * > | a<user@example.com>b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"autolink\");\n    effects.enter(\"autolinkMarker\");\n    effects.consume(code);\n    effects.exit(\"autolinkMarker\");\n    effects.enter(\"autolinkProtocol\");\n    return open;\n  }\n\n  /**\n   * After `<`, at protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *       ^\n   * > | a<user@example.com>b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return schemeOrEmailAtext;\n    }\n    if (code === 64) {\n      return nok(code);\n    }\n    return emailAtext(code);\n  }\n\n  /**\n   * At second byte of protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeOrEmailAtext(code) {\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) {\n      // Count the previous alphabetical from `open` too.\n      size = 1;\n      return schemeInsideOrEmailAtext(code);\n    }\n    return emailAtext(code);\n  }\n\n  /**\n   * In ambiguous protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code);\n      size = 0;\n      return urlInside;\n    }\n\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if ((code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) && size++ < 32) {\n      effects.consume(code);\n      return schemeInsideOrEmailAtext;\n    }\n    size = 0;\n    return emailAtext(code);\n  }\n\n  /**\n   * After protocol, in URL.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit(\"autolinkProtocol\");\n      effects.enter(\"autolinkMarker\");\n      effects.consume(code);\n      effects.exit(\"autolinkMarker\");\n      effects.exit(\"autolink\");\n      return ok;\n    }\n\n    // ASCII control, space, or `<`.\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return urlInside;\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code);\n      return emailAtSignOrDot;\n    }\n    if (asciiAtext(code)) {\n      effects.consume(code);\n      return emailAtext;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In label, after at-sign or dot.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                 ^       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code);\n  }\n\n  /**\n   * In label, where `.` and `>` are allowed.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code);\n      size = 0;\n      return emailAtSignOrDot;\n    }\n    if (code === 62) {\n      // Exit, then change the token type.\n      effects.exit(\"autolinkProtocol\").type = \"autolinkEmail\";\n      effects.enter(\"autolinkMarker\");\n      effects.consume(code);\n      effects.exit(\"autolinkMarker\");\n      effects.exit(\"autolink\");\n      return ok;\n    }\n    return emailValue(code);\n  }\n\n  /**\n   * In label, where `.` and `>` are *not* allowed.\n   *\n   * Though, this is also used in `emailLabel` to parse other values.\n   *\n   * ```markdown\n   * > | a<user.name@ex-ample.com>b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailValue(code) {\n    // ASCII alphanumeric or `-`.\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      const next = code === 45 ? emailValue : emailLabel;\n      effects.consume(code);\n      return next;\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { asciiAlphanumeric, asciiAlpha, markdownLineEndingOrSpace, markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this;\n  /** @type {NonNullable<Code> | undefined} */\n  let marker;\n  /** @type {number} */\n  let index;\n  /** @type {State} */\n  let returnState;\n  return start;\n\n  /**\n   * Start of HTML (text).\n   *\n   * ```markdown\n   * > | a <b> c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"htmlText\");\n    effects.enter(\"htmlTextData\");\n    effects.consume(code);\n    return open;\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | a <b> c\n   *        ^\n   * > | a <!doctype> c\n   *        ^\n   * > | a <!--b--> c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code);\n      return declarationOpen;\n    }\n    if (code === 47) {\n      effects.consume(code);\n      return tagCloseStart;\n    }\n    if (code === 63) {\n      effects.consume(code);\n      return instruction;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return tagOpen;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | a <!doctype> c\n   *         ^\n   * > | a <!--b--> c\n   *         ^\n   * > | a <![CDATA[>&<]]> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentOpenInside;\n    }\n    if (code === 91) {\n      effects.consume(code);\n      index = 0;\n      return cdataOpenInside;\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return declaration;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In a comment, after `<!-`, at another `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentEnd;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In comment.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function comment(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 45) {\n      effects.consume(code);\n      return commentClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = comment;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return comment;\n  }\n\n  /**\n   * In comment, after `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentEnd;\n    }\n    return comment(code);\n  }\n\n  /**\n   * In comment, after `--`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentEnd(code) {\n    return code === 62 ? end(code) : code === 45 ? commentClose(code) : comment(code);\n  }\n\n  /**\n   * After `<![`, in CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *          ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = \"CDATA[\";\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code);\n      return index === value.length ? cdata : cdataOpenInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In CDATA.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdata(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.consume(code);\n      return cdataClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = cdata;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return cdata;\n  }\n\n  /**\n   * In CDATA, after `]`, at another `]`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code);\n      return cdataEnd;\n    }\n    return cdata(code);\n  }\n\n  /**\n   * In CDATA, after `]]`, at `>`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code);\n    }\n    if (code === 93) {\n      effects.consume(code);\n      return cdataEnd;\n    }\n    return cdata(code);\n  }\n\n  /**\n   * In declaration.\n   *\n   * ```markdown\n   * > | a <!b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code);\n    }\n    if (markdownLineEnding(code)) {\n      returnState = declaration;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return declaration;\n  }\n\n  /**\n   * In instruction.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instruction(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 63) {\n      effects.consume(code);\n      return instructionClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = instruction;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return instruction;\n  }\n\n  /**\n   * In instruction, after `?`, at `>`.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code);\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return tagClose;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `</x`, in a tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagClose(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagClose;\n    }\n    return tagCloseBetween(code);\n  }\n\n  /**\n   * In closing tag, after tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagCloseBetween;\n    }\n    return end(code);\n  }\n\n  /**\n   * After `<x`, in opening tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpen(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagOpen;\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In opening tag, after tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code);\n      return end;\n    }\n\n    // ASCII alphabetical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code);\n      return tagOpenAttributeName;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenBetween;\n    }\n    return end(code);\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeName(code) {\n    // ASCII alphabetical and `-`, `.`, `:`, and `_`.\n    if (code === 45 || code === 46 || code === 58 || code === 95 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagOpenAttributeName;\n    }\n    return tagOpenAttributeNameAfter(code);\n  }\n\n  /**\n   * After attribute name, before initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code);\n      return tagOpenAttributeValueBefore;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenAttributeNameAfter;\n    }\n    return tagOpenBetween(code);\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueBefore(code) {\n    if (code === null || code === 60 || code === 61 || code === 62 || code === 96) {\n      return nok(code);\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code);\n      marker = code;\n      return tagOpenAttributeValueQuoted;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenAttributeValueBefore;\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueUnquoted;\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code);\n      marker = undefined;\n      return tagOpenAttributeValueQuotedAfter;\n    }\n    if (code === null) {\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueQuoted;\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueUnquoted(code) {\n    if (code === null || code === 34 || code === 39 || code === 60 || code === 61 || code === 96) {\n      return nok(code);\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueUnquoted;\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the end\n   * of the tag.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In certain circumstances of a tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code);\n      effects.exit(\"htmlTextData\");\n      effects.exit(\"htmlText\");\n      return ok;\n    }\n    return nok(code);\n  }\n\n  /**\n   * At eol.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   * > | a <!--a\n   *            ^\n   *   | b-->\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingBefore(code) {\n    effects.exit(\"htmlTextData\");\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return lineEndingAfter;\n  }\n\n  /**\n   * After eol, at optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfter(code) {\n    // Always populated by defaults.\n\n    return markdownSpace(code) ? factorySpace(effects, lineEndingAfterPrefix, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code) : lineEndingAfterPrefix(code);\n  }\n\n  /**\n   * After eol, after optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfterPrefix(code) {\n    effects.enter(\"htmlTextData\");\n    return returnState(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { labelEnd } from './label-end.js';\n\n/** @type {Construct} */\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  resolveAll: labelEnd.resolveAll,\n  tokenize: tokenizeLabelStartLink\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of label (link) start.\n   *\n   * ```markdown\n   * > | a [b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"labelLink\");\n    effects.enter(\"labelMarker\");\n    effects.consume(code);\n    effects.exit(\"labelMarker\");\n    effects.exit(\"labelLink\");\n    return after;\n  }\n\n  /** @type {State} */\n  function after(code) {\n    // To do: this isn’t needed in `micromark-extension-gfm-footnote`,\n    // remove.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs ? nok(code) : ok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of a hard break (escape).\n   *\n   * ```markdown\n   * > | a\\\n   *      ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"hardBreakEscape\");\n    effects.consume(code);\n    return after;\n  }\n\n  /**\n   * After `\\`, at eol.\n   *\n   * ```markdown\n   * > | a\\\n   *       ^\n   *   | b\n   * ```\n   *\n   *  @type {State}\n   */\n  function after(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit(\"hardBreakEscape\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   Previous,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  previous,\n  resolve: resolveCodeText,\n  tokenize: tokenizeCodeText\n};\n\n// To do: next major: don’t resolve, like `markdown-rs`.\n/** @type {Resolver} */\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4;\n  let headEnterIndex = 3;\n  /** @type {number} */\n  let index;\n  /** @type {number | undefined} */\n  let enter;\n\n  // If we start and end with an EOL or a space.\n  if ((events[headEnterIndex][1].type === \"lineEnding\" || events[headEnterIndex][1].type === 'space') && (events[tailExitIndex][1].type === \"lineEnding\" || events[tailExitIndex][1].type === 'space')) {\n    index = headEnterIndex;\n\n    // And we have data.\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === \"codeTextData\") {\n        // Then we have padding.\n        events[headEnterIndex][1].type = \"codeTextPadding\";\n        events[tailExitIndex][1].type = \"codeTextPadding\";\n        headEnterIndex += 2;\n        tailExitIndex -= 2;\n        break;\n      }\n    }\n  }\n\n  // Merge adjacent spaces and data.\n  index = headEnterIndex - 1;\n  tailExitIndex++;\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== \"lineEnding\") {\n        enter = index;\n      }\n    } else if (index === tailExitIndex || events[index][1].type === \"lineEnding\") {\n      events[enter][1].type = \"codeTextData\";\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end;\n        events.splice(enter + 2, index - enter - 2);\n        tailExitIndex -= index - enter - 2;\n        index = enter + 2;\n      }\n      enter = undefined;\n    }\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Previous}\n */\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return code !== 96 || this.events[this.events.length - 1][1].type === \"characterEscape\";\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this;\n  let sizeOpen = 0;\n  /** @type {number} */\n  let size;\n  /** @type {Token} */\n  let token;\n  return start;\n\n  /**\n   * Start of code (text).\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * > | \\`a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"codeText\");\n    effects.enter(\"codeTextSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 96) {\n      effects.consume(code);\n      sizeOpen++;\n      return sequenceOpen;\n    }\n    effects.exit(\"codeTextSequence\");\n    return between(code);\n  }\n\n  /**\n   * Between something and something else.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function between(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code);\n    }\n\n    // To do: next major: don’t do spaces in resolve, but when compiling,\n    // like `markdown-rs`.\n    // Tabs don’t work, and virtual spaces don’t make sense.\n    if (code === 32) {\n      effects.enter('space');\n      effects.consume(code);\n      effects.exit('space');\n      return between;\n    }\n\n    // Closing fence? Could also be data.\n    if (code === 96) {\n      token = effects.enter(\"codeTextSequence\");\n      size = 0;\n      return sequenceClose(code);\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return between;\n    }\n\n    // Data.\n    effects.enter(\"codeTextData\");\n    return data(code);\n  }\n\n  /**\n   * In data.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 32 || code === 96 || markdownLineEnding(code)) {\n      effects.exit(\"codeTextData\");\n      return between(code);\n    }\n    effects.consume(code);\n    return data;\n  }\n\n  /**\n   * In closing sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceClose(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code);\n      size++;\n      return sequenceClose;\n    }\n\n    // Done!\n    if (size === sizeOpen) {\n      effects.exit(\"codeTextSequence\");\n      effects.exit(\"codeText\");\n      return ok(code);\n    }\n\n    // More or less accents: mark as data.\n    token.type = \"codeTextData\";\n    return data(code);\n  }\n}","/**\n * @import {Extension} from 'micromark-util-types'\n */\n\nimport { attention, autolink, blockQuote, characterEscape, characterReference, codeFenced, codeIndented, codeText, definition, hardBreakEscape, headingAtx, htmlFlow, htmlText, labelEnd, labelStartImage, labelStartLink, lineEnding, list, setextUnderline, thematicBreak } from 'micromark-core-commonmark';\nimport { resolver as resolveText } from './initialize/text.js';\n\n/** @satisfies {Extension['document']} */\nexport const document = {\n  [42]: list,\n  [43]: list,\n  [45]: list,\n  [48]: list,\n  [49]: list,\n  [50]: list,\n  [51]: list,\n  [52]: list,\n  [53]: list,\n  [54]: list,\n  [55]: list,\n  [56]: list,\n  [57]: list,\n  [62]: blockQuote\n};\n\n/** @satisfies {Extension['contentInitial']} */\nexport const contentInitial = {\n  [91]: definition\n};\n\n/** @satisfies {Extension['flowInitial']} */\nexport const flowInitial = {\n  [-2]: codeIndented,\n  [-1]: codeIndented,\n  [32]: codeIndented\n};\n\n/** @satisfies {Extension['flow']} */\nexport const flow = {\n  [35]: headingAtx,\n  [42]: thematicBreak,\n  [45]: [setextUnderline, thematicBreak],\n  [60]: htmlFlow,\n  [61]: setextUnderline,\n  [95]: thematicBreak,\n  [96]: codeFenced,\n  [126]: codeFenced\n};\n\n/** @satisfies {Extension['string']} */\nexport const string = {\n  [38]: characterReference,\n  [92]: characterEscape\n};\n\n/** @satisfies {Extension['text']} */\nexport const text = {\n  [-5]: lineEnding,\n  [-4]: lineEnding,\n  [-3]: lineEnding,\n  [33]: labelStartImage,\n  [38]: characterReference,\n  [42]: attention,\n  [60]: [autolink, htmlText],\n  [91]: labelStartLink,\n  [92]: [hardBreakEscape, characterEscape],\n  [93]: labelEnd,\n  [95]: attention,\n  [96]: codeText\n};\n\n/** @satisfies {Extension['insideSpan']} */\nexport const insideSpan = {\n  null: [attention, resolveText]\n};\n\n/** @satisfies {Extension['attentionMarkers']} */\nexport const attentionMarkers = {\n  null: [42, 95]\n};\n\n/** @satisfies {Extension['disable']} */\nexport const disable = {\n  null: []\n};","/**\n * @import {\n *   Chunk,\n *   Code,\n *   ConstructRecord,\n *   Construct,\n *   Effects,\n *   InitialConstruct,\n *   ParseContext,\n *   Point,\n *   State,\n *   TokenizeContext,\n *   Token\n * } from 'micromark-util-types'\n */\n\n/**\n * @callback Restore\n *   Restore the state.\n * @returns {undefined}\n *   Nothing.\n *\n * @typedef Info\n *   Info.\n * @property {Restore} restore\n *   Restore.\n * @property {number} from\n *   From.\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n *   Construct.\n * @param {Info} info\n *   Info.\n * @returns {undefined}\n *   Nothing.\n */\n\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { push, splice } from 'micromark-util-chunked';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n *   Parser.\n * @param {InitialConstruct} initialize\n *   Construct.\n * @param {Omit<Point, '_bufferIndex' | '_index'> | undefined} [from]\n *   Point (optional).\n * @returns {TokenizeContext}\n *   Context.\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = {\n    _bufferIndex: -1,\n    _index: 0,\n    line: from && from.line || 1,\n    column: from && from.column || 1,\n    offset: from && from.offset || 0\n  };\n  /** @type {Record<string, number>} */\n  const columnStart = {};\n  /** @type {Array<Construct>} */\n  const resolveAllConstructs = [];\n  /** @type {Array<Chunk>} */\n  let chunks = [];\n  /** @type {Array<Token>} */\n  let stack = [];\n  /** @type {boolean | undefined} */\n  let consumed = true;\n\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n  const effects = {\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    consume,\n    enter,\n    exit,\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  };\n\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n  const context = {\n    code: null,\n    containerState: {},\n    defineSkip,\n    events: [],\n    now,\n    parser,\n    previous: null,\n    sliceSerialize,\n    sliceStream,\n    write\n  };\n\n  /**\n   * The state function.\n   *\n   * @type {State | undefined}\n   */\n  let state = initialize.tokenize.call(context, effects);\n\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n  let expectedCode;\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize);\n  }\n  return context;\n\n  /** @type {TokenizeContext['write']} */\n  function write(slice) {\n    chunks = push(chunks, slice);\n    main();\n\n    // Exit if we’re not done, resolve might change stuff.\n    if (chunks[chunks.length - 1] !== null) {\n      return [];\n    }\n    addResult(initialize, 0);\n\n    // Otherwise, resolve, and exit.\n    context.events = resolveAll(resolveAllConstructs, context.events, context);\n    return context.events;\n  }\n\n  //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs);\n  }\n\n  /** @type {TokenizeContext['sliceStream']} */\n  function sliceStream(token) {\n    return sliceChunks(chunks, token);\n  }\n\n  /** @type {TokenizeContext['now']} */\n  function now() {\n    // This is a hot path, so we clone manually instead of `Object.assign({}, point)`\n    const {\n      _bufferIndex,\n      _index,\n      line,\n      column,\n      offset\n    } = point;\n    return {\n      _bufferIndex,\n      _index,\n      line,\n      column,\n      offset\n    };\n  }\n\n  /** @type {TokenizeContext['defineSkip']} */\n  function defineSkip(value) {\n    columnStart[value.line] = value.column;\n    accountForPotentialSkip();\n  }\n\n  //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function main() {\n    /** @type {number} */\n    let chunkIndex;\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index];\n\n      // If we’re in a buffer chunk, loop through it.\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index;\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0;\n        }\n        while (point._index === chunkIndex && point._bufferIndex < chunk.length) {\n          go(chunk.charCodeAt(point._bufferIndex));\n        }\n      } else {\n        go(chunk);\n      }\n    }\n  }\n\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   *   Code.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function go(code) {\n    consumed = undefined;\n    expectedCode = code;\n    state = state(code);\n  }\n\n  /** @type {Effects['consume']} */\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++;\n      point.column = 1;\n      point.offset += code === -3 ? 2 : 1;\n      accountForPotentialSkip();\n    } else if (code !== -1) {\n      point.column++;\n      point.offset++;\n    }\n\n    // Not in a string chunk.\n    if (point._bufferIndex < 0) {\n      point._index++;\n    } else {\n      point._bufferIndex++;\n\n      // At end of string chunk.\n      if (point._bufferIndex ===\n      // Points w/ non-negative `_bufferIndex` reference\n      // strings.\n      /** @type {string} */\n      chunks[point._index].length) {\n        point._bufferIndex = -1;\n        point._index++;\n      }\n    }\n\n    // Expose the previous character.\n    context.previous = code;\n\n    // Mark as consumed.\n    consumed = true;\n  }\n\n  /** @type {Effects['enter']} */\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {};\n    token.type = type;\n    token.start = now();\n    context.events.push(['enter', token, context]);\n    stack.push(token);\n    return token;\n  }\n\n  /** @type {Effects['exit']} */\n  function exit(type) {\n    const token = stack.pop();\n    token.end = now();\n    context.events.push(['exit', token, context]);\n    return token;\n  }\n\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from);\n  }\n\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulcheck(_, info) {\n    info.restore();\n  }\n\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   *   Callback.\n   * @param {{interrupt?: boolean | undefined} | undefined} [fields]\n   *   Fields.\n   */\n  function constructFactory(onreturn, fields) {\n    return hook;\n\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Array<Construct> | ConstructRecord | Construct} constructs\n     *   Constructs.\n     * @param {State} returnState\n     *   State.\n     * @param {State | undefined} [bogusState]\n     *   State.\n     * @returns {State}\n     *   State.\n     */\n    function hook(constructs, returnState, bogusState) {\n      /** @type {ReadonlyArray<Construct>} */\n      let listOfConstructs;\n      /** @type {number} */\n      let constructIndex;\n      /** @type {Construct} */\n      let currentConstruct;\n      /** @type {Info} */\n      let info;\n      return Array.isArray(constructs) ? /* c8 ignore next 1 */\n      handleListOfConstructs(constructs) : 'tokenize' in constructs ?\n      // Looks like a construct.\n      handleListOfConstructs([(/** @type {Construct} */constructs)]) : handleMapOfConstructs(constructs);\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       *   Constructs.\n       * @returns {State}\n       *   State.\n       */\n      function handleMapOfConstructs(map) {\n        return start;\n\n        /** @type {State} */\n        function start(code) {\n          const left = code !== null && map[code];\n          const all = code !== null && map.null;\n          const list = [\n          // To do: add more extension tests.\n          /* c8 ignore next 2 */\n          ...(Array.isArray(left) ? left : left ? [left] : []), ...(Array.isArray(all) ? all : all ? [all] : [])];\n          return handleListOfConstructs(list)(code);\n        }\n      }\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ReadonlyArray<Construct>} list\n       *   Constructs.\n       * @returns {State}\n       *   State.\n       */\n      function handleListOfConstructs(list) {\n        listOfConstructs = list;\n        constructIndex = 0;\n        if (list.length === 0) {\n          return bogusState;\n        }\n        return handleConstruct(list[constructIndex]);\n      }\n\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       *   Construct.\n       * @returns {State}\n       *   State.\n       */\n      function handleConstruct(construct) {\n        return start;\n\n        /** @type {State} */\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store();\n          currentConstruct = construct;\n          if (!construct.partial) {\n            context.currentConstruct = construct;\n          }\n\n          // Always populated by defaults.\n\n          if (construct.name && context.parser.constructs.disable.null.includes(construct.name)) {\n            return nok(code);\n          }\n          return construct.tokenize.call(\n          // If we do have fields, create an object w/ `context` as its\n          // prototype.\n          // This allows a “live binding”, which is needed for `interrupt`.\n          fields ? Object.assign(Object.create(context), fields) : context, effects, ok, nok)(code);\n        }\n      }\n\n      /** @type {State} */\n      function ok(code) {\n        consumed = true;\n        onreturn(currentConstruct, info);\n        return returnState;\n      }\n\n      /** @type {State} */\n      function nok(code) {\n        consumed = true;\n        info.restore();\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex]);\n        }\n        return bogusState;\n      }\n    }\n  }\n\n  /**\n   * @param {Construct} construct\n   *   Construct.\n   * @param {number} from\n   *   From.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct);\n    }\n    if (construct.resolve) {\n      splice(context.events, from, context.events.length - from, construct.resolve(context.events.slice(from), context));\n    }\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context);\n    }\n  }\n\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   *   Info.\n   */\n  function store() {\n    const startPoint = now();\n    const startPrevious = context.previous;\n    const startCurrentConstruct = context.currentConstruct;\n    const startEventsIndex = context.events.length;\n    const startStack = Array.from(stack);\n    return {\n      from: startEventsIndex,\n      restore\n    };\n\n    /**\n     * Restore state.\n     *\n     * @returns {undefined}\n     *   Nothing.\n     */\n    function restore() {\n      point = startPoint;\n      context.previous = startPrevious;\n      context.currentConstruct = startCurrentConstruct;\n      context.events.length = startEventsIndex;\n      stack = startStack;\n      accountForPotentialSkip();\n    }\n  }\n\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line];\n      point.offset += columnStart[point.line] - 1;\n    }\n  }\n}\n\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {ReadonlyArray<Chunk>} chunks\n *   Chunks.\n * @param {Pick<Token, 'end' | 'start'>} token\n *   Token.\n * @returns {Array<Chunk>}\n *   Chunks.\n */\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index;\n  const startBufferIndex = token.start._bufferIndex;\n  const endIndex = token.end._index;\n  const endBufferIndex = token.end._bufferIndex;\n  /** @type {Array<Chunk>} */\n  let view;\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)];\n  } else {\n    view = chunks.slice(startIndex, endIndex);\n    if (startBufferIndex > -1) {\n      const head = view[0];\n      if (typeof head === 'string') {\n        view[0] = head.slice(startBufferIndex);\n        /* c8 ignore next 4 -- used to be used, no longer */\n      } else {\n        view.shift();\n      }\n    }\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex));\n    }\n  }\n  return view;\n}\n\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {ReadonlyArray<Chunk>} chunks\n *   Chunks.\n * @param {boolean | undefined} [expandTabs=false]\n *   Whether to expand tabs (default: `false`).\n * @returns {string}\n *   Result.\n */\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1;\n  /** @type {Array<string>} */\n  const result = [];\n  /** @type {boolean | undefined} */\n  let atTab;\n  while (++index < chunks.length) {\n    const chunk = chunks[index];\n    /** @type {string} */\n    let value;\n    if (typeof chunk === 'string') {\n      value = chunk;\n    } else switch (chunk) {\n      case -5:\n        {\n          value = \"\\r\";\n          break;\n        }\n      case -4:\n        {\n          value = \"\\n\";\n          break;\n        }\n      case -3:\n        {\n          value = \"\\r\" + \"\\n\";\n          break;\n        }\n      case -2:\n        {\n          value = expandTabs ? \" \" : \"\\t\";\n          break;\n        }\n      case -1:\n        {\n          if (!expandTabs && atTab) continue;\n          value = \" \";\n          break;\n        }\n      default:\n        {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk);\n        }\n    }\n    atTab = chunk === -2;\n    result.push(value);\n  }\n  return result.join('');\n}","/**\n * @import {Chunk, Code, Encoding, Value} from 'micromark-util-types'\n */\n\n/**\n * @callback Preprocessor\n *   Preprocess a value.\n * @param {Value} value\n *   Value.\n * @param {Encoding | null | undefined} [encoding]\n *   Encoding when `value` is a typed array (optional).\n * @param {boolean | null | undefined} [end=false]\n *   Whether this is the last chunk (default: `false`).\n * @returns {Array<Chunk>}\n *   Chunks.\n */\n\nconst search = /[\\0\\t\\n\\r]/g;\n\n/**\n * @returns {Preprocessor}\n *   Preprocess a value.\n */\nexport function preprocess() {\n  let column = 1;\n  let buffer = '';\n  /** @type {boolean | undefined} */\n  let start = true;\n  /** @type {boolean | undefined} */\n  let atCarriageReturn;\n  return preprocessor;\n\n  /** @type {Preprocessor} */\n  // eslint-disable-next-line complexity\n  function preprocessor(value, encoding, end) {\n    /** @type {Array<Chunk>} */\n    const chunks = [];\n    /** @type {RegExpMatchArray | null} */\n    let match;\n    /** @type {number} */\n    let next;\n    /** @type {number} */\n    let startPosition;\n    /** @type {number} */\n    let endPosition;\n    /** @type {Code} */\n    let code;\n    value = buffer + (typeof value === 'string' ? value.toString() : new TextDecoder(encoding || undefined).decode(value));\n    startPosition = 0;\n    buffer = '';\n    if (start) {\n      // To do: `markdown-rs` actually parses BOMs (byte order mark).\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++;\n      }\n      start = undefined;\n    }\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition;\n      match = search.exec(value);\n      endPosition = match && match.index !== undefined ? match.index : value.length;\n      code = value.charCodeAt(endPosition);\n      if (!match) {\n        buffer = value.slice(startPosition);\n        break;\n      }\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3);\n        atCarriageReturn = undefined;\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5);\n          atCarriageReturn = undefined;\n        }\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition));\n          column += endPosition - startPosition;\n        }\n        switch (code) {\n          case 0:\n            {\n              chunks.push(65533);\n              column++;\n              break;\n            }\n          case 9:\n            {\n              next = Math.ceil(column / 4) * 4;\n              chunks.push(-2);\n              while (column++ < next) chunks.push(-1);\n              break;\n            }\n          case 10:\n            {\n              chunks.push(-4);\n              column = 1;\n              break;\n            }\n          default:\n            {\n              atCarriageReturn = true;\n              column = 1;\n            }\n        }\n      }\n      startPosition = endPosition + 1;\n    }\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5);\n      if (buffer) chunks.push(buffer);\n      chunks.push(null);\n    }\n    return chunks;\n  }\n}","/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * Sort of like `String.fromCodePoint(Number.parseInt(value, base))`, but makes\n * non-characters and control characters safe.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n *   Character.\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base);\n  if (\n  // C0 except for HT, LF, FF, CR, space.\n  code < 9 || code === 11 || code > 13 && code < 32 ||\n  // Control character (DEL) of C0, and C1 controls.\n  code > 126 && code < 160 ||\n  // Lone high surrogates and low surrogates.\n  code > 55_295 && code < 57_344 ||\n  // Noncharacters.\n  code > 64_975 && code < 65_008 || /* eslint-disable no-bitwise */\n  (code & 65_535) === 65_535 || (code & 65_535) === 65_534 || /* eslint-enable no-bitwise */\n  // Out of range\n  code > 1_114_111) {\n    return \"\\uFFFD\";\n  }\n  return String.fromCodePoint(code);\n}","import { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { decodeNumericCharacterReference } from 'micromark-util-decode-numeric-character-reference';\nconst characterEscapeOrReference = /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi;\n\n/**\n * Decode markdown strings (which occur in places such as fenced code info\n * strings, destinations, labels, and titles).\n *\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n *   Value to decode.\n * @returns {string}\n *   Decoded value.\n */\nexport function decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode);\n}\n\n/**\n * @param {string} $0\n *   Match.\n * @param {string} $1\n *   Character escape.\n * @param {string} $2\n *   Character reference.\n * @returns {string}\n *   Decoded value\n */\nfunction decode($0, $1, $2) {\n  if ($1) {\n    // Escape.\n    return $1;\n  }\n\n  // Reference.\n  const head = $2.charCodeAt(0);\n  if (head === 35) {\n    const head = $2.charCodeAt(1);\n    const hex = head === 120 || head === 88;\n    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10);\n  }\n  return decodeNamedCharacterReference($2) || $0;\n}","/**\n * @import {\n *   Break,\n *   Blockquote,\n *   Code,\n *   Definition,\n *   Emphasis,\n *   Heading,\n *   Html,\n *   Image,\n *   InlineCode,\n *   Link,\n *   ListItem,\n *   List,\n *   Nodes,\n *   Paragraph,\n *   PhrasingContent,\n *   ReferenceType,\n *   Root,\n *   Strong,\n *   Text,\n *   ThematicBreak\n * } from 'mdast'\n * @import {\n *   Encoding,\n *   Event,\n *   Token,\n *   Value\n * } from 'micromark-util-types'\n * @import {Point} from 'unist'\n * @import {\n *   CompileContext,\n *   CompileData,\n *   Config,\n *   Extension,\n *   Handle,\n *   OnEnterError,\n *   Options\n * } from './types.js'\n */\n\nimport { toString } from 'mdast-util-to-string';\nimport { parse, postprocess, preprocess } from 'micromark';\nimport { decodeNumericCharacterReference } from 'micromark-util-decode-numeric-character-reference';\nimport { decodeString } from 'micromark-util-decode-string';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nimport { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { stringifyPosition } from 'unist-util-stringify-position';\nconst own = {}.hasOwnProperty;\n\n/**\n * Turn markdown into a syntax tree.\n *\n * @overload\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {Options | null | undefined} [options]\n * @returns {Root}\n *\n * @overload\n * @param {Value} value\n * @param {Options | null | undefined} [options]\n * @returns {Root}\n *\n * @param {Value} value\n *   Markdown to parse.\n * @param {Encoding | Options | null | undefined} [encoding]\n *   Character encoding for when `value` is `Buffer`.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {Root}\n *   mdast tree.\n */\nexport function fromMarkdown(value, encoding, options) {\n  if (typeof encoding !== 'string') {\n    options = encoding;\n    encoding = undefined;\n  }\n  return compiler(options)(postprocess(parse(options).document().write(preprocess()(value, encoding, true))));\n}\n\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options | null | undefined} [options]\n */\nfunction compiler(options) {\n  /** @type {Config} */\n  const config = {\n    transforms: [],\n    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],\n    enter: {\n      autolink: opener(link),\n      autolinkProtocol: onenterdata,\n      autolinkEmail: onenterdata,\n      atxHeading: opener(heading),\n      blockQuote: opener(blockQuote),\n      characterEscape: onenterdata,\n      characterReference: onenterdata,\n      codeFenced: opener(codeFlow),\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: opener(codeFlow, buffer),\n      codeText: opener(codeText, buffer),\n      codeTextData: onenterdata,\n      data: onenterdata,\n      codeFlowValue: onenterdata,\n      definition: opener(definition),\n      definitionDestinationString: buffer,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: opener(emphasis),\n      hardBreakEscape: opener(hardBreak),\n      hardBreakTrailing: opener(hardBreak),\n      htmlFlow: opener(html, buffer),\n      htmlFlowData: onenterdata,\n      htmlText: opener(html, buffer),\n      htmlTextData: onenterdata,\n      image: opener(image),\n      label: buffer,\n      link: opener(link),\n      listItem: opener(listItem),\n      listItemValue: onenterlistitemvalue,\n      listOrdered: opener(list, onenterlistordered),\n      listUnordered: opener(list),\n      paragraph: opener(paragraph),\n      reference: onenterreference,\n      referenceString: buffer,\n      resourceDestinationString: buffer,\n      resourceTitleString: buffer,\n      setextHeading: opener(heading),\n      strong: opener(strong),\n      thematicBreak: opener(thematicBreak)\n    },\n    exit: {\n      atxHeading: closer(),\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolink: closer(),\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: closer(),\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      characterReference: onexitcharacterreference,\n      codeFenced: closer(onexitcodefenced),\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\n      codeFlowValue: onexitdata,\n      codeIndented: closer(onexitcodeindented),\n      codeText: closer(onexitcodetext),\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: closer(),\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: closer(),\n      hardBreakEscape: closer(onexithardbreak),\n      hardBreakTrailing: closer(onexithardbreak),\n      htmlFlow: closer(onexithtmlflow),\n      htmlFlowData: onexitdata,\n      htmlText: closer(onexithtmltext),\n      htmlTextData: onexitdata,\n      image: closer(onexitimage),\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: closer(onexitlink),\n      listItem: closer(),\n      listOrdered: closer(),\n      listUnordered: closer(),\n      paragraph: closer(),\n      referenceString: onexitreferencestring,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      resource: onexitresource,\n      setextHeading: closer(onexitsetextheading),\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: closer(),\n      thematicBreak: closer()\n    }\n  };\n  configure(config, (options || {}).mdastExtensions || []);\n\n  /** @type {CompileData} */\n  const data = {};\n  return compile;\n\n  /**\n   * Turn micromark events into an mdast tree.\n   *\n   * @param {Array<Event>} events\n   *   Events.\n   * @returns {Root}\n   *   mdast tree.\n   */\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {\n      type: 'root',\n      children: []\n    };\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n    const context = {\n      stack: [tree],\n      tokenStack: [],\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      data\n    };\n    /** @type {Array<number>} */\n    const listStack = [];\n    let index = -1;\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (events[index][1].type === \"listOrdered\" || events[index][1].type === \"listUnordered\") {\n        if (events[index][0] === 'enter') {\n          listStack.push(index);\n        } else {\n          const tail = listStack.pop();\n          index = prepareList(events, tail, index);\n        }\n      }\n    }\n    index = -1;\n    while (++index < events.length) {\n      const handler = config[events[index][0]];\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(Object.assign({\n          sliceSerialize: events[index][2].sliceSerialize\n        }, context), events[index][1]);\n      }\n    }\n\n    // Handle tokens still being open.\n    if (context.tokenStack.length > 0) {\n      const tail = context.tokenStack[context.tokenStack.length - 1];\n      const handler = tail[1] || defaultOnError;\n      handler.call(context, undefined, tail[0]);\n    }\n\n    // Figure out `root` position.\n    tree.position = {\n      start: point(events.length > 0 ? events[0][1].start : {\n        line: 1,\n        column: 1,\n        offset: 0\n      }),\n      end: point(events.length > 0 ? events[events.length - 2][1].end : {\n        line: 1,\n        column: 1,\n        offset: 0\n      })\n    };\n\n    // Call transforms.\n    index = -1;\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree;\n    }\n    return tree;\n  }\n\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n  function prepareList(events, start, length) {\n    let index = start - 1;\n    let containerBalance = -1;\n    let listSpread = false;\n    /** @type {Token | undefined} */\n    let listItem;\n    /** @type {number | undefined} */\n    let lineIndex;\n    /** @type {number | undefined} */\n    let firstBlankLineIndex;\n    /** @type {boolean | undefined} */\n    let atMarker;\n    while (++index <= length) {\n      const event = events[index];\n      switch (event[1].type) {\n        case \"listUnordered\":\n        case \"listOrdered\":\n        case \"blockQuote\":\n          {\n            if (event[0] === 'enter') {\n              containerBalance++;\n            } else {\n              containerBalance--;\n            }\n            atMarker = undefined;\n            break;\n          }\n        case \"lineEndingBlank\":\n          {\n            if (event[0] === 'enter') {\n              if (listItem && !atMarker && !containerBalance && !firstBlankLineIndex) {\n                firstBlankLineIndex = index;\n              }\n              atMarker = undefined;\n            }\n            break;\n          }\n        case \"linePrefix\":\n        case \"listItemValue\":\n        case \"listItemMarker\":\n        case \"listItemPrefix\":\n        case \"listItemPrefixWhitespace\":\n          {\n            // Empty.\n\n            break;\n          }\n        default:\n          {\n            atMarker = undefined;\n          }\n      }\n      if (!containerBalance && event[0] === 'enter' && event[1].type === \"listItemPrefix\" || containerBalance === -1 && event[0] === 'exit' && (event[1].type === \"listUnordered\" || event[1].type === \"listOrdered\")) {\n        if (listItem) {\n          let tailIndex = index;\n          lineIndex = undefined;\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex];\n            if (tailEvent[1].type === \"lineEnding\" || tailEvent[1].type === \"lineEndingBlank\") {\n              if (tailEvent[0] === 'exit') continue;\n              if (lineIndex) {\n                events[lineIndex][1].type = \"lineEndingBlank\";\n                listSpread = true;\n              }\n              tailEvent[1].type = \"lineEnding\";\n              lineIndex = tailIndex;\n            } else if (tailEvent[1].type === \"linePrefix\" || tailEvent[1].type === \"blockQuotePrefix\" || tailEvent[1].type === \"blockQuotePrefixWhitespace\" || tailEvent[1].type === \"blockQuoteMarker\" || tailEvent[1].type === \"listItemIndent\") {\n              // Empty\n            } else {\n              break;\n            }\n          }\n          if (firstBlankLineIndex && (!lineIndex || firstBlankLineIndex < lineIndex)) {\n            listItem._spread = true;\n          }\n\n          // Fix position.\n          listItem.end = Object.assign({}, lineIndex ? events[lineIndex][1].start : event[1].end);\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]]);\n          index++;\n          length++;\n        }\n\n        // Create a new list item.\n        if (event[1].type === \"listItemPrefix\") {\n          /** @type {Token} */\n          const item = {\n            type: 'listItem',\n            _spread: false,\n            start: Object.assign({}, event[1].start),\n            // @ts-expect-error: we’ll add `end` in a second.\n            end: undefined\n          };\n          listItem = item;\n          events.splice(index, 0, ['enter', item, event[2]]);\n          index++;\n          length++;\n          firstBlankLineIndex = undefined;\n          atMarker = true;\n        }\n      }\n    }\n    events[start][1]._spread = listSpread;\n    return length;\n  }\n\n  /**\n   * Create an opener handle.\n   *\n   * @param {(token: Token) => Nodes} create\n   *   Create a node.\n   * @param {Handle | undefined} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function opener(create, and) {\n    return open;\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {undefined}\n     */\n    function open(token) {\n      enter.call(this, create(token), token);\n      if (and) and.call(this, token);\n    }\n  }\n\n  /**\n   * @type {CompileContext['buffer']}\n   */\n  function buffer() {\n    this.stack.push({\n      type: 'fragment',\n      children: []\n    });\n  }\n\n  /**\n   * @type {CompileContext['enter']}\n   */\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1];\n    /** @type {Array<Nodes>} */\n    const siblings = parent.children;\n    siblings.push(node);\n    this.stack.push(node);\n    this.tokenStack.push([token, errorHandler || undefined]);\n    node.position = {\n      start: point(token.start),\n      // @ts-expect-error: `end` will be patched later.\n      end: undefined\n    };\n  }\n\n  /**\n   * Create a closer handle.\n   *\n   * @param {Handle | undefined} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function closer(and) {\n    return close;\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {undefined}\n     */\n    function close(token) {\n      if (and) and.call(this, token);\n      exit.call(this, token);\n    }\n  }\n\n  /**\n   * @type {CompileContext['exit']}\n   */\n  function exit(token, onExitError) {\n    const node = this.stack.pop();\n    const open = this.tokenStack.pop();\n    if (!open) {\n      throw new Error('Cannot close `' + token.type + '` (' + stringifyPosition({\n        start: token.start,\n        end: token.end\n      }) + '): it’s not open');\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0]);\n      } else {\n        const handler = open[1] || defaultOnError;\n        handler.call(this, token, open[0]);\n      }\n    }\n    node.position.end = point(token.end);\n  }\n\n  /**\n   * @type {CompileContext['resume']}\n   */\n  function resume() {\n    return toString(this.stack.pop());\n  }\n\n  //\n  // Handlers.\n  //\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistordered() {\n    this.data.expectingFirstListItemValue = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistitemvalue(token) {\n    if (this.data.expectingFirstListItemValue) {\n      const ancestor = this.stack[this.stack.length - 2];\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10);\n      this.data.expectingFirstListItemValue = undefined;\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.lang = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfencemeta() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.meta = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (this.data.flowCodeInside) return;\n    this.buffer();\n    this.data.flowCodeInside = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefenced() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '');\n    this.data.flowCodeInside = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodeindented() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitionlabelstring(token) {\n    const label = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.label = label;\n    node.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiontitlestring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.title = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.url = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitatxheadingsequence(token) {\n    const node = this.stack[this.stack.length - 1];\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length;\n      node.depth = depth;\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadingtext() {\n    this.data.setextHeadingSlurpLineEnding = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadinglinesequence(token) {\n    const node = this.stack[this.stack.length - 1];\n    node.depth = this.sliceSerialize(token).codePointAt(0) === 61 ? 1 : 2;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheading() {\n    this.data.setextHeadingSlurpLineEnding = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterdata(token) {\n    const node = this.stack[this.stack.length - 1];\n    /** @type {Array<Nodes>} */\n    const siblings = node.children;\n    let tail = siblings[siblings.length - 1];\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text();\n      tail.position = {\n        start: point(token.start),\n        // @ts-expect-error: we’ll add `end` later.\n        end: undefined\n      };\n      siblings.push(tail);\n    }\n    this.stack.push(tail);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitdata(token) {\n    const tail = this.stack.pop();\n    tail.value += this.sliceSerialize(token);\n    tail.position.end = point(token.end);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1];\n    // If we’re at a hard break, include the line ending in there.\n    if (this.data.atHardBreak) {\n      const tail = context.children[context.children.length - 1];\n      tail.position.end = point(token.end);\n      this.data.atHardBreak = undefined;\n      return;\n    }\n    if (!this.data.setextHeadingSlurpLineEnding && config.canContainEols.includes(context.type)) {\n      onenterdata.call(this, token);\n      onexitdata.call(this, token);\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithardbreak() {\n    this.data.atHardBreak = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmlflow() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmltext() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcodetext() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlink() {\n    const node = this.stack[this.stack.length - 1];\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n\n    // To do: clean.\n    if (this.data.inReference) {\n      /** @type {ReferenceType} */\n      const referenceType = this.data.referenceType || 'shortcut';\n      node.type += 'Reference';\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType;\n      // @ts-expect-error: mutate.\n      delete node.url;\n      delete node.title;\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier;\n      // @ts-expect-error: mutate.\n      delete node.label;\n    }\n    this.data.referenceType = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitimage() {\n    const node = this.stack[this.stack.length - 1];\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n\n    // To do: clean.\n    if (this.data.inReference) {\n      /** @type {ReferenceType} */\n      const referenceType = this.data.referenceType || 'shortcut';\n      node.type += 'Reference';\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType;\n      // @ts-expect-error: mutate.\n      delete node.url;\n      delete node.title;\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier;\n      // @ts-expect-error: mutate.\n      delete node.label;\n    }\n    this.data.referenceType = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabeltext(token) {\n    const string = this.sliceSerialize(token);\n    const ancestor = this.stack[this.stack.length - 2];\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    ancestor.label = decodeString(string);\n    // @ts-expect-error: same as above.\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase();\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabel() {\n    const fragment = this.stack[this.stack.length - 1];\n    const value = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    // Assume a reference.\n    this.data.inReference = true;\n    if (node.type === 'link') {\n      /** @type {Array<PhrasingContent>} */\n      const children = fragment.children;\n      node.children = children;\n    } else {\n      node.alt = value;\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcedestinationstring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.url = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcetitlestring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.title = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresource() {\n    this.data.inReference = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterreference() {\n    this.data.referenceType = 'collapsed';\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitreferencestring(token) {\n    const label = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    node.label = label;\n    // @ts-expect-error: same as above.\n    node.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();\n    this.data.referenceType = 'full';\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcharacterreferencemarker(token) {\n    this.data.characterReferenceType = token.type;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token);\n    const type = this.data.characterReferenceType;\n    /** @type {string} */\n    let value;\n    if (type) {\n      value = decodeNumericCharacterReference(data, type === \"characterReferenceMarkerNumeric\" ? 10 : 16);\n      this.data.characterReferenceType = undefined;\n    } else {\n      const result = decodeNamedCharacterReference(data);\n      value = result;\n    }\n    const tail = this.stack[this.stack.length - 1];\n    tail.value += value;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreference(token) {\n    const tail = this.stack.pop();\n    tail.position.end = point(token.end);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token);\n    const node = this.stack[this.stack.length - 1];\n    node.url = this.sliceSerialize(token);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token);\n    const node = this.stack[this.stack.length - 1];\n    node.url = 'mailto:' + this.sliceSerialize(token);\n  }\n\n  //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n  function blockQuote() {\n    return {\n      type: 'blockquote',\n      children: []\n    };\n  }\n\n  /** @returns {Code} */\n  function codeFlow() {\n    return {\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: ''\n    };\n  }\n\n  /** @returns {InlineCode} */\n  function codeText() {\n    return {\n      type: 'inlineCode',\n      value: ''\n    };\n  }\n\n  /** @returns {Definition} */\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    };\n  }\n\n  /** @returns {Emphasis} */\n  function emphasis() {\n    return {\n      type: 'emphasis',\n      children: []\n    };\n  }\n\n  /** @returns {Heading} */\n  function heading() {\n    return {\n      type: 'heading',\n      // @ts-expect-error `depth` will be set later.\n      depth: 0,\n      children: []\n    };\n  }\n\n  /** @returns {Break} */\n  function hardBreak() {\n    return {\n      type: 'break'\n    };\n  }\n\n  /** @returns {Html} */\n  function html() {\n    return {\n      type: 'html',\n      value: ''\n    };\n  }\n\n  /** @returns {Image} */\n  function image() {\n    return {\n      type: 'image',\n      title: null,\n      url: '',\n      alt: null\n    };\n  }\n\n  /** @returns {Link} */\n  function link() {\n    return {\n      type: 'link',\n      title: null,\n      url: '',\n      children: []\n    };\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      spread: token._spread,\n      children: []\n    };\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      spread: token._spread,\n      checked: null,\n      children: []\n    };\n  }\n\n  /** @returns {Paragraph} */\n  function paragraph() {\n    return {\n      type: 'paragraph',\n      children: []\n    };\n  }\n\n  /** @returns {Strong} */\n  function strong() {\n    return {\n      type: 'strong',\n      children: []\n    };\n  }\n\n  /** @returns {Text} */\n  function text() {\n    return {\n      type: 'text',\n      value: ''\n    };\n  }\n\n  /** @returns {ThematicBreak} */\n  function thematicBreak() {\n    return {\n      type: 'thematicBreak'\n    };\n  }\n}\n\n/**\n * Copy a point-like value.\n *\n * @param {Point} d\n *   Point-like value.\n * @returns {Point}\n *   unist point.\n */\nfunction point(d) {\n  return {\n    line: d.line,\n    column: d.column,\n    offset: d.offset\n  };\n}\n\n/**\n * @param {Config} combined\n * @param {Array<Array<Extension> | Extension>} extensions\n * @returns {undefined}\n */\nfunction configure(combined, extensions) {\n  let index = -1;\n  while (++index < extensions.length) {\n    const value = extensions[index];\n    if (Array.isArray(value)) {\n      configure(combined, value);\n    } else {\n      extension(combined, value);\n    }\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Extension} extension\n * @returns {undefined}\n */\nfunction extension(combined, extension) {\n  /** @type {keyof Extension} */\n  let key;\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      switch (key) {\n        case 'canContainEols':\n          {\n            const right = extension[key];\n            if (right) {\n              combined[key].push(...right);\n            }\n            break;\n          }\n        case 'transforms':\n          {\n            const right = extension[key];\n            if (right) {\n              combined[key].push(...right);\n            }\n            break;\n          }\n        case 'enter':\n        case 'exit':\n          {\n            const right = extension[key];\n            if (right) {\n              Object.assign(combined[key], right);\n            }\n            break;\n          }\n        // No default\n      }\n    }\n  }\n}\n\n/** @type {OnEnterError} */\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error('Cannot close `' + left.type + '` (' + stringifyPosition({\n      start: left.start,\n      end: left.end\n    }) + '): a different token (`' + right.type + '`, ' + stringifyPosition({\n      start: right.start,\n      end: right.end\n    }) + ') is open');\n  } else {\n    throw new Error('Cannot close document, a token (`' + right.type + '`, ' + stringifyPosition({\n      start: right.start,\n      end: right.end\n    }) + ') is still open');\n  }\n}","/**\n * @import {Event} from 'micromark-util-types'\n */\n\nimport { subtokenize } from 'micromark-util-subtokenize';\n\n/**\n * @param {Array<Event>} events\n *   Events.\n * @returns {Array<Event>}\n *   Events.\n */\nexport function postprocess(events) {\n  while (!subtokenize(events)) {\n    // Empty\n  }\n  return events;\n}","/**\n * @import {\n *   Create,\n *   FullNormalizedExtension,\n *   InitialConstruct,\n *   ParseContext,\n *   ParseOptions\n * } from 'micromark-util-types'\n */\n\nimport { combineExtensions } from 'micromark-util-combine-extensions';\nimport { content } from './initialize/content.js';\nimport { document } from './initialize/document.js';\nimport { flow } from './initialize/flow.js';\nimport { string, text } from './initialize/text.js';\nimport * as defaultConstructs from './constructs.js';\nimport { createTokenizer } from './create-tokenizer.js';\n\n/**\n * @param {ParseOptions | null | undefined} [options]\n *   Configuration (optional).\n * @returns {ParseContext}\n *   Parser.\n */\nexport function parse(options) {\n  const settings = options || {};\n  const constructs = /** @type {FullNormalizedExtension} */\n  combineExtensions([defaultConstructs, ...(settings.extensions || [])]);\n\n  /** @type {ParseContext} */\n  const parser = {\n    constructs,\n    content: create(content),\n    defined: [],\n    document: create(document),\n    flow: create(flow),\n    lazy: {},\n    string: create(string),\n    text: create(text)\n  };\n  return parser;\n\n  /**\n   * @param {InitialConstruct} initial\n   *   Construct to start with.\n   * @returns {Create}\n   *   Create a tokenizer.\n   */\n  function create(initial) {\n    return creator;\n    /** @type {Create} */\n    function creator(from) {\n      return createTokenizer(parser, initial, from);\n    }\n  }\n}","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').Options} FromMarkdownOptions\n * @typedef {import('unified').Parser<Root>} Parser\n * @typedef {import('unified').Processor<Root>} Processor\n */\n\n/**\n * @typedef {Omit<FromMarkdownOptions, 'extensions' | 'mdastExtensions'>} Options\n */\n\nimport {fromMarkdown} from 'mdast-util-from-markdown'\n\n/**\n * Aadd support for parsing from markdown.\n *\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns {undefined}\n *   Nothing.\n */\nexport default function remarkParse(options) {\n  /** @type {Processor} */\n  // @ts-expect-error: TS in JSDoc generates wrong types if `this` is typed regularly.\n  const self = this\n\n  self.parser = parser\n\n  /**\n   * @type {Parser}\n   */\n  function parser(doc) {\n    return fromMarkdown(doc, {\n      ...self.data('settings'),\n      ...options,\n      // Note: these options are not in the readme.\n      // The goal is for them to be set by plugins on `data` instead of being\n      // passed by users.\n      extensions: self.data('micromarkExtensions') || [],\n      mdastExtensions: self.data('fromMarkdownExtensions') || []\n    })\n  }\n}\n","export const VOID       = -1;\nexport const PRIMITIVE  = 0;\nexport const ARRAY      = 1;\nexport const OBJECT     = 2;\nexport const DATE       = 3;\nexport const REGEXP     = 4;\nexport const MAP        = 5;\nexport const SET        = 6;\nexport const ERROR      = 7;\nexport const BIGINT     = 8;\n// export const SYMBOL = 9;\n","import {\n  VOID, PRIMITIVE,\n  ARRAY, OBJECT,\n  DATE, REGEXP, MAP, SET,\n  ERROR, BIGINT\n} from './types.js';\n\nconst env = typeof self === 'object' ? self : globalThis;\n\nconst deserializer = ($, _) => {\n  const as = (out, index) => {\n    $.set(index, out);\n    return out;\n  };\n\n  const unpair = index => {\n    if ($.has(index))\n      return $.get(index);\n\n    const [type, value] = _[index];\n    switch (type) {\n      case PRIMITIVE:\n      case VOID:\n        return as(value, index);\n      case ARRAY: {\n        const arr = as([], index);\n        for (const index of value)\n          arr.push(unpair(index));\n        return arr;\n      }\n      case OBJECT: {\n        const object = as({}, index);\n        for (const [key, index] of value)\n          object[unpair(key)] = unpair(index);\n        return object;\n      }\n      case DATE:\n        return as(new Date(value), index);\n      case REGEXP: {\n        const {source, flags} = value;\n        return as(new RegExp(source, flags), index);\n      }\n      case MAP: {\n        const map = as(new Map, index);\n        for (const [key, index] of value)\n          map.set(unpair(key), unpair(index));\n        return map;\n      }\n      case SET: {\n        const set = as(new Set, index);\n        for (const index of value)\n          set.add(unpair(index));\n        return set;\n      }\n      case ERROR: {\n        const {name, message} = value;\n        return as(new env[name](message), index);\n      }\n      case BIGINT:\n        return as(BigInt(value), index);\n      case 'BigInt':\n        return as(Object(BigInt(value)), index);\n      case 'ArrayBuffer':\n        return as(new Uint8Array(value).buffer, value);\n      case 'DataView': {\n        const { buffer } = new Uint8Array(value);\n        return as(new DataView(buffer), value);\n      }\n    }\n    return as(new env[type](value), index);\n  };\n\n  return unpair;\n};\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns a deserialized value from a serialized array of Records.\n * @param {Record[]} serialized a previously serialized value.\n * @returns {any}\n */\nexport const deserialize = serialized => deserializer(new Map, serialized)(0);\n","import {\n  VOID, PRIMITIVE,\n  ARRAY, OBJECT,\n  DATE, REGEXP, MAP, SET,\n  ERROR, BIGINT\n} from './types.js';\n\nconst EMPTY = '';\n\nconst {toString} = {};\nconst {keys} = Object;\n\nconst typeOf = value => {\n  const type = typeof value;\n  if (type !== 'object' || !value)\n    return [PRIMITIVE, type];\n\n  const asString = toString.call(value).slice(8, -1);\n  switch (asString) {\n    case 'Array':\n      return [ARRAY, EMPTY];\n    case 'Object':\n      return [OBJECT, EMPTY];\n    case 'Date':\n      return [DATE, EMPTY];\n    case 'RegExp':\n      return [REGEXP, EMPTY];\n    case 'Map':\n      return [MAP, EMPTY];\n    case 'Set':\n      return [SET, EMPTY];\n    case 'DataView':\n      return [ARRAY, asString];\n  }\n\n  if (asString.includes('Array'))\n    return [ARRAY, asString];\n\n  if (asString.includes('Error'))\n    return [ERROR, asString];\n\n  return [OBJECT, asString];\n};\n\nconst shouldSkip = ([TYPE, type]) => (\n  TYPE === PRIMITIVE &&\n  (type === 'function' || type === 'symbol')\n);\n\nconst serializer = (strict, json, $, _) => {\n\n  const as = (out, value) => {\n    const index = _.push(out) - 1;\n    $.set(value, index);\n    return index;\n  };\n\n  const pair = value => {\n    if ($.has(value))\n      return $.get(value);\n\n    let [TYPE, type] = typeOf(value);\n    switch (TYPE) {\n      case PRIMITIVE: {\n        let entry = value;\n        switch (type) {\n          case 'bigint':\n            TYPE = BIGINT;\n            entry = value.toString();\n            break;\n          case 'function':\n          case 'symbol':\n            if (strict)\n              throw new TypeError('unable to serialize ' + type);\n            entry = null;\n            break;\n          case 'undefined':\n            return as([VOID], value);\n        }\n        return as([TYPE, entry], value);\n      }\n      case ARRAY: {\n        if (type) {\n          let spread = value;\n          if (type === 'DataView') {\n            spread = new Uint8Array(value.buffer);\n          }\n          else if (type === 'ArrayBuffer') {\n            spread = new Uint8Array(value);\n          }\n          return as([type, [...spread]], value);\n        }\n\n        const arr = [];\n        const index = as([TYPE, arr], value);\n        for (const entry of value)\n          arr.push(pair(entry));\n        return index;\n      }\n      case OBJECT: {\n        if (type) {\n          switch (type) {\n            case 'BigInt':\n              return as([type, value.toString()], value);\n            case 'Boolean':\n            case 'Number':\n            case 'String':\n              return as([type, value.valueOf()], value);\n          }\n        }\n\n        if (json && ('toJSON' in value))\n          return pair(value.toJSON());\n\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const key of keys(value)) {\n          if (strict || !shouldSkip(typeOf(value[key])))\n            entries.push([pair(key), pair(value[key])]);\n        }\n        return index;\n      }\n      case DATE:\n        return as([TYPE, value.toISOString()], value);\n      case REGEXP: {\n        const {source, flags} = value;\n        return as([TYPE, {source, flags}], value);\n      }\n      case MAP: {\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const [key, entry] of value) {\n          if (strict || !(shouldSkip(typeOf(key)) || shouldSkip(typeOf(entry))))\n            entries.push([pair(key), pair(entry)]);\n        }\n        return index;\n      }\n      case SET: {\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const entry of value) {\n          if (strict || !shouldSkip(typeOf(entry)))\n            entries.push(pair(entry));\n        }\n        return index;\n      }\n    }\n\n    const {message} = value;\n    return as([TYPE, {name: type, message}], value);\n  };\n\n  return pair;\n};\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns an array of serialized Records.\n * @param {any} value a serializable value.\n * @param {{json?: boolean, lossy?: boolean}?} options an object with a `lossy` or `json` property that,\n *  if `true`, will not throw errors on incompatible types, and behave more\n *  like JSON stringify would behave. Symbol and Function will be discarded.\n * @returns {Record[]}\n */\n export const serialize = (value, {json, lossy} = {}) => {\n  const _ = [];\n  return serializer(!(json || lossy), !!json, new Map, _)(value), _;\n};\n","import {deserialize} from './deserialize.js';\nimport {serialize} from './serialize.js';\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns an array of serialized Records.\n * @param {any} any a serializable value.\n * @param {{transfer?: any[], json?: boolean, lossy?: boolean}?} options an object with\n * a transfer option (ignored when polyfilled) and/or non standard fields that\n * fallback to the polyfill if present.\n * @returns {Record[]}\n */\nexport default typeof structuredClone === \"function\" ?\n  /* c8 ignore start */\n  (any, options) => (\n    options && ('json' in options || 'lossy' in options) ?\n      deserialize(serialize(any, options)) : structuredClone(any)\n  ) :\n  (any, options) => deserialize(serialize(any, options));\n  /* c8 ignore stop */\n\nexport {deserialize, serialize};\n","import { asciiAlphanumeric } from 'micromark-util-character';\nimport { encode } from 'micromark-util-encode';\n/**\n * Make a value safe for injection as a URL.\n *\n * This encodes unsafe characters with percent-encoding and skips already\n * encoded sequences (see `normalizeUri`).\n * Further unsafe characters are encoded as character references (see\n * `micromark-util-encode`).\n *\n * A regex of allowed protocols can be given, in which case the URL is\n * sanitized.\n * For example, `/^(https?|ircs?|mailto|xmpp)$/i` can be used for `a[href]`, or\n * `/^https?$/i` for `img[src]` (this is what `github.com` allows).\n * If the URL includes an unknown protocol (one not matched by `protocol`, such\n * as a dangerous example, `javascript:`), the value is ignored.\n *\n * @param {string | null | undefined} url\n *   URI to sanitize.\n * @param {RegExp | null | undefined} [protocol]\n *   Allowed protocols.\n * @returns {string}\n *   Sanitized URI.\n */\nexport function sanitizeUri(url, protocol) {\n  const value = encode(normalizeUri(url || ''));\n  if (!protocol) {\n    return value;\n  }\n  const colon = value.indexOf(':');\n  const questionMark = value.indexOf('?');\n  const numberSign = value.indexOf('#');\n  const slash = value.indexOf('/');\n  if (\n  // If there is no protocol, it’s relative.\n  colon < 0 ||\n  // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n  slash > -1 && colon > slash || questionMark > -1 && colon > questionMark || numberSign > -1 && colon > numberSign ||\n  // It is a protocol, it should be allowed.\n  protocol.test(value.slice(0, colon))) {\n    return value;\n  }\n  return '';\n}\n\n/**\n * Normalize a URL.\n *\n * Encode unsafe characters with percent-encoding, skipping already encoded\n * sequences.\n *\n * @param {string} value\n *   URI to normalize.\n * @returns {string}\n *   Normalized URI.\n */\nexport function normalizeUri(value) {\n  /** @type {Array<string>} */\n  const result = [];\n  let index = -1;\n  let start = 0;\n  let skip = 0;\n  while (++index < value.length) {\n    const code = value.charCodeAt(index);\n    /** @type {string} */\n    let replace = '';\n\n    // A correct percent encoded value.\n    if (code === 37 && asciiAlphanumeric(value.charCodeAt(index + 1)) && asciiAlphanumeric(value.charCodeAt(index + 2))) {\n      skip = 2;\n    }\n    // ASCII.\n    else if (code < 128) {\n      if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code))) {\n        replace = String.fromCharCode(code);\n      }\n    }\n    // Astral.\n    else if (code > 55_295 && code < 57_344) {\n      const next = value.charCodeAt(index + 1);\n\n      // A correct surrogate pair.\n      if (code < 56_320 && next > 56_319 && next < 57_344) {\n        replace = String.fromCharCode(code, next);\n        skip = 1;\n      }\n      // Lone surrogate.\n      else {\n        replace = \"\\uFFFD\";\n      }\n    }\n    // Unicode.\n    else {\n      replace = String.fromCharCode(code);\n    }\n    if (replace) {\n      result.push(value.slice(start, index), encodeURIComponent(replace));\n      start = index + skip + 1;\n      replace = '';\n    }\n    if (skip) {\n      index += skip;\n      skip = 0;\n    }\n  }\n  return result.join('') + value.slice(start);\n}","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('./state.js').State} State\n */\n\n/**\n * @callback FootnoteBackContentTemplate\n *   Generate content for the backreference dynamically.\n *\n *   For the following markdown:\n *\n *   ```markdown\n *   Alpha[^micromark], bravo[^micromark], and charlie[^remark].\n *\n *   [^remark]: things about remark\n *   [^micromark]: things about micromark\n *   ```\n *\n *   This function will be called with:\n *\n *   *  `0` and `0` for the backreference from `things about micromark` to\n *      `alpha`, as it is the first used definition, and the first call to it\n *   *  `0` and `1` for the backreference from `things about micromark` to\n *      `bravo`, as it is the first used definition, and the second call to it\n *   *  `1` and `0` for the backreference from `things about remark` to\n *      `charlie`, as it is the second used definition\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {Array<ElementContent> | ElementContent | string}\n *   Content for the backreference when linking back from definitions to their\n *   reference.\n *\n * @callback FootnoteBackLabelTemplate\n *   Generate a back label dynamically.\n *\n *   For the following markdown:\n *\n *   ```markdown\n *   Alpha[^micromark], bravo[^micromark], and charlie[^remark].\n *\n *   [^remark]: things about remark\n *   [^micromark]: things about micromark\n *   ```\n *\n *   This function will be called with:\n *\n *   *  `0` and `0` for the backreference from `things about micromark` to\n *      `alpha`, as it is the first used definition, and the first call to it\n *   *  `0` and `1` for the backreference from `things about micromark` to\n *      `bravo`, as it is the first used definition, and the second call to it\n *   *  `1` and `0` for the backreference from `things about remark` to\n *      `charlie`, as it is the second used definition\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Back label to use when linking back from definitions to their reference.\n */\n\nimport structuredClone from '@ungap/structured-clone'\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Generate the default content that GitHub uses on backreferences.\n *\n * @param {number} _\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {Array<ElementContent>}\n *   Content.\n */\nexport function defaultFootnoteBackContent(_, rereferenceIndex) {\n  /** @type {Array<ElementContent>} */\n  const result = [{type: 'text', value: '↩'}]\n\n  if (rereferenceIndex > 1) {\n    result.push({\n      type: 'element',\n      tagName: 'sup',\n      properties: {},\n      children: [{type: 'text', value: String(rereferenceIndex)}]\n    })\n  }\n\n  return result\n}\n\n/**\n * Generate the default label that GitHub uses on backreferences.\n *\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Label.\n */\nexport function defaultFootnoteBackLabel(referenceIndex, rereferenceIndex) {\n  return (\n    'Back to reference ' +\n    (referenceIndex + 1) +\n    (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')\n  )\n}\n\n/**\n * Generate a hast footer for called footnote definitions.\n *\n * @param {State} state\n *   Info passed around.\n * @returns {Element | undefined}\n *   `section` element or `undefined`.\n */\n// eslint-disable-next-line complexity\nexport function footer(state) {\n  const clobberPrefix =\n    typeof state.options.clobberPrefix === 'string'\n      ? state.options.clobberPrefix\n      : 'user-content-'\n  const footnoteBackContent =\n    state.options.footnoteBackContent || defaultFootnoteBackContent\n  const footnoteBackLabel =\n    state.options.footnoteBackLabel || defaultFootnoteBackLabel\n  const footnoteLabel = state.options.footnoteLabel || 'Footnotes'\n  const footnoteLabelTagName = state.options.footnoteLabelTagName || 'h2'\n  const footnoteLabelProperties = state.options.footnoteLabelProperties || {\n    className: ['sr-only']\n  }\n  /** @type {Array<ElementContent>} */\n  const listItems = []\n  let referenceIndex = -1\n\n  while (++referenceIndex < state.footnoteOrder.length) {\n    const definition = state.footnoteById.get(\n      state.footnoteOrder[referenceIndex]\n    )\n\n    if (!definition) {\n      continue\n    }\n\n    const content = state.all(definition)\n    const id = String(definition.identifier).toUpperCase()\n    const safeId = normalizeUri(id.toLowerCase())\n    let rereferenceIndex = 0\n    /** @type {Array<ElementContent>} */\n    const backReferences = []\n    const counts = state.footnoteCounts.get(id)\n\n    // eslint-disable-next-line no-unmodified-loop-condition\n    while (counts !== undefined && ++rereferenceIndex <= counts) {\n      if (backReferences.length > 0) {\n        backReferences.push({type: 'text', value: ' '})\n      }\n\n      let children =\n        typeof footnoteBackContent === 'string'\n          ? footnoteBackContent\n          : footnoteBackContent(referenceIndex, rereferenceIndex)\n\n      if (typeof children === 'string') {\n        children = {type: 'text', value: children}\n      }\n\n      backReferences.push({\n        type: 'element',\n        tagName: 'a',\n        properties: {\n          href:\n            '#' +\n            clobberPrefix +\n            'fnref-' +\n            safeId +\n            (rereferenceIndex > 1 ? '-' + rereferenceIndex : ''),\n          dataFootnoteBackref: '',\n          ariaLabel:\n            typeof footnoteBackLabel === 'string'\n              ? footnoteBackLabel\n              : footnoteBackLabel(referenceIndex, rereferenceIndex),\n          className: ['data-footnote-backref']\n        },\n        children: Array.isArray(children) ? children : [children]\n      })\n    }\n\n    const tail = content[content.length - 1]\n\n    if (tail && tail.type === 'element' && tail.tagName === 'p') {\n      const tailTail = tail.children[tail.children.length - 1]\n      if (tailTail && tailTail.type === 'text') {\n        tailTail.value += ' '\n      } else {\n        tail.children.push({type: 'text', value: ' '})\n      }\n\n      tail.children.push(...backReferences)\n    } else {\n      content.push(...backReferences)\n    }\n\n    /** @type {Element} */\n    const listItem = {\n      type: 'element',\n      tagName: 'li',\n      properties: {id: clobberPrefix + 'fn-' + safeId},\n      children: state.wrap(content, true)\n    }\n\n    state.patch(definition, listItem)\n\n    listItems.push(listItem)\n  }\n\n  if (listItems.length === 0) {\n    return\n  }\n\n  return {\n    type: 'element',\n    tagName: 'section',\n    properties: {dataFootnotes: true, className: ['footnotes']},\n    children: [\n      {\n        type: 'element',\n        tagName: footnoteLabelTagName,\n        properties: {\n          ...structuredClone(footnoteLabelProperties),\n          id: 'footnote-label'\n        },\n        children: [{type: 'text', value: footnoteLabel}]\n      },\n      {type: 'text', value: '\\n'},\n      {\n        type: 'element',\n        tagName: 'ol',\n        properties: {},\n        children: state.wrap(listItems, true)\n      },\n      {type: 'text', value: '\\n'}\n    ]\n  }\n}\n","/**\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('mdast').Nodes} Nodes\n * @typedef {import('mdast').Reference} Reference\n *\n * @typedef {import('./state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Return the content of a reference without definition as plain text.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Extract<Nodes, Reference>} node\n *   Reference node (image, link).\n * @returns {Array<ElementContent>}\n *   hast content.\n */\nexport function revert(state, node) {\n  const subtype = node.referenceType\n  let suffix = ']'\n\n  if (subtype === 'collapsed') {\n    suffix += '[]'\n  } else if (subtype === 'full') {\n    suffix += '[' + (node.label || node.identifier) + ']'\n  }\n\n  if (node.type === 'imageReference') {\n    return [{type: 'text', value: '![' + node.alt + suffix}]\n  }\n\n  const contents = state.all(node)\n  const head = contents[0]\n\n  if (head && head.type === 'text') {\n    head.value = '[' + head.value\n  } else {\n    contents.unshift({type: 'text', value: '['})\n  }\n\n  const tail = contents[contents.length - 1]\n\n  if (tail && tail.type === 'text') {\n    tail.value += suffix\n  } else {\n    contents.push({type: 'text', value: suffix})\n  }\n\n  return contents\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `listItem` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ListItem} node\n *   mdast node.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function listItem(state, node, parent) {\n  const results = state.all(node)\n  const loose = parent ? listLoose(parent) : listItemLoose(node)\n  /** @type {Properties} */\n  const properties = {}\n  /** @type {Array<ElementContent>} */\n  const children = []\n\n  if (typeof node.checked === 'boolean') {\n    const head = results[0]\n    /** @type {Element} */\n    let paragraph\n\n    if (head && head.type === 'element' && head.tagName === 'p') {\n      paragraph = head\n    } else {\n      paragraph = {type: 'element', tagName: 'p', properties: {}, children: []}\n      results.unshift(paragraph)\n    }\n\n    if (paragraph.children.length > 0) {\n      paragraph.children.unshift({type: 'text', value: ' '})\n    }\n\n    paragraph.children.unshift({\n      type: 'element',\n      tagName: 'input',\n      properties: {type: 'checkbox', checked: node.checked, disabled: true},\n      children: []\n    })\n\n    // According to github-markdown-css, this class hides bullet.\n    // See: <https://github.com/sindresorhus/github-markdown-css>.\n    properties.className = ['task-list-item']\n  }\n\n  let index = -1\n\n  while (++index < results.length) {\n    const child = results[index]\n\n    // Add eols before nodes, except if this is a loose, first paragraph.\n    if (\n      loose ||\n      index !== 0 ||\n      child.type !== 'element' ||\n      child.tagName !== 'p'\n    ) {\n      children.push({type: 'text', value: '\\n'})\n    }\n\n    if (child.type === 'element' && child.tagName === 'p' && !loose) {\n      children.push(...child.children)\n    } else {\n      children.push(child)\n    }\n  }\n\n  const tail = results[results.length - 1]\n\n  // Add a final eol.\n  if (tail && (loose || tail.type !== 'element' || tail.tagName !== 'p')) {\n    children.push({type: 'text', value: '\\n'})\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'li', properties, children}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * @param {Parents} node\n * @return {Boolean}\n */\nfunction listLoose(node) {\n  let loose = false\n  if (node.type === 'list') {\n    loose = node.spread || false\n    const children = node.children\n    let index = -1\n\n    while (!loose && ++index < children.length) {\n      loose = listItemLoose(children[index])\n    }\n  }\n\n  return loose\n}\n\n/**\n * @param {ListItem} node\n * @return {Boolean}\n */\nfunction listItemLoose(node) {\n  const spread = node.spread\n\n  return spread === null || spread === undefined\n    ? node.children.length > 1\n    : spread\n}\n","const tab = 9 /* `\\t` */\nconst space = 32 /* ` ` */\n\n/**\n * Remove initial and final spaces and tabs at the line breaks in `value`.\n * Does not trim initial and final spaces and tabs of the value itself.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Trimmed value.\n */\nexport function trimLines(value) {\n  const source = String(value)\n  const search = /\\r?\\n|\\r/g\n  let match = search.exec(source)\n  let last = 0\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (match) {\n    lines.push(\n      trimLine(source.slice(last, match.index), last > 0, true),\n      match[0]\n    )\n\n    last = match.index + match[0].length\n    match = search.exec(source)\n  }\n\n  lines.push(trimLine(source.slice(last), last > 0, false))\n\n  return lines.join('')\n}\n\n/**\n * @param {string} value\n *   Line to trim.\n * @param {boolean} start\n *   Whether to trim the start of the line.\n * @param {boolean} end\n *   Whether to trim the end of the line.\n * @returns {string}\n *   Trimmed line.\n */\nfunction trimLine(value, start, end) {\n  let startIndex = 0\n  let endIndex = value.length\n\n  if (start) {\n    let code = value.codePointAt(startIndex)\n\n    while (code === tab || code === space) {\n      startIndex++\n      code = value.codePointAt(startIndex)\n    }\n  }\n\n  if (end) {\n    let code = value.codePointAt(endIndex - 1)\n\n    while (code === tab || code === space) {\n      endIndex--\n      code = value.codePointAt(endIndex - 1)\n    }\n  }\n\n  return endIndex > startIndex ? value.slice(startIndex, endIndex) : ''\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {strikethrough} from './delete.js'\nimport {emphasis} from './emphasis.js'\nimport {footnoteReference} from './footnote-reference.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {imageReference} from './image-reference.js'\nimport {image} from './image.js'\nimport {inlineCode} from './inline-code.js'\nimport {linkReference} from './link-reference.js'\nimport {link} from './link.js'\nimport {listItem} from './list-item.js'\nimport {list} from './list.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {table} from './table.js'\nimport {tableRow} from './table-row.js'\nimport {tableCell} from './table-cell.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default handlers for nodes.\n *\n * @satisfies {import('../state.js').Handlers}\n */\nexport const handlers = {\n  blockquote,\n  break: hardBreak,\n  code,\n  delete: strikethrough,\n  emphasis,\n  footnoteReference,\n  heading,\n  html,\n  imageReference,\n  image,\n  inlineCode,\n  linkReference,\n  link,\n  listItem,\n  list,\n  paragraph,\n  // @ts-expect-error: root is different, but hard to type.\n  root,\n  strong,\n  table,\n  tableCell,\n  tableRow,\n  text,\n  thematicBreak,\n  toml: ignore,\n  yaml: ignore,\n  definition: ignore,\n  footnoteDefinition: ignore\n}\n\n// Return nothing for nodes that are ignored.\nfunction ignore() {\n  return undefined\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `blockquote` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Blockquote} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function blockquote(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'blockquote',\n    properties: {},\n    children: state.wrap(state.all(node), true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').Break} Break\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `break` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Break} node\n *   mdast node.\n * @returns {Array<Element | Text>}\n *   hast element content.\n */\nexport function hardBreak(state, node) {\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'br', properties: {}, children: []}\n  state.patch(node, result)\n  return [state.applyData(node, result), {type: 'text', value: '\\n'}]\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Code} Code\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `code` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Code} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function code(state, node) {\n  const value = node.value ? node.value + '\\n' : ''\n  /** @type {Properties} */\n  const properties = {}\n\n  if (node.lang) {\n    properties.className = ['language-' + node.lang]\n  }\n\n  // Create `<code>`.\n  /** @type {Element} */\n  let result = {\n    type: 'element',\n    tagName: 'code',\n    properties,\n    children: [{type: 'text', value}]\n  }\n\n  if (node.meta) {\n    result.data = {meta: node.meta}\n  }\n\n  state.patch(node, result)\n  result = state.applyData(node, result)\n\n  // Create `<pre>`.\n  result = {type: 'element', tagName: 'pre', properties: {}, children: [result]}\n  state.patch(node, result)\n  return result\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Delete} Delete\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `delete` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Delete} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strikethrough(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'del',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `emphasis` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Emphasis} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function emphasis(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'em',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `footnoteReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {FootnoteReference} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function footnoteReference(state, node) {\n  const clobberPrefix =\n    typeof state.options.clobberPrefix === 'string'\n      ? state.options.clobberPrefix\n      : 'user-content-'\n  const id = String(node.identifier).toUpperCase()\n  const safeId = normalizeUri(id.toLowerCase())\n  const index = state.footnoteOrder.indexOf(id)\n  /** @type {number} */\n  let counter\n\n  let reuseCounter = state.footnoteCounts.get(id)\n\n  if (reuseCounter === undefined) {\n    reuseCounter = 0\n    state.footnoteOrder.push(id)\n    counter = state.footnoteOrder.length\n  } else {\n    counter = index + 1\n  }\n\n  reuseCounter += 1\n  state.footnoteCounts.set(id, reuseCounter)\n\n  /** @type {Element} */\n  const link = {\n    type: 'element',\n    tagName: 'a',\n    properties: {\n      href: '#' + clobberPrefix + 'fn-' + safeId,\n      id:\n        clobberPrefix +\n        'fnref-' +\n        safeId +\n        (reuseCounter > 1 ? '-' + reuseCounter : ''),\n      dataFootnoteRef: true,\n      ariaDescribedBy: ['footnote-label']\n    },\n    children: [{type: 'text', value: String(counter)}]\n  }\n  state.patch(node, link)\n\n  /** @type {Element} */\n  const sup = {\n    type: 'element',\n    tagName: 'sup',\n    properties: {},\n    children: [link]\n  }\n  state.patch(node, sup)\n  return state.applyData(node, sup)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `heading` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Heading} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function heading(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'h' + node.depth,\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Html} Html\n * @typedef {import('../state.js').State} State\n * @typedef {import('../../index.js').Raw} Raw\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `html` node into hast (`raw` node in dangerous mode, otherwise\n * nothing).\n *\n * @param {State} state\n *   Info passed around.\n * @param {Html} node\n *   mdast node.\n * @returns {Element | Raw | undefined}\n *   hast node.\n */\nexport function html(state, node) {\n  if (state.options.allowDangerousHtml) {\n    /** @type {Raw} */\n    const result = {type: 'raw', value: node.value}\n    state.patch(node, result)\n    return state.applyData(node, result)\n  }\n\n  return undefined\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `imageReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ImageReference} node\n *   mdast node.\n * @returns {Array<ElementContent> | ElementContent}\n *   hast node.\n */\nexport function imageReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const definition = state.definitionById.get(id)\n\n  if (!definition) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(definition.url || ''), alt: node.alt}\n\n  if (definition.title !== null && definition.title !== undefined) {\n    properties.title = definition.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Image} Image\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `image` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Image} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function image(state, node) {\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(node.url)}\n\n  if (node.alt !== null && node.alt !== undefined) {\n    properties.alt = node.alt\n  }\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `inlineCode` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {InlineCode} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function inlineCode(state, node) {\n  /** @type {Text} */\n  const text = {type: 'text', value: node.value.replace(/\\r?\\n|\\r/g, ' ')}\n  state.patch(node, text)\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'code',\n    properties: {},\n    children: [text]\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `linkReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {LinkReference} node\n *   mdast node.\n * @returns {Array<ElementContent> | ElementContent}\n *   hast node.\n */\nexport function linkReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const definition = state.definitionById.get(id)\n\n  if (!definition) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(definition.url || '')}\n\n  if (definition.title !== null && definition.title !== undefined) {\n    properties.title = definition.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `link` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Link} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function link(state, node) {\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(node.url)}\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').List} List\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `list` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {List} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function list(state, node) {\n  /** @type {Properties} */\n  const properties = {}\n  const results = state.all(node)\n  let index = -1\n\n  if (typeof node.start === 'number' && node.start !== 1) {\n    properties.start = node.start\n  }\n\n  // Like GitHub, add a class for custom styling.\n  while (++index < results.length) {\n    const child = results[index]\n\n    if (\n      child.type === 'element' &&\n      child.tagName === 'li' &&\n      child.properties &&\n      Array.isArray(child.properties.className) &&\n      child.properties.className.includes('task-list-item')\n    ) {\n      properties.className = ['contains-task-list']\n      break\n    }\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: node.ordered ? 'ol' : 'ul',\n    properties,\n    children: state.wrap(results, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `paragraph` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Paragraph} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function paragraph(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'p',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Parents} HastParents\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `root` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastRoot} node\n *   mdast node.\n * @returns {HastParents}\n *   hast node.\n */\nexport function root(state, node) {\n  /** @type {HastRoot} */\n  const result = {type: 'root', children: state.wrap(state.all(node))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `strong` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Strong} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strong(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'strong',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Table} Table\n * @typedef {import('../state.js').State} State\n */\n\nimport {pointEnd, pointStart} from 'unist-util-position'\n\n/**\n * Turn an mdast `table` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Table} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function table(state, node) {\n  const rows = state.all(node)\n  const firstRow = rows.shift()\n  /** @type {Array<Element>} */\n  const tableContent = []\n\n  if (firstRow) {\n    /** @type {Element} */\n    const head = {\n      type: 'element',\n      tagName: 'thead',\n      properties: {},\n      children: state.wrap([firstRow], true)\n    }\n    state.patch(node.children[0], head)\n    tableContent.push(head)\n  }\n\n  if (rows.length > 0) {\n    /** @type {Element} */\n    const body = {\n      type: 'element',\n      tagName: 'tbody',\n      properties: {},\n      children: state.wrap(rows, true)\n    }\n\n    const start = pointStart(node.children[1])\n    const end = pointEnd(node.children[node.children.length - 1])\n    if (start && end) body.position = {start, end}\n    tableContent.push(body)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'table',\n    properties: {},\n    children: state.wrap(tableContent, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `tableCell` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableCell} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function tableCell(state, node) {\n  // Note: this function is normally not called: see `table-row` for how rows\n  // and their cells are compiled.\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'td', // Assume body cell.\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').TableRow} TableRow\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `tableRow` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableRow} node\n *   mdast node.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function tableRow(state, node, parent) {\n  const siblings = parent ? parent.children : undefined\n  // Generate a body row when without parent.\n  const rowIndex = siblings ? siblings.indexOf(node) : 1\n  const tagName = rowIndex === 0 ? 'th' : 'td'\n  // To do: option to use `style`?\n  const align = parent && parent.type === 'table' ? parent.align : undefined\n  const length = align ? align.length : node.children.length\n  let cellIndex = -1\n  /** @type {Array<ElementContent>} */\n  const cells = []\n\n  while (++cellIndex < length) {\n    // Note: can also be undefined.\n    const cell = node.children[cellIndex]\n    /** @type {Properties} */\n    const properties = {}\n    const alignValue = align ? align[cellIndex] : undefined\n\n    if (alignValue) {\n      properties.align = alignValue\n    }\n\n    /** @type {Element} */\n    let result = {type: 'element', tagName, properties, children: []}\n\n    if (cell) {\n      result.children = state.all(cell)\n      state.patch(cell, result)\n      result = state.applyData(cell, result)\n    }\n\n    cells.push(result)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'tr',\n    properties: {},\n    children: state.wrap(cells, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').Text} HastText\n * @typedef {import('mdast').Text} MdastText\n * @typedef {import('../state.js').State} State\n */\n\nimport {trimLines} from 'trim-lines'\n\n/**\n * Turn an mdast `text` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastText} node\n *   mdast node.\n * @returns {HastElement | HastText}\n *   hast node.\n */\nexport function text(state, node) {\n  /** @type {HastText} */\n  const result = {type: 'text', value: trimLines(String(node.value))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `thematicBreak` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ThematicBreak} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function thematicBreak(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'hr',\n    properties: {},\n    children: []\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').ElementContent} HastElementContent\n * @typedef {import('hast').Nodes} HastNodes\n * @typedef {import('hast').Properties} HastProperties\n * @typedef {import('hast').RootContent} HastRootContent\n * @typedef {import('hast').Text} HastText\n *\n * @typedef {import('mdast').Definition} MdastDefinition\n * @typedef {import('mdast').FootnoteDefinition} MdastFootnoteDefinition\n * @typedef {import('mdast').Nodes} MdastNodes\n * @typedef {import('mdast').Parents} MdastParents\n *\n * @typedef {import('vfile').VFile} VFile\n *\n * @typedef {import('./footer.js').FootnoteBackContentTemplate} FootnoteBackContentTemplate\n * @typedef {import('./footer.js').FootnoteBackLabelTemplate} FootnoteBackLabelTemplate\n */\n\n/**\n * @callback Handler\n *   Handle a node.\n * @param {State} state\n *   Info passed around.\n * @param {any} node\n *   mdast node to handle.\n * @param {MdastParents | undefined} parent\n *   Parent of `node`.\n * @returns {Array<HastElementContent> | HastElementContent | undefined}\n *   hast node.\n *\n * @typedef {Partial<Record<MdastNodes['type'], Handler>>} Handlers\n *   Handle nodes.\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [allowDangerousHtml=false]\n *   Whether to persist raw HTML in markdown in the hast tree (default:\n *   `false`).\n * @property {string | null | undefined} [clobberPrefix='user-content-']\n *   Prefix to use before the `id` property on footnotes to prevent them from\n *   *clobbering* (default: `'user-content-'`).\n *\n *   Pass `''` for trusted markdown and when you are careful with\n *   polyfilling.\n *   You could pass a different prefix.\n *\n *   DOM clobbering is this:\n *\n *   ```html\n *   <p id=\"x\"></p>\n *   <script>alert(x) // `x` now refers to the `p#x` DOM element</script>\n *   ```\n *\n *   The above example shows that elements are made available by browsers, by\n *   their ID, on the `window` object.\n *   This is a security risk because you might be expecting some other variable\n *   at that place.\n *   It can also break polyfills.\n *   Using a prefix solves these problems.\n * @property {VFile | null | undefined} [file]\n *   Corresponding virtual file representing the input document (optional).\n * @property {FootnoteBackContentTemplate | string | null | undefined} [footnoteBackContent]\n *   Content of the backreference back to references (default: `defaultFootnoteBackContent`).\n *\n *   The default value is:\n *\n *   ```js\n *   function defaultFootnoteBackContent(_, rereferenceIndex) {\n *     const result = [{type: 'text', value: '↩'}]\n *\n *     if (rereferenceIndex > 1) {\n *       result.push({\n *         type: 'element',\n *         tagName: 'sup',\n *         properties: {},\n *         children: [{type: 'text', value: String(rereferenceIndex)}]\n *       })\n *     }\n *\n *     return result\n *   }\n *   ```\n *\n *   This content is used in the `a` element of each backreference (the `↩`\n *   links).\n * @property {FootnoteBackLabelTemplate | string | null | undefined} [footnoteBackLabel]\n *   Label to describe the backreference back to references (default:\n *   `defaultFootnoteBackLabel`).\n *\n *   The default value is:\n *\n *   ```js\n *   function defaultFootnoteBackLabel(referenceIndex, rereferenceIndex) {\n *    return (\n *      'Back to reference ' +\n *      (referenceIndex + 1) +\n *      (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')\n *    )\n *   }\n *   ```\n *\n *   Change it when the markdown is not in English.\n *\n *   This label is used in the `ariaLabel` property on each backreference\n *   (the `↩` links).\n *   It affects users of assistive technology.\n * @property {string | null | undefined} [footnoteLabel='Footnotes']\n *   Textual label to use for the footnotes section (default: `'Footnotes'`).\n *\n *   Change it when the markdown is not in English.\n *\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass different properties with the `footnoteLabelProperties` option.\n * @property {HastProperties | null | undefined} [footnoteLabelProperties={className: ['sr-only']}]\n *   Properties to use on the footnote label (default: `{className:\n *   ['sr-only']}`).\n *\n *   Change it to show the label and add other properties.\n *\n *   This label is typically hidden visually (assuming an `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass an empty string.\n *   You can also add different properties.\n *\n *   > **Note**: `id: 'footnote-label'` is always added, because footnote\n *   > calls use it with `aria-describedby` to provide an accessible label.\n * @property {string | null | undefined} [footnoteLabelTagName='h2']\n *   HTML tag name to use for the footnote label element (default: `'h2'`).\n *\n *   Change it to match your document structure.\n *\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass different properties with the `footnoteLabelProperties` option.\n * @property {Handlers | null | undefined} [handlers]\n *   Extra handlers for nodes (optional).\n * @property {Array<MdastNodes['type']> | null | undefined} [passThrough]\n *   List of custom mdast node types to pass through (keep) in hast (note that\n *   the node itself is passed, but eventual children are transformed)\n *   (optional).\n * @property {Handler | null | undefined} [unknownHandler]\n *   Handler for all unknown nodes (optional).\n *\n * @typedef State\n *   Info passed around.\n * @property {(node: MdastNodes) => Array<HastElementContent>} all\n *   Transform the children of an mdast parent to hast.\n * @property {<Type extends HastNodes>(from: MdastNodes, to: Type) => HastElement | Type} applyData\n *   Honor the `data` of `from`, and generate an element instead of `node`.\n * @property {Map<string, MdastDefinition>} definitionById\n *   Definitions by their identifier.\n * @property {Map<string, MdastFootnoteDefinition>} footnoteById\n *   Footnote definitions by their identifier.\n * @property {Map<string, number>} footnoteCounts\n *   Counts for how often the same footnote was called.\n * @property {Array<string>} footnoteOrder\n *   Identifiers of order when footnote calls first appear in tree order.\n * @property {Handlers} handlers\n *   Applied handlers.\n * @property {(node: MdastNodes, parent: MdastParents | undefined) => Array<HastElementContent> | HastElementContent | undefined} one\n *   Transform an mdast node to hast.\n * @property {Options} options\n *   Configuration.\n * @property {(from: MdastNodes, node: HastNodes) => undefined} patch\n *   Copy a node’s positional info.\n * @property {<Type extends HastRootContent>(nodes: Array<Type>, loose?: boolean | undefined) => Array<HastText | Type>} wrap\n *   Wrap `nodes` with line endings between each node, adds initial/final line endings when `loose`.\n */\n\nimport structuredClone from '@ungap/structured-clone'\nimport {visit} from 'unist-util-visit'\nimport {position} from 'unist-util-position'\nimport {handlers as defaultHandlers} from './handlers/index.js'\n\nconst own = {}.hasOwnProperty\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Create `state` from an mdast tree.\n *\n * @param {MdastNodes} tree\n *   mdast node to transform.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {State}\n *   `state` function.\n */\nexport function createState(tree, options) {\n  const settings = options || emptyOptions\n  /** @type {Map<string, MdastDefinition>} */\n  const definitionById = new Map()\n  /** @type {Map<string, MdastFootnoteDefinition>} */\n  const footnoteById = new Map()\n  /** @type {Map<string, number>} */\n  const footnoteCounts = new Map()\n  /** @type {Handlers} */\n  // @ts-expect-error: the root handler returns a root.\n  // Hard to type.\n  const handlers = {...defaultHandlers, ...settings.handlers}\n\n  /** @type {State} */\n  const state = {\n    all,\n    applyData,\n    definitionById,\n    footnoteById,\n    footnoteCounts,\n    footnoteOrder: [],\n    handlers,\n    one,\n    options: settings,\n    patch,\n    wrap\n  }\n\n  visit(tree, function (node) {\n    if (node.type === 'definition' || node.type === 'footnoteDefinition') {\n      const map = node.type === 'definition' ? definitionById : footnoteById\n      const id = String(node.identifier).toUpperCase()\n\n      // Mimick CM behavior of link definitions.\n      // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/9032189/lib/index.js#L20-L21>.\n      if (!map.has(id)) {\n        // @ts-expect-error: node type matches map.\n        map.set(id, node)\n      }\n    }\n  })\n\n  return state\n\n  /**\n   * Transform an mdast node into a hast node.\n   *\n   * @param {MdastNodes} node\n   *   mdast node.\n   * @param {MdastParents | undefined} [parent]\n   *   Parent of `node`.\n   * @returns {Array<HastElementContent> | HastElementContent | undefined}\n   *   Resulting hast node.\n   */\n  function one(node, parent) {\n    const type = node.type\n    const handle = state.handlers[type]\n\n    if (own.call(state.handlers, type) && handle) {\n      return handle(state, node, parent)\n    }\n\n    if (state.options.passThrough && state.options.passThrough.includes(type)) {\n      if ('children' in node) {\n        const {children, ...shallow} = node\n        const result = structuredClone(shallow)\n        // @ts-expect-error: TS doesn’t understand…\n        result.children = state.all(node)\n        // @ts-expect-error: TS doesn’t understand…\n        return result\n      }\n\n      // @ts-expect-error: it’s custom.\n      return structuredClone(node)\n    }\n\n    const unknown = state.options.unknownHandler || defaultUnknownHandler\n\n    return unknown(state, node, parent)\n  }\n\n  /**\n   * Transform the children of an mdast node into hast nodes.\n   *\n   * @param {MdastNodes} parent\n   *   mdast node to compile\n   * @returns {Array<HastElementContent>}\n   *   Resulting hast nodes.\n   */\n  function all(parent) {\n    /** @type {Array<HastElementContent>} */\n    const values = []\n\n    if ('children' in parent) {\n      const nodes = parent.children\n      let index = -1\n      while (++index < nodes.length) {\n        const result = state.one(nodes[index], parent)\n\n        // To do: see if we van clean this? Can we merge texts?\n        if (result) {\n          if (index && nodes[index - 1].type === 'break') {\n            if (!Array.isArray(result) && result.type === 'text') {\n              result.value = trimMarkdownSpaceStart(result.value)\n            }\n\n            if (!Array.isArray(result) && result.type === 'element') {\n              const head = result.children[0]\n\n              if (head && head.type === 'text') {\n                head.value = trimMarkdownSpaceStart(head.value)\n              }\n            }\n          }\n\n          if (Array.isArray(result)) {\n            values.push(...result)\n          } else {\n            values.push(result)\n          }\n        }\n      }\n    }\n\n    return values\n  }\n}\n\n/**\n * Copy a node’s positional info.\n *\n * @param {MdastNodes} from\n *   mdast node to copy from.\n * @param {HastNodes} to\n *   hast node to copy into.\n * @returns {undefined}\n *   Nothing.\n */\nfunction patch(from, to) {\n  if (from.position) to.position = position(from)\n}\n\n/**\n * Honor the `data` of `from` and maybe generate an element instead of `to`.\n *\n * @template {HastNodes} Type\n *   Node type.\n * @param {MdastNodes} from\n *   mdast node to use data from.\n * @param {Type} to\n *   hast node to change.\n * @returns {HastElement | Type}\n *   Nothing.\n */\nfunction applyData(from, to) {\n  /** @type {HastElement | Type} */\n  let result = to\n\n  // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n  if (from && from.data) {\n    const hName = from.data.hName\n    const hChildren = from.data.hChildren\n    const hProperties = from.data.hProperties\n\n    if (typeof hName === 'string') {\n      // Transforming the node resulted in an element with a different name\n      // than wanted:\n      if (result.type === 'element') {\n        result.tagName = hName\n      }\n      // Transforming the node resulted in a non-element, which happens for\n      // raw, text, and root nodes (unless custom handlers are passed).\n      // The intent of `hName` is to create an element, but likely also to keep\n      // the content around (otherwise: pass `hChildren`).\n      else {\n        /** @type {Array<HastElementContent>} */\n        // @ts-expect-error: assume no doctypes in `root`.\n        const children = 'children' in result ? result.children : [result]\n        result = {type: 'element', tagName: hName, properties: {}, children}\n      }\n    }\n\n    if (result.type === 'element' && hProperties) {\n      Object.assign(result.properties, structuredClone(hProperties))\n    }\n\n    if (\n      'children' in result &&\n      result.children &&\n      hChildren !== null &&\n      hChildren !== undefined\n    ) {\n      result.children = hChildren\n    }\n  }\n\n  return result\n}\n\n/**\n * Transform an unknown node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} node\n *   Unknown mdast node.\n * @returns {HastElement | HastText}\n *   Resulting hast node.\n */\nfunction defaultUnknownHandler(state, node) {\n  const data = node.data || {}\n  /** @type {HastElement | HastText} */\n  const result =\n    'value' in node &&\n    !(own.call(data, 'hProperties') || own.call(data, 'hChildren'))\n      ? {type: 'text', value: node.value}\n      : {\n          type: 'element',\n          tagName: 'div',\n          properties: {},\n          children: state.all(node)\n        }\n\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * Wrap `nodes` with line endings between each node.\n *\n * @template {HastRootContent} Type\n *   Node type.\n * @param {Array<Type>} nodes\n *   List of nodes to wrap.\n * @param {boolean | undefined} [loose=false]\n *   Whether to add line endings at start and end (default: `false`).\n * @returns {Array<HastText | Type>}\n *   Wrapped nodes.\n */\nexport function wrap(nodes, loose) {\n  /** @type {Array<HastText | Type>} */\n  const result = []\n  let index = -1\n\n  if (loose) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  while (++index < nodes.length) {\n    if (index) result.push({type: 'text', value: '\\n'})\n    result.push(nodes[index])\n  }\n\n  if (loose && nodes.length > 0) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  return result\n}\n\n/**\n * Trim spaces and tabs at the start of `value`.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Result.\n */\nfunction trimMarkdownSpaceStart(value) {\n  let index = 0\n  let code = value.charCodeAt(index)\n\n  while (code === 9 || code === 32) {\n    index++\n    code = value.charCodeAt(index)\n  }\n\n  return value.slice(index)\n}\n","/**\n * @typedef {import('hast').Nodes} HastNodes\n * @typedef {import('mdast').Nodes} MdastNodes\n * @typedef {import('./state.js').Options} Options\n */\n\nimport {ok as assert} from 'devlop'\nimport {footer} from './footer.js'\nimport {createState} from './state.js'\n\n/**\n * Transform mdast to hast.\n *\n * ##### Notes\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most utilities ignore `raw` nodes but two notable ones don’t:\n *\n * *   `hast-util-to-html` also has an option `allowDangerousHtml` which will\n *     output the raw HTML.\n *     This is typically discouraged as noted by the option name but is useful\n *     if you completely trust authors\n * *   `hast-util-raw` can handle the raw embedded HTML strings by parsing them\n *     into standard hast nodes (`element`, `text`, etc).\n *     This is a heavy task as it needs a full HTML parser, but it is the only\n *     way to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark, which we follow by default.\n * They are supported by GitHub, so footnotes can be enabled in markdown with\n * `mdast-util-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes, which is hidden for sighted users but shown to\n * assistive technology.\n * When your page is not in English, you must define translated values.\n *\n * Back references use ARIA attributes, but the section label itself uses a\n * heading that is hidden with an `sr-only` class.\n * To show it to sighted users, define different attributes in\n * `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem, as it links footnote calls to footnote\n * definitions on the page through `id` attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * Example: headings (DOM clobbering) in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * *   when the node has a `value` (and doesn’t have `data.hName`,\n *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\n *     node\n * *   otherwise, create a `<div>` element (which could be changed with\n *     `data.hName`), with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @param {MdastNodes} tree\n *   mdast tree.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {HastNodes}\n *   hast tree.\n */\nexport function toHast(tree, options) {\n  const state = createState(tree, options)\n  const node = state.one(tree, undefined)\n  const foot = footer(state)\n  /** @type {HastNodes} */\n  const result = Array.isArray(node)\n    ? {type: 'root', children: node}\n    : node || {type: 'root', children: []}\n\n  if (foot) {\n    // If there’s a footer, there were definitions, meaning block\n    // content.\n    // So `result` is a parent node.\n    assert('children' in result)\n    result.children.push({type: 'text', value: '\\n'}, foot)\n  }\n\n  return result\n}\n","/**\n * @import {Root as HastRoot} from 'hast'\n * @import {Root as MdastRoot} from 'mdast'\n * @import {Options as ToHastOptions} from 'mdast-util-to-hast'\n * @import {Processor} from 'unified'\n * @import {VFile} from 'vfile'\n */\n\n/**\n * @typedef {Omit<ToHastOptions, 'file'>} Options\n *\n * @callback TransformBridge\n *   Bridge-mode.\n *\n *   Runs the destination with the new hast tree.\n *   Discards result.\n * @param {MdastRoot} tree\n *   Tree.\n * @param {VFile} file\n *   File.\n * @returns {Promise<undefined>}\n *   Nothing.\n *\n * @callback TransformMutate\n *  Mutate-mode.\n *\n *  Further transformers run on the hast tree.\n * @param {MdastRoot} tree\n *   Tree.\n * @param {VFile} file\n *   File.\n * @returns {HastRoot}\n *   Tree (hast).\n */\n\nimport {toHast} from 'mdast-util-to-hast'\n\n/**\n * Turn markdown into HTML.\n *\n * ##### Notes\n *\n * ###### Signature\n *\n * * if a processor is given,\n *   runs the (rehype) plugins used on it with a hast tree,\n *   then discards the result (*bridge mode*)\n * * otherwise,\n *   returns a hast tree,\n *   the plugins used after `remarkRehype` are rehype plugins (*mutate mode*)\n *\n * > 👉 **Note**:\n * > It’s highly unlikely that you want to pass a `processor`.\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most plugins ignore `raw` nodes but two notable ones don’t:\n *\n * * `rehype-stringify` also has an option `allowDangerousHtml` which will\n *   output the raw HTML.\n *   This is typically discouraged as noted by the option name but is useful if\n *   you completely trust authors\n * * `rehype-raw` can handle the raw embedded HTML strings by parsing them\n *   into standard hast nodes (`element`, `text`, etc);\n *   this is a heavy task as it needs a full HTML parser,\n *   but it is the only way to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark,\n * which we follow by default.\n * They are supported by GitHub,\n * so footnotes can be enabled in markdown with `remark-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes,\n * which is hidden for sighted users but shown to assistive technology.\n * When your page is not in English,\n * you must define translated values.\n *\n * Back references use ARIA attributes,\n * but the section label itself uses a heading that is hidden with an\n * `sr-only` class.\n * To show it to sighted users,\n * define different attributes in `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem,\n * as it links footnote calls to footnote definitions on the page through `id`\n * attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * *Example: headings (DOM clobbering)* in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * * when the node has a `value`\n *   (and doesn’t have `data.hName`, `data.hProperties`, or `data.hChildren`,\n *   see later),\n *   create a hast `text` node\n * * otherwise,\n *   create a `<div>` element (which could be changed with `data.hName`),\n *   with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @overload\n * @param {Processor} processor\n * @param {Readonly<Options> | null | undefined} [options]\n * @returns {TransformBridge}\n *\n * @overload\n * @param {Readonly<Options> | null | undefined} [options]\n * @returns {TransformMutate}\n *\n * @overload\n * @param {Readonly<Options> | Processor | null | undefined} [destination]\n * @param {Readonly<Options> | null | undefined} [options]\n * @returns {TransformBridge | TransformMutate}\n *\n * @param {Readonly<Options> | Processor | null | undefined} [destination]\n *   Processor or configuration (optional).\n * @param {Readonly<Options> | null | undefined} [options]\n *   When a processor was given,\n *   configuration (optional).\n * @returns {TransformBridge | TransformMutate}\n *   Transform.\n */\nexport default function remarkRehype(destination, options) {\n  if (destination && 'run' in destination) {\n    /**\n     * @type {TransformBridge}\n     */\n    return async function (tree, file) {\n      // Cast because root in -> root out.\n      const hastTree = /** @type {HastRoot} */ (\n        toHast(tree, {file, ...options})\n      )\n      await destination.run(hastTree, file)\n    }\n  }\n\n  /**\n   * @type {TransformMutate}\n   */\n  return function (tree, file) {\n    // Cast because root in -> root out.\n    // To do: in the future, disallow ` || options` fallback.\n    // With `unified-engine`, `destination` can be `undefined` but\n    // `options` will be the file set.\n    // We should not pass that as `options`.\n    return /** @type {HastRoot} */ (\n      toHast(tree, {file, ...(destination || options)})\n    )\n  }\n}\n","/**\n * Throw a given error.\n *\n * @param {Error|null|undefined} [error]\n *   Maybe error.\n * @returns {asserts error is null|undefined}\n */\nexport function bail(error) {\n  if (error) {\n    throw error\n  }\n}\n","export default function isPlainObject(value) {\n\tif (typeof value !== 'object' || value === null) {\n\t\treturn false;\n\t}\n\n\tconst prototype = Object.getPrototypeOf(value);\n\treturn (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);\n}\n","// To do: remove `void`s\n// To do: remove `null` from output of our APIs, allow it as user APIs.\n\n/**\n * @typedef {(error?: Error | null | undefined, ...output: Array<any>) => void} Callback\n *   Callback.\n *\n * @typedef {(...input: Array<any>) => any} Middleware\n *   Ware.\n *\n * @typedef Pipeline\n *   Pipeline.\n * @property {Run} run\n *   Run the pipeline.\n * @property {Use} use\n *   Add middleware.\n *\n * @typedef {(...input: Array<any>) => void} Run\n *   Call all middleware.\n *\n *   Calls `done` on completion with either an error or the output of the\n *   last middleware.\n *\n *   > 👉 **Note**: as the length of input defines whether async functions get a\n *   > `next` function,\n *   > it’s recommended to keep `input` at one value normally.\n\n *\n * @typedef {(fn: Middleware) => Pipeline} Use\n *   Add middleware.\n */\n\n/**\n * Create new middleware.\n *\n * @returns {Pipeline}\n *   Pipeline.\n */\nexport function trough() {\n  /** @type {Array<Middleware>} */\n  const fns = []\n  /** @type {Pipeline} */\n  const pipeline = {run, use}\n\n  return pipeline\n\n  /** @type {Run} */\n  function run(...values) {\n    let middlewareIndex = -1\n    /** @type {Callback} */\n    const callback = values.pop()\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('Expected function as last argument, not ' + callback)\n    }\n\n    next(null, ...values)\n\n    /**\n     * Run the next `fn`, or we’re done.\n     *\n     * @param {Error | null | undefined} error\n     * @param {Array<any>} output\n     */\n    function next(error, ...output) {\n      const fn = fns[++middlewareIndex]\n      let index = -1\n\n      if (error) {\n        callback(error)\n        return\n      }\n\n      // Copy non-nullish input into values.\n      while (++index < values.length) {\n        if (output[index] === null || output[index] === undefined) {\n          output[index] = values[index]\n        }\n      }\n\n      // Save the newly created `output` for the next call.\n      values = output\n\n      // Next or done.\n      if (fn) {\n        wrap(fn, next)(...output)\n      } else {\n        callback(null, ...output)\n      }\n    }\n  }\n\n  /** @type {Use} */\n  function use(middelware) {\n    if (typeof middelware !== 'function') {\n      throw new TypeError(\n        'Expected `middelware` to be a function, not ' + middelware\n      )\n    }\n\n    fns.push(middelware)\n    return pipeline\n  }\n}\n\n/**\n * Wrap `middleware` into a uniform interface.\n *\n * You can pass all input to the resulting function.\n * `callback` is then called with the output of `middleware`.\n *\n * If `middleware` accepts more arguments than the later given in input,\n * an extra `done` function is passed to it after that input,\n * which must be called by `middleware`.\n *\n * The first value in `input` is the main input value.\n * All other input values are the rest input values.\n * The values given to `callback` are the input values,\n * merged with every non-nullish output value.\n *\n * * if `middleware` throws an error,\n *   returns a promise that is rejected,\n *   or calls the given `done` function with an error,\n *   `callback` is called with that error\n * * if `middleware` returns a value or returns a promise that is resolved,\n *   that value is the main output value\n * * if `middleware` calls `done`,\n *   all non-nullish values except for the first one (the error) overwrite the\n *   output values\n *\n * @param {Middleware} middleware\n *   Function to wrap.\n * @param {Callback} callback\n *   Callback called with the output of `middleware`.\n * @returns {Run}\n *   Wrapped middleware.\n */\nexport function wrap(middleware, callback) {\n  /** @type {boolean} */\n  let called\n\n  return wrapped\n\n  /**\n   * Call `middleware`.\n   * @this {any}\n   * @param {Array<any>} parameters\n   * @returns {void}\n   */\n  function wrapped(...parameters) {\n    const fnExpectsCallback = middleware.length > parameters.length\n    /** @type {any} */\n    let result\n\n    if (fnExpectsCallback) {\n      parameters.push(done)\n    }\n\n    try {\n      result = middleware.apply(this, parameters)\n    } catch (error) {\n      const exception = /** @type {Error} */ (error)\n\n      // Well, this is quite the pickle.\n      // `middleware` received a callback and called it synchronously, but that\n      // threw an error.\n      // The only thing left to do is to throw the thing instead.\n      if (fnExpectsCallback && called) {\n        throw exception\n      }\n\n      return done(exception)\n    }\n\n    if (!fnExpectsCallback) {\n      if (result && result.then && typeof result.then === 'function') {\n        result.then(then, done)\n      } else if (result instanceof Error) {\n        done(result)\n      } else {\n        then(result)\n      }\n    }\n  }\n\n  /**\n   * Call `callback`, only once.\n   *\n   * @type {Callback}\n   */\n  function done(error, ...output) {\n    if (!called) {\n      called = true\n      callback(error, ...output)\n    }\n  }\n\n  /**\n   * Call `done` with one value.\n   *\n   * @param {any} [value]\n   */\n  function then(value) {\n    done(null, value)\n  }\n}\n","// A derivative work based on:\n// <https://github.com/browserify/path-browserify>.\n// Which is licensed:\n//\n// MIT License\n//\n// Copyright (c) 2013 James Halliday\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\n// this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n// the Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A derivative work based on:\n//\n// Parts of that are extracted from Node’s internal `path` module:\n// <https://github.com/nodejs/node/blob/master/lib/path.js>.\n// Which is licensed:\n//\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nexport const minpath = {basename, dirname, extname, join, sep: '/'}\n\n/* eslint-disable max-depth, complexity */\n\n/**\n * Get the basename from a path.\n *\n * @param {string} path\n *   File path.\n * @param {string | null | undefined} [extname]\n *   Extension to strip.\n * @returns {string}\n *   Stem or basename.\n */\nfunction basename(path, extname) {\n  if (extname !== undefined && typeof extname !== 'string') {\n    throw new TypeError('\"ext\" argument must be a string')\n  }\n\n  assertPath(path)\n  let start = 0\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let seenNonSlash\n\n  if (\n    extname === undefined ||\n    extname.length === 0 ||\n    extname.length > path.length\n  ) {\n    while (index--) {\n      if (path.codePointAt(index) === 47 /* `/` */) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now.\n        if (seenNonSlash) {\n          start = index + 1\n          break\n        }\n      } else if (end < 0) {\n        // We saw the first non-path separator, mark this as the end of our\n        // path component.\n        seenNonSlash = true\n        end = index + 1\n      }\n    }\n\n    return end < 0 ? '' : path.slice(start, end)\n  }\n\n  if (extname === path) {\n    return ''\n  }\n\n  let firstNonSlashEnd = -1\n  let extnameIndex = extname.length - 1\n\n  while (index--) {\n    if (path.codePointAt(index) === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (seenNonSlash) {\n        start = index + 1\n        break\n      }\n    } else {\n      if (firstNonSlashEnd < 0) {\n        // We saw the first non-path separator, remember this index in case\n        // we need it if the extension ends up not matching.\n        seenNonSlash = true\n        firstNonSlashEnd = index + 1\n      }\n\n      if (extnameIndex > -1) {\n        // Try to match the explicit extension.\n        if (path.codePointAt(index) === extname.codePointAt(extnameIndex--)) {\n          if (extnameIndex < 0) {\n            // We matched the extension, so mark this as the end of our path\n            // component\n            end = index\n          }\n        } else {\n          // Extension does not match, so our result is the entire path\n          // component\n          extnameIndex = -1\n          end = firstNonSlashEnd\n        }\n      }\n    }\n  }\n\n  if (start === end) {\n    end = firstNonSlashEnd\n  } else if (end < 0) {\n    end = path.length\n  }\n\n  return path.slice(start, end)\n}\n\n/**\n * Get the dirname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\nfunction dirname(path) {\n  assertPath(path)\n\n  if (path.length === 0) {\n    return '.'\n  }\n\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  // Prefix `--` is important to not run on `0`.\n  while (--index) {\n    if (path.codePointAt(index) === 47 /* `/` */) {\n      if (unmatchedSlash) {\n        end = index\n        break\n      }\n    } else if (!unmatchedSlash) {\n      // We saw the first non-path separator\n      unmatchedSlash = true\n    }\n  }\n\n  return end < 0\n    ? path.codePointAt(0) === 47 /* `/` */\n      ? '/'\n      : '.'\n    : end === 1 && path.codePointAt(0) === 47 /* `/` */\n      ? '//'\n      : path.slice(0, end)\n}\n\n/**\n * Get an extname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   Extname.\n */\nfunction extname(path) {\n  assertPath(path)\n\n  let index = path.length\n\n  let end = -1\n  let startPart = 0\n  let startDot = -1\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find.\n  let preDotState = 0\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  while (index--) {\n    const code = path.codePointAt(index)\n\n    if (code === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (unmatchedSlash) {\n        startPart = index + 1\n        break\n      }\n\n      continue\n    }\n\n    if (end < 0) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension.\n      unmatchedSlash = true\n      end = index + 1\n    }\n\n    if (code === 46 /* `.` */) {\n      // If this is our first dot, mark it as the start of our extension.\n      if (startDot < 0) {\n        startDot = index\n      } else if (preDotState !== 1) {\n        preDotState = 1\n      }\n    } else if (startDot > -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension.\n      preDotState = -1\n    }\n  }\n\n  if (\n    startDot < 0 ||\n    end < 0 ||\n    // We saw a non-dot character immediately before the dot.\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly `..`.\n    (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)\n  ) {\n    return ''\n  }\n\n  return path.slice(startDot, end)\n}\n\n/**\n * Join segments from a path.\n *\n * @param {Array<string>} segments\n *   Path segments.\n * @returns {string}\n *   File path.\n */\nfunction join(...segments) {\n  let index = -1\n  /** @type {string | undefined} */\n  let joined\n\n  while (++index < segments.length) {\n    assertPath(segments[index])\n\n    if (segments[index]) {\n      joined =\n        joined === undefined ? segments[index] : joined + '/' + segments[index]\n    }\n  }\n\n  return joined === undefined ? '.' : normalize(joined)\n}\n\n/**\n * Normalize a basic file path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\n// Note: `normalize` is not exposed as `path.normalize`, so some code is\n// manually removed from it.\nfunction normalize(path) {\n  assertPath(path)\n\n  const absolute = path.codePointAt(0) === 47 /* `/` */\n\n  // Normalize the path according to POSIX rules.\n  let value = normalizeString(path, !absolute)\n\n  if (value.length === 0 && !absolute) {\n    value = '.'\n  }\n\n  if (value.length > 0 && path.codePointAt(path.length - 1) === 47 /* / */) {\n    value += '/'\n  }\n\n  return absolute ? '/' + value : value\n}\n\n/**\n * Resolve `.` and `..` elements in a path with directory names.\n *\n * @param {string} path\n *   File path.\n * @param {boolean} allowAboveRoot\n *   Whether `..` can move above root.\n * @returns {string}\n *   File path.\n */\nfunction normalizeString(path, allowAboveRoot) {\n  let result = ''\n  let lastSegmentLength = 0\n  let lastSlash = -1\n  let dots = 0\n  let index = -1\n  /** @type {number | undefined} */\n  let code\n  /** @type {number} */\n  let lastSlashIndex\n\n  while (++index <= path.length) {\n    if (index < path.length) {\n      code = path.codePointAt(index)\n    } else if (code === 47 /* `/` */) {\n      break\n    } else {\n      code = 47 /* `/` */\n    }\n\n    if (code === 47 /* `/` */) {\n      if (lastSlash === index - 1 || dots === 1) {\n        // Empty.\n      } else if (lastSlash !== index - 1 && dots === 2) {\n        if (\n          result.length < 2 ||\n          lastSegmentLength !== 2 ||\n          result.codePointAt(result.length - 1) !== 46 /* `.` */ ||\n          result.codePointAt(result.length - 2) !== 46 /* `.` */\n        ) {\n          if (result.length > 2) {\n            lastSlashIndex = result.lastIndexOf('/')\n\n            if (lastSlashIndex !== result.length - 1) {\n              if (lastSlashIndex < 0) {\n                result = ''\n                lastSegmentLength = 0\n              } else {\n                result = result.slice(0, lastSlashIndex)\n                lastSegmentLength = result.length - 1 - result.lastIndexOf('/')\n              }\n\n              lastSlash = index\n              dots = 0\n              continue\n            }\n          } else if (result.length > 0) {\n            result = ''\n            lastSegmentLength = 0\n            lastSlash = index\n            dots = 0\n            continue\n          }\n        }\n\n        if (allowAboveRoot) {\n          result = result.length > 0 ? result + '/..' : '..'\n          lastSegmentLength = 2\n        }\n      } else {\n        if (result.length > 0) {\n          result += '/' + path.slice(lastSlash + 1, index)\n        } else {\n          result = path.slice(lastSlash + 1, index)\n        }\n\n        lastSegmentLength = index - lastSlash - 1\n      }\n\n      lastSlash = index\n      dots = 0\n    } else if (code === 46 /* `.` */ && dots > -1) {\n      dots++\n    } else {\n      dots = -1\n    }\n  }\n\n  return result\n}\n\n/**\n * Make sure `path` is a string.\n *\n * @param {string} path\n *   File path.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError(\n      'Path must be a string. Received ' + JSON.stringify(path)\n    )\n  }\n}\n\n/* eslint-enable max-depth, complexity */\n","// Somewhat based on:\n// <https://github.com/defunctzombie/node-process/blob/master/browser.js>.\n// But I don’t think one tiny line of code can be copyrighted. 😅\nexport const minproc = {cwd}\n\nfunction cwd() {\n  return '/'\n}\n","/**\n * Checks if a value has the shape of a WHATWG URL object.\n *\n * Using a symbol or instanceof would not be able to recognize URL objects\n * coming from other implementations (e.g. in Electron), so instead we are\n * checking some well known properties for a lack of a better test.\n *\n * We use `href` and `protocol` as they are the only properties that are\n * easy to retrieve and calculate due to the lazy nature of the getters.\n *\n * We check for auth attribute to distinguish legacy url instance with\n * WHATWG URL instance.\n *\n * @param {unknown} fileUrlOrPath\n *   File path or URL.\n * @returns {fileUrlOrPath is URL}\n *   Whether it’s a URL.\n */\n// From: <https://github.com/nodejs/node/blob/6a3403c/lib/internal/url.js#L720>\nexport function isUrl(fileUrlOrPath) {\n  return Boolean(\n    fileUrlOrPath !== null &&\n      typeof fileUrlOrPath === 'object' &&\n      'href' in fileUrlOrPath &&\n      fileUrlOrPath.href &&\n      'protocol' in fileUrlOrPath &&\n      fileUrlOrPath.protocol &&\n      // @ts-expect-error: indexing is fine.\n      fileUrlOrPath.auth === undefined\n  )\n}\n","import {isUrl} from './minurl.shared.js'\n\nexport {isUrl} from './minurl.shared.js'\n\n// See: <https://github.com/nodejs/node/blob/6a3403c/lib/internal/url.js>\n\n/**\n * @param {URL | string} path\n *   File URL.\n * @returns {string}\n *   File URL.\n */\nexport function urlToPath(path) {\n  if (typeof path === 'string') {\n    path = new URL(path)\n  } else if (!isUrl(path)) {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'The \"path\" argument must be of type string or an instance of URL. Received `' +\n        path +\n        '`'\n    )\n    error.code = 'ERR_INVALID_ARG_TYPE'\n    throw error\n  }\n\n  if (path.protocol !== 'file:') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError('The URL must be of scheme file')\n    error.code = 'ERR_INVALID_URL_SCHEME'\n    throw error\n  }\n\n  return getPathFromURLPosix(path)\n}\n\n/**\n * Get a path from a POSIX URL.\n *\n * @param {URL} url\n *   URL.\n * @returns {string}\n *   File path.\n */\nfunction getPathFromURLPosix(url) {\n  if (url.hostname !== '') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'File URL host must be \"localhost\" or empty on darwin'\n    )\n    error.code = 'ERR_INVALID_FILE_URL_HOST'\n    throw error\n  }\n\n  const pathname = url.pathname\n  let index = -1\n\n  while (++index < pathname.length) {\n    if (\n      pathname.codePointAt(index) === 37 /* `%` */ &&\n      pathname.codePointAt(index + 1) === 50 /* `2` */\n    ) {\n      const third = pathname.codePointAt(index + 2)\n      if (third === 70 /* `F` */ || third === 102 /* `f` */) {\n        /** @type {NodeJS.ErrnoException} */\n        const error = new TypeError(\n          'File URL path must not include encoded / characters'\n        )\n        error.code = 'ERR_INVALID_FILE_URL_PATH'\n        throw error\n      }\n    }\n  }\n\n  return decodeURIComponent(pathname)\n}\n","/**\n * @import {Node, Point, Position} from 'unist'\n * @import {Options as MessageOptions} from 'vfile-message'\n * @import {Compatible, Data, Map, Options, Value} from 'vfile'\n */\n\n/**\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n */\n\nimport {VFileMessage} from 'vfile-message'\nimport {minpath} from '#minpath'\nimport {minproc} from '#minproc'\nimport {urlToPath, isUrl} from '#minurl'\n\n/**\n * Order of setting (least specific to most), we need this because otherwise\n * `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\n * stem can be set.\n */\nconst order = /** @type {const} */ ([\n  'history',\n  'path',\n  'basename',\n  'stem',\n  'extname',\n  'dirname'\n])\n\nexport class VFile {\n  /**\n   * Create a new virtual file.\n   *\n   * `options` is treated as:\n   *\n   * *   `string` or `Uint8Array` — `{value: options}`\n   * *   `URL` — `{path: options}`\n   * *   `VFile` — shallow copies its data over to the new file\n   * *   `object` — all fields are shallow copied over to the new file\n   *\n   * Path related fields are set in the following order (least specific to\n   * most specific): `history`, `path`, `basename`, `stem`, `extname`,\n   * `dirname`.\n   *\n   * You cannot set `dirname` or `extname` without setting either `history`,\n   * `path`, `basename`, or `stem` too.\n   *\n   * @param {Compatible | null | undefined} [value]\n   *   File value.\n   * @returns\n   *   New instance.\n   */\n  constructor(value) {\n    /** @type {Options | VFile} */\n    let options\n\n    if (!value) {\n      options = {}\n    } else if (isUrl(value)) {\n      options = {path: value}\n    } else if (typeof value === 'string' || isUint8Array(value)) {\n      options = {value}\n    } else {\n      options = value\n    }\n\n    /* eslint-disable no-unused-expressions */\n\n    /**\n     * Base of `path` (default: `process.cwd()` or `'/'` in browsers).\n     *\n     * @type {string}\n     */\n    // Prevent calling `cwd` (which could be expensive) if it’s not needed;\n    // the empty string will be overridden in the next block.\n    this.cwd = 'cwd' in options ? '' : minproc.cwd()\n\n    /**\n     * Place to store custom info (default: `{}`).\n     *\n     * It’s OK to store custom data directly on the file but moving it to\n     * `data` is recommended.\n     *\n     * @type {Data}\n     */\n    this.data = {}\n\n    /**\n     * List of file paths the file moved between.\n     *\n     * The first is the original path and the last is the current path.\n     *\n     * @type {Array<string>}\n     */\n    this.history = []\n\n    /**\n     * List of messages associated with the file.\n     *\n     * @type {Array<VFileMessage>}\n     */\n    this.messages = []\n\n    /**\n     * Raw value.\n     *\n     * @type {Value}\n     */\n    this.value\n\n    // The below are non-standard, they are “well-known”.\n    // As in, used in several tools.\n    /**\n     * Source map.\n     *\n     * This type is equivalent to the `RawSourceMap` type from the `source-map`\n     * module.\n     *\n     * @type {Map | null | undefined}\n     */\n    this.map\n\n    /**\n     * Custom, non-string, compiled, representation.\n     *\n     * This is used by unified to store non-string results.\n     * One example is when turning markdown into React nodes.\n     *\n     * @type {unknown}\n     */\n    this.result\n\n    /**\n     * Whether a file was saved to disk.\n     *\n     * This is used by vfile reporters.\n     *\n     * @type {boolean}\n     */\n    this.stored\n    /* eslint-enable no-unused-expressions */\n\n    // Set path related properties in the correct order.\n    let index = -1\n\n    while (++index < order.length) {\n      const field = order[index]\n\n      // Note: we specifically use `in` instead of `hasOwnProperty` to accept\n      // `vfile`s too.\n      if (\n        field in options &&\n        options[field] !== undefined &&\n        options[field] !== null\n      ) {\n        // @ts-expect-error: TS doesn’t understand basic reality.\n        this[field] = field === 'history' ? [...options[field]] : options[field]\n      }\n    }\n\n    /** @type {string} */\n    let field\n\n    // Set non-path related properties.\n    for (field in options) {\n      // @ts-expect-error: fine to set other things.\n      if (!order.includes(field)) {\n        // @ts-expect-error: fine to set other things.\n        this[field] = options[field]\n      }\n    }\n  }\n\n  /**\n   * Get the basename (including extname) (example: `'index.min.js'`).\n   *\n   * @returns {string | undefined}\n   *   Basename.\n   */\n  get basename() {\n    return typeof this.path === 'string'\n      ? minpath.basename(this.path)\n      : undefined\n  }\n\n  /**\n   * Set basename (including extname) (`'index.min.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   *\n   * @param {string} basename\n   *   Basename.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set basename(basename) {\n    assertNonEmpty(basename, 'basename')\n    assertPart(basename, 'basename')\n    this.path = minpath.join(this.dirname || '', basename)\n  }\n\n  /**\n   * Get the parent path (example: `'~'`).\n   *\n   * @returns {string | undefined}\n   *   Dirname.\n   */\n  get dirname() {\n    return typeof this.path === 'string'\n      ? minpath.dirname(this.path)\n      : undefined\n  }\n\n  /**\n   * Set the parent path (example: `'~'`).\n   *\n   * Cannot be set if there’s no `path` yet.\n   *\n   * @param {string | undefined} dirname\n   *   Dirname.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set dirname(dirname) {\n    assertPath(this.basename, 'dirname')\n    this.path = minpath.join(dirname || '', this.basename)\n  }\n\n  /**\n   * Get the extname (including dot) (example: `'.js'`).\n   *\n   * @returns {string | undefined}\n   *   Extname.\n   */\n  get extname() {\n    return typeof this.path === 'string'\n      ? minpath.extname(this.path)\n      : undefined\n  }\n\n  /**\n   * Set the extname (including dot) (example: `'.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be set if there’s no `path` yet.\n   *\n   * @param {string | undefined} extname\n   *   Extname.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set extname(extname) {\n    assertPart(extname, 'extname')\n    assertPath(this.dirname, 'extname')\n\n    if (extname) {\n      if (extname.codePointAt(0) !== 46 /* `.` */) {\n        throw new Error('`extname` must start with `.`')\n      }\n\n      if (extname.includes('.', 1)) {\n        throw new Error('`extname` cannot contain multiple dots')\n      }\n    }\n\n    this.path = minpath.join(this.dirname, this.stem + (extname || ''))\n  }\n\n  /**\n   * Get the full path (example: `'~/index.min.js'`).\n   *\n   * @returns {string}\n   *   Path.\n   */\n  get path() {\n    return this.history[this.history.length - 1]\n  }\n\n  /**\n   * Set the full path (example: `'~/index.min.js'`).\n   *\n   * Cannot be nullified.\n   * You can set a file URL (a `URL` object with a `file:` protocol) which will\n   * be turned into a path with `url.fileURLToPath`.\n   *\n   * @param {URL | string} path\n   *   Path.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set path(path) {\n    if (isUrl(path)) {\n      path = urlToPath(path)\n    }\n\n    assertNonEmpty(path, 'path')\n\n    if (this.path !== path) {\n      this.history.push(path)\n    }\n  }\n\n  /**\n   * Get the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * @returns {string | undefined}\n   *   Stem.\n   */\n  get stem() {\n    return typeof this.path === 'string'\n      ? minpath.basename(this.path, this.extname)\n      : undefined\n  }\n\n  /**\n   * Set the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   *\n   * @param {string} stem\n   *   Stem.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set stem(stem) {\n    assertNonEmpty(stem, 'stem')\n    assertPart(stem, 'stem')\n    this.path = minpath.join(this.dirname || '', stem + (this.extname || ''))\n  }\n\n  // Normal prototypal methods.\n  /**\n   * Create a fatal message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `true` (error; file not usable)\n   * and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {never}\n   *   Never.\n   * @throws {VFileMessage}\n   *   Message.\n   */\n  fail(causeOrReason, optionsOrParentOrPlace, origin) {\n    // @ts-expect-error: the overloads are fine.\n    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin)\n\n    message.fatal = true\n\n    throw message\n  }\n\n  /**\n   * Create an info message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `undefined` (info; change\n   * likely not needed) and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  info(causeOrReason, optionsOrParentOrPlace, origin) {\n    // @ts-expect-error: the overloads are fine.\n    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin)\n\n    message.fatal = undefined\n\n    return message\n  }\n\n  /**\n   * Create a message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `false` (warning; change may be\n   * needed) and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  message(causeOrReason, optionsOrParentOrPlace, origin) {\n    const message = new VFileMessage(\n      // @ts-expect-error: the overloads are fine.\n      causeOrReason,\n      optionsOrParentOrPlace,\n      origin\n    )\n\n    if (this.path) {\n      message.name = this.path + ':' + message.name\n      message.file = this.path\n    }\n\n    message.fatal = false\n\n    this.messages.push(message)\n\n    return message\n  }\n\n  /**\n   * Serialize the file.\n   *\n   * > **Note**: which encodings are supported depends on the engine.\n   * > For info on Node.js, see:\n   * > <https://nodejs.org/api/util.html#whatwg-supported-encodings>.\n   *\n   * @param {string | null | undefined} [encoding='utf8']\n   *   Character encoding to understand `value` as when it’s a `Uint8Array`\n   *   (default: `'utf-8'`).\n   * @returns {string}\n   *   Serialized file.\n   */\n  toString(encoding) {\n    if (this.value === undefined) {\n      return ''\n    }\n\n    if (typeof this.value === 'string') {\n      return this.value\n    }\n\n    const decoder = new TextDecoder(encoding || undefined)\n    return decoder.decode(this.value)\n  }\n}\n\n/**\n * Assert that `part` is not a path (as in, does not contain `path.sep`).\n *\n * @param {string | null | undefined} part\n *   File path part.\n * @param {string} name\n *   Part name.\n * @returns {undefined}\n *   Nothing.\n */\nfunction assertPart(part, name) {\n  if (part && part.includes(minpath.sep)) {\n    throw new Error(\n      '`' + name + '` cannot be a path: did not expect `' + minpath.sep + '`'\n    )\n  }\n}\n\n/**\n * Assert that `part` is not empty.\n *\n * @param {string | undefined} part\n *   Thing.\n * @param {string} name\n *   Part name.\n * @returns {asserts part is string}\n *   Nothing.\n */\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty')\n  }\n}\n\n/**\n * Assert `path` exists.\n *\n * @param {string | undefined} path\n *   Path.\n * @param {string} name\n *   Dependency name.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too')\n  }\n}\n\n/**\n * Assert `value` is an `Uint8Array`.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Uint8Array}\n *   Whether `value` is an `Uint8Array`.\n */\nfunction isUint8Array(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'byteLength' in value &&\n      'byteOffset' in value\n  )\n}\n","export const CallableInstance =\n  /**\n   * @type {new <Parameters extends Array<unknown>, Result>(property: string | symbol) => (...parameters: Parameters) => Result}\n   */\n  (\n    /** @type {unknown} */\n    (\n      /**\n       * @this {Function}\n       * @param {string | symbol} property\n       * @returns {(...parameters: Array<unknown>) => unknown}\n       */\n      function (property) {\n        const self = this\n        const constr = self.constructor\n        const proto = /** @type {Record<string | symbol, Function>} */ (\n          // Prototypes do exist.\n          // type-coverage:ignore-next-line\n          constr.prototype\n        )\n        const value = proto[property]\n        /** @type {(...parameters: Array<unknown>) => unknown} */\n        const apply = function () {\n          return value.apply(apply, arguments)\n        }\n\n        Object.setPrototypeOf(apply, proto)\n\n        // Not needed for us in `unified`: we only call this on the `copy`\n        // function,\n        // and we don't need to add its fields (`length`, `name`)\n        // over.\n        // See also: GH-246.\n        // const names = Object.getOwnPropertyNames(value)\n        //\n        // for (const p of names) {\n        //   const descriptor = Object.getOwnPropertyDescriptor(value, p)\n        //   if (descriptor) Object.defineProperty(apply, p, descriptor)\n        // }\n\n        return apply\n      }\n    )\n  )\n","/**\n * @typedef {import('trough').Pipeline} Pipeline\n *\n * @typedef {import('unist').Node} Node\n *\n * @typedef {import('vfile').Compatible} Compatible\n * @typedef {import('vfile').Value} Value\n *\n * @typedef {import('../index.js').CompileResultMap} CompileResultMap\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Settings} Settings\n */\n\n/**\n * @typedef {CompileResultMap[keyof CompileResultMap]} CompileResults\n *   Acceptable results from compilers.\n *\n *   To register custom results, add them to\n *   {@linkcode CompileResultMap}.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The node that the compiler receives (default: `Node`).\n * @template {CompileResults} [Result=CompileResults]\n *   The thing that the compiler yields (default: `CompileResults`).\n * @callback Compiler\n *   A **compiler** handles the compiling of a syntax tree to something else\n *   (in most cases, text) (TypeScript type).\n *\n *   It is used in the stringify phase and called with a {@linkcode Node}\n *   and {@linkcode VFile} representation of the document to compile.\n *   It should return the textual representation of the given tree (typically\n *   `string`).\n *\n *   > **Note**: unified typically compiles by serializing: most compilers\n *   > return `string` (or `Uint8Array`).\n *   > Some compilers, such as the one configured with\n *   > [`rehype-react`][rehype-react], return other values (in this case, a\n *   > React tree).\n *   > If you’re using a compiler that doesn’t serialize, expect different\n *   > result values.\n *   >\n *   > To register custom results in TypeScript, add them to\n *   > {@linkcode CompileResultMap}.\n *\n *   [rehype-react]: https://github.com/rehypejs/rehype-react\n * @param {Tree} tree\n *   Tree to compile.\n * @param {VFile} file\n *   File associated with `tree`.\n * @returns {Result}\n *   New content: compiled text (`string` or `Uint8Array`, for `file.value`) or\n *   something else (for `file.result`).\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The node that the parser yields (default: `Node`)\n * @callback Parser\n *   A **parser** handles the parsing of text to a syntax tree.\n *\n *   It is used in the parse phase and is called with a `string` and\n *   {@linkcode VFile} of the document to parse.\n *   It must return the syntax tree representation of the given file\n *   ({@linkcode Node}).\n * @param {string} document\n *   Document to parse.\n * @param {VFile} file\n *   File associated with `document`.\n * @returns {Tree}\n *   Node representing the given file.\n */\n\n/**\n * @typedef {(\n *   Plugin<Array<any>, any, any> |\n *   PluginTuple<Array<any>, any, any> |\n *   Preset\n * )} Pluggable\n *   Union of the different ways to add plugins and settings.\n */\n\n/**\n * @typedef {Array<Pluggable>} PluggableList\n *   List of plugins and presets.\n */\n\n// Note: we can’t use `callback` yet as it messes up `this`:\n//  <https://github.com/microsoft/TypeScript/issues/55197>.\n/**\n * @template {Array<unknown>} [PluginParameters=[]]\n *   Arguments passed to the plugin (default: `[]`, the empty tuple).\n * @template {Node | string | undefined} [Input=Node]\n *   Value that is expected as input (default: `Node`).\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node it expects.\n *   *   If the plugin sets a {@linkcode Parser}, this should be\n *       `string`.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be the\n *       node it expects.\n * @template [Output=Input]\n *   Value that is yielded as output (default: `Input`).\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node that that yields.\n *   *   If the plugin sets a {@linkcode Parser}, this should be the\n *       node that it yields.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be\n *       result it yields.\n * @typedef {(\n *   (this: Processor, ...parameters: PluginParameters) =>\n *     Input extends string ? // Parser.\n *        Output extends Node | undefined ? undefined | void : never :\n *     Output extends CompileResults ? // Compiler.\n *        Input extends Node | undefined ? undefined | void : never :\n *     Transformer<\n *       Input extends Node ? Input : Node,\n *       Output extends Node ? Output : Node\n *     > | undefined | void\n * )} Plugin\n *   Single plugin.\n *\n *   Plugins configure the processors they are applied on in the following\n *   ways:\n *\n *   *   they change the processor, such as the parser, the compiler, or by\n *       configuring data\n *   *   they specify how to handle trees and files\n *\n *   In practice, they are functions that can receive options and configure the\n *   processor (`this`).\n *\n *   > **Note**: plugins are called when the processor is *frozen*, not when\n *   > they are applied.\n */\n\n/**\n * Tuple of a plugin and its configuration.\n *\n * The first item is a plugin, the rest are its parameters.\n *\n * @template {Array<unknown>} [TupleParameters=[]]\n *   Arguments passed to the plugin (default: `[]`, the empty tuple).\n * @template {Node | string | undefined} [Input=undefined]\n *   Value that is expected as input (optional).\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node it expects.\n *   *   If the plugin sets a {@linkcode Parser}, this should be\n *       `string`.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be the\n *       node it expects.\n * @template [Output=undefined] (optional).\n *   Value that is yielded as output.\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node that that yields.\n *   *   If the plugin sets a {@linkcode Parser}, this should be the\n *       node that it yields.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be\n *       result it yields.\n * @typedef {(\n *   [\n *     plugin: Plugin<TupleParameters, Input, Output>,\n *     ...parameters: TupleParameters\n *   ]\n * )} PluginTuple\n */\n\n/**\n * @typedef Preset\n *   Sharable configuration.\n *\n *   They can contain plugins and settings.\n * @property {PluggableList | undefined} [plugins]\n *   List of plugins and presets (optional).\n * @property {Settings | undefined} [settings]\n *   Shared settings for parsers and compilers (optional).\n */\n\n/**\n * @template {VFile} [File=VFile]\n *   The file that the callback receives (default: `VFile`).\n * @callback ProcessCallback\n *   Callback called when the process is done.\n *\n *   Called with either an error or a result.\n * @param {Error | undefined} [error]\n *   Fatal error (optional).\n * @param {File | undefined} [file]\n *   Processed file (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The tree that the callback receives (default: `Node`).\n * @callback RunCallback\n *   Callback called when transformers are done.\n *\n *   Called with either an error or results.\n * @param {Error | undefined} [error]\n *   Fatal error (optional).\n * @param {Tree | undefined} [tree]\n *   Transformed tree (optional).\n * @param {VFile | undefined} [file]\n *   File (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Output=Node]\n *   Node type that the transformer yields (default: `Node`).\n * @callback TransformCallback\n *   Callback passed to transforms.\n *\n *   If the signature of a `transformer` accepts a third argument, the\n *   transformer may perform asynchronous operations, and must call it.\n * @param {Error | undefined} [error]\n *   Fatal error to stop the process (optional).\n * @param {Output | undefined} [tree]\n *   New, changed, tree (optional).\n * @param {VFile | undefined} [file]\n *   New, changed, file (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Input=Node]\n *   Node type that the transformer expects (default: `Node`).\n * @template {Node} [Output=Input]\n *   Node type that the transformer yields (default: `Input`).\n * @callback Transformer\n *   Transformers handle syntax trees and files.\n *\n *   They are functions that are called each time a syntax tree and file are\n *   passed through the run phase.\n *   When an error occurs in them (either because it’s thrown, returned,\n *   rejected, or passed to `next`), the process stops.\n *\n *   The run phase is handled by [`trough`][trough], see its documentation for\n *   the exact semantics of these functions.\n *\n *   > **Note**: you should likely ignore `next`: don’t accept it.\n *   > it supports callback-style async work.\n *   > But promises are likely easier to reason about.\n *\n *   [trough]: https://github.com/wooorm/trough#function-fninput-next\n * @param {Input} tree\n *   Tree to handle.\n * @param {VFile} file\n *   File to handle.\n * @param {TransformCallback<Output>} next\n *   Callback.\n * @returns {(\n *   Promise<Output | undefined | void> |\n *   Promise<never> | // For some reason this is needed separately.\n *   Output |\n *   Error |\n *   undefined |\n *   void\n * )}\n *   If you accept `next`, nothing.\n *   Otherwise:\n *\n *   *   `Error` — fatal error to stop the process\n *   *   `Promise<undefined>` or `undefined` — the next transformer keeps using\n *       same tree\n *   *   `Promise<Node>` or `Node` — new, changed, tree\n */\n\n/**\n * @template {Node | undefined} ParseTree\n *   Output of `parse`.\n * @template {Node | undefined} HeadTree\n *   Input for `run`.\n * @template {Node | undefined} TailTree\n *   Output for `run`.\n * @template {Node | undefined} CompileTree\n *   Input of `stringify`.\n * @template {CompileResults | undefined} CompileResult\n *   Output of `stringify`.\n * @template {Node | string | undefined} Input\n *   Input of plugin.\n * @template Output\n *   Output of plugin (optional).\n * @typedef {(\n *   Input extends string\n *     ? Output extends Node | undefined\n *       ? // Parser.\n *         Processor<\n *           Output extends undefined ? ParseTree : Output,\n *           HeadTree,\n *           TailTree,\n *           CompileTree,\n *           CompileResult\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : Output extends CompileResults\n *     ? Input extends Node | undefined\n *       ? // Compiler.\n *         Processor<\n *           ParseTree,\n *           HeadTree,\n *           TailTree,\n *           Input extends undefined ? CompileTree : Input,\n *           Output extends undefined ? CompileResult : Output\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : Input extends Node | undefined\n *     ? Output extends Node | undefined\n *       ? // Transform.\n *         Processor<\n *           ParseTree,\n *           HeadTree extends undefined ? Input : HeadTree,\n *           Output extends undefined ? TailTree : Output,\n *           CompileTree,\n *           CompileResult\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : // Unknown.\n *       Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n * )} UsePlugin\n *   Create a processor based on the input/output of a {@link Plugin plugin}.\n */\n\n/**\n * @template {CompileResults | undefined} Result\n *   Node type that the transformer yields.\n * @typedef {(\n *   Result extends Value | undefined ?\n *     VFile :\n *     VFile & {result: Result}\n *   )} VFileWithOutput\n *   Type to generate a {@linkcode VFile} corresponding to a compiler result.\n *\n *   If a result that is not acceptable on a `VFile` is used, that will\n *   be stored on the `result` field of {@linkcode VFile}.\n */\n\nimport {bail} from 'bail'\nimport extend from 'extend'\nimport {ok as assert} from 'devlop'\nimport isPlainObj from 'is-plain-obj'\nimport {trough} from 'trough'\nimport {VFile} from 'vfile'\nimport {CallableInstance} from './callable-instance.js'\n\n// To do: next major: drop `Compiler`, `Parser`: prefer lowercase.\n\n// To do: we could start yielding `never` in TS when a parser is missing and\n// `parse` is called.\n// Currently, we allow directly setting `processor.parser`, which is untyped.\n\nconst own = {}.hasOwnProperty\n\n/**\n * @template {Node | undefined} [ParseTree=undefined]\n *   Output of `parse` (optional).\n * @template {Node | undefined} [HeadTree=undefined]\n *   Input for `run` (optional).\n * @template {Node | undefined} [TailTree=undefined]\n *   Output for `run` (optional).\n * @template {Node | undefined} [CompileTree=undefined]\n *   Input of `stringify` (optional).\n * @template {CompileResults | undefined} [CompileResult=undefined]\n *   Output of `stringify` (optional).\n * @extends {CallableInstance<[], Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>>}\n */\nexport class Processor extends CallableInstance {\n  /**\n   * Create a processor.\n   */\n  constructor() {\n    // If `Processor()` is called (w/o new), `copy` is called instead.\n    super('copy')\n\n    /**\n     * Compiler to use (deprecated).\n     *\n     * @deprecated\n     *   Use `compiler` instead.\n     * @type {(\n     *   Compiler<\n     *     CompileTree extends undefined ? Node : CompileTree,\n     *     CompileResult extends undefined ? CompileResults : CompileResult\n     *   > |\n     *   undefined\n     * )}\n     */\n    this.Compiler = undefined\n\n    /**\n     * Parser to use (deprecated).\n     *\n     * @deprecated\n     *   Use `parser` instead.\n     * @type {(\n     *   Parser<ParseTree extends undefined ? Node : ParseTree> |\n     *   undefined\n     * )}\n     */\n    this.Parser = undefined\n\n    // Note: the following fields are considered private.\n    // However, they are needed for tests, and TSC generates an untyped\n    // `private freezeIndex` field for, which trips `type-coverage` up.\n    // Instead, we use `@deprecated` to visualize that they shouldn’t be used.\n    /**\n     * Internal list of configured plugins.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Array<PluginTuple<Array<unknown>>>}\n     */\n    this.attachers = []\n\n    /**\n     * Compiler to use.\n     *\n     * @type {(\n     *   Compiler<\n     *     CompileTree extends undefined ? Node : CompileTree,\n     *     CompileResult extends undefined ? CompileResults : CompileResult\n     *   > |\n     *   undefined\n     * )}\n     */\n    this.compiler = undefined\n\n    /**\n     * Internal state to track where we are while freezing.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {number}\n     */\n    this.freezeIndex = -1\n\n    /**\n     * Internal state to track whether we’re frozen.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {boolean | undefined}\n     */\n    this.frozen = undefined\n\n    /**\n     * Internal state.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Data}\n     */\n    this.namespace = {}\n\n    /**\n     * Parser to use.\n     *\n     * @type {(\n     *   Parser<ParseTree extends undefined ? Node : ParseTree> |\n     *   undefined\n     * )}\n     */\n    this.parser = undefined\n\n    /**\n     * Internal list of configured transformers.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Pipeline}\n     */\n    this.transformers = trough()\n  }\n\n  /**\n   * Copy a processor.\n   *\n   * @deprecated\n   *   This is a private internal method and should not be used.\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   New *unfrozen* processor ({@linkcode Processor}) that is\n   *   configured to work the same as its ancestor.\n   *   When the descendant processor is configured in the future it does not\n   *   affect the ancestral processor.\n   */\n  copy() {\n    // Cast as the type parameters will be the same after attaching.\n    const destination =\n      /** @type {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>} */ (\n        new Processor()\n      )\n    let index = -1\n\n    while (++index < this.attachers.length) {\n      const attacher = this.attachers[index]\n      destination.use(...attacher)\n    }\n\n    destination.data(extend(true, {}, this.namespace))\n\n    return destination\n  }\n\n  /**\n   * Configure the processor with info available to all plugins.\n   * Information is stored in an object.\n   *\n   * Typically, options can be given to a specific plugin, but sometimes it\n   * makes sense to have information shared with several plugins.\n   * For example, a list of HTML elements that are self-closing, which is\n   * needed during all phases.\n   *\n   * > **Note**: setting information cannot occur on *frozen* processors.\n   * > Call the processor first to create a new unfrozen processor.\n   *\n   * > **Note**: to register custom data in TypeScript, augment the\n   * > {@linkcode Data} interface.\n   *\n   * @example\n   *   This example show how to get and set info:\n   *\n   *   ```js\n   *   import {unified} from 'unified'\n   *\n   *   const processor = unified().data('alpha', 'bravo')\n   *\n   *   processor.data('alpha') // => 'bravo'\n   *\n   *   processor.data() // => {alpha: 'bravo'}\n   *\n   *   processor.data({charlie: 'delta'})\n   *\n   *   processor.data() // => {charlie: 'delta'}\n   *   ```\n   *\n   * @template {keyof Data} Key\n   *\n   * @overload\n   * @returns {Data}\n   *\n   * @overload\n   * @param {Data} dataset\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {Key} key\n   * @returns {Data[Key]}\n   *\n   * @overload\n   * @param {Key} key\n   * @param {Data[Key]} value\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @param {Data | Key} [key]\n   *   Key to get or set, or entire dataset to set, or nothing to get the\n   *   entire dataset (optional).\n   * @param {Data[Key]} [value]\n   *   Value to set (optional).\n   * @returns {unknown}\n   *   The current processor when setting, the value at `key` when getting, or\n   *   the entire dataset when getting without key.\n   */\n  data(key, value) {\n    if (typeof key === 'string') {\n      // Set `key`.\n      if (arguments.length === 2) {\n        assertUnfrozen('data', this.frozen)\n        this.namespace[key] = value\n        return this\n      }\n\n      // Get `key`.\n      return (own.call(this.namespace, key) && this.namespace[key]) || undefined\n    }\n\n    // Set space.\n    if (key) {\n      assertUnfrozen('data', this.frozen)\n      this.namespace = key\n      return this\n    }\n\n    // Get space.\n    return this.namespace\n  }\n\n  /**\n   * Freeze a processor.\n   *\n   * Frozen processors are meant to be extended and not to be configured\n   * directly.\n   *\n   * When a processor is frozen it cannot be unfrozen.\n   * New processors working the same way can be created by calling the\n   * processor.\n   *\n   * It’s possible to freeze processors explicitly by calling `.freeze()`.\n   * Processors freeze automatically when `.parse()`, `.run()`, `.runSync()`,\n   * `.stringify()`, `.process()`, or `.processSync()` are called.\n   *\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   The current processor.\n   */\n  freeze() {\n    if (this.frozen) {\n      return this\n    }\n\n    // Cast so that we can type plugins easier.\n    // Plugins are supposed to be usable on different processors, not just on\n    // this exact processor.\n    const self = /** @type {Processor} */ (/** @type {unknown} */ (this))\n\n    while (++this.freezeIndex < this.attachers.length) {\n      const [attacher, ...options] = this.attachers[this.freezeIndex]\n\n      if (options[0] === false) {\n        continue\n      }\n\n      if (options[0] === true) {\n        options[0] = undefined\n      }\n\n      const transformer = attacher.call(self, ...options)\n\n      if (typeof transformer === 'function') {\n        this.transformers.use(transformer)\n      }\n    }\n\n    this.frozen = true\n    this.freezeIndex = Number.POSITIVE_INFINITY\n\n    return this\n  }\n\n  /**\n   * Parse text to a syntax tree.\n   *\n   * > **Note**: `parse` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `parse` performs the parse phase, not the run phase or other\n   * > phases.\n   *\n   * @param {Compatible | undefined} [file]\n   *   file to parse (optional); typically `string` or `VFile`; any value\n   *   accepted as `x` in `new VFile(x)`.\n   * @returns {ParseTree extends undefined ? Node : ParseTree}\n   *   Syntax tree representing `file`.\n   */\n  parse(file) {\n    this.freeze()\n    const realFile = vfile(file)\n    const parser = this.parser || this.Parser\n    assertParser('parse', parser)\n    return parser(String(realFile), realFile)\n  }\n\n  /**\n   * Process the given file as configured on the processor.\n   *\n   * > **Note**: `process` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `process` performs the parse, run, and stringify phases.\n   *\n   * @overload\n   * @param {Compatible | undefined} file\n   * @param {ProcessCallback<VFileWithOutput<CompileResult>>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {Compatible | undefined} [file]\n   * @returns {Promise<VFileWithOutput<CompileResult>>}\n   *\n   * @param {Compatible | undefined} [file]\n   *   File (optional); typically `string` or `VFile`]; any value accepted as\n   *   `x` in `new VFile(x)`.\n   * @param {ProcessCallback<VFileWithOutput<CompileResult>> | undefined} [done]\n   *   Callback (optional).\n   * @returns {Promise<VFile> | undefined}\n   *   Nothing if `done` is given.\n   *   Otherwise a promise, rejected with a fatal error or resolved with the\n   *   processed file.\n   *\n   *   The parsed, transformed, and compiled value is available at\n   *   `file.value` (see note).\n   *\n   *   > **Note**: unified typically compiles by serializing: most\n   *   > compilers return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@linkcode CompileResultMap}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  process(file, done) {\n    const self = this\n\n    this.freeze()\n    assertParser('process', this.parser || this.Parser)\n    assertCompiler('process', this.compiler || this.Compiler)\n\n    return done ? executor(undefined, done) : new Promise(executor)\n\n    // Note: `void`s needed for TS.\n    /**\n     * @param {((file: VFileWithOutput<CompileResult>) => undefined | void) | undefined} resolve\n     * @param {(error: Error | undefined) => undefined | void} reject\n     * @returns {undefined}\n     */\n    function executor(resolve, reject) {\n      const realFile = vfile(file)\n      // Assume `ParseTree` (the result of the parser) matches `HeadTree` (the\n      // input of the first transform).\n      const parseTree =\n        /** @type {HeadTree extends undefined ? Node : HeadTree} */ (\n          /** @type {unknown} */ (self.parse(realFile))\n        )\n\n      self.run(parseTree, realFile, function (error, tree, file) {\n        if (error || !tree || !file) {\n          return realDone(error)\n        }\n\n        // Assume `TailTree` (the output of the last transform) matches\n        // `CompileTree` (the input of the compiler).\n        const compileTree =\n          /** @type {CompileTree extends undefined ? Node : CompileTree} */ (\n            /** @type {unknown} */ (tree)\n          )\n\n        const compileResult = self.stringify(compileTree, file)\n\n        if (looksLikeAValue(compileResult)) {\n          file.value = compileResult\n        } else {\n          file.result = compileResult\n        }\n\n        realDone(error, /** @type {VFileWithOutput<CompileResult>} */ (file))\n      })\n\n      /**\n       * @param {Error | undefined} error\n       * @param {VFileWithOutput<CompileResult> | undefined} [file]\n       * @returns {undefined}\n       */\n      function realDone(error, file) {\n        if (error || !file) {\n          reject(error)\n        } else if (resolve) {\n          resolve(file)\n        } else {\n          assert(done, '`done` is defined if `resolve` is not')\n          done(undefined, file)\n        }\n      }\n    }\n  }\n\n  /**\n   * Process the given file as configured on the processor.\n   *\n   * An error is thrown if asynchronous transforms are configured.\n   *\n   * > **Note**: `processSync` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `processSync` performs the parse, run, and stringify phases.\n   *\n   * @param {Compatible | undefined} [file]\n   *   File (optional); typically `string` or `VFile`; any value accepted as\n   *   `x` in `new VFile(x)`.\n   * @returns {VFileWithOutput<CompileResult>}\n   *   The processed file.\n   *\n   *   The parsed, transformed, and compiled value is available at\n   *   `file.value` (see note).\n   *\n   *   > **Note**: unified typically compiles by serializing: most\n   *   > compilers return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@linkcode CompileResultMap}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  processSync(file) {\n    /** @type {boolean} */\n    let complete = false\n    /** @type {VFileWithOutput<CompileResult> | undefined} */\n    let result\n\n    this.freeze()\n    assertParser('processSync', this.parser || this.Parser)\n    assertCompiler('processSync', this.compiler || this.Compiler)\n\n    this.process(file, realDone)\n    assertDone('processSync', 'process', complete)\n    assert(result, 'we either bailed on an error or have a tree')\n\n    return result\n\n    /**\n     * @type {ProcessCallback<VFileWithOutput<CompileResult>>}\n     */\n    function realDone(error, file) {\n      complete = true\n      bail(error)\n      result = file\n    }\n  }\n\n  /**\n   * Run *transformers* on a syntax tree.\n   *\n   * > **Note**: `run` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `run` performs the run phase, not other phases.\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {Compatible | undefined} file\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {Compatible | undefined} [file]\n   * @returns {Promise<TailTree extends undefined ? Node : TailTree>}\n   *\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   *   Tree to transform and inspect.\n   * @param {(\n   *   RunCallback<TailTree extends undefined ? Node : TailTree> |\n   *   Compatible\n   * )} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} [done]\n   *   Callback (optional).\n   * @returns {Promise<TailTree extends undefined ? Node : TailTree> | undefined}\n   *   Nothing if `done` is given.\n   *   Otherwise, a promise rejected with a fatal error or resolved with the\n   *   transformed tree.\n   */\n  run(tree, file, done) {\n    assertNode(tree)\n    this.freeze()\n\n    const transformers = this.transformers\n\n    if (!done && typeof file === 'function') {\n      done = file\n      file = undefined\n    }\n\n    return done ? executor(undefined, done) : new Promise(executor)\n\n    // Note: `void`s needed for TS.\n    /**\n     * @param {(\n     *   ((tree: TailTree extends undefined ? Node : TailTree) => undefined | void) |\n     *   undefined\n     * )} resolve\n     * @param {(error: Error) => undefined | void} reject\n     * @returns {undefined}\n     */\n    function executor(resolve, reject) {\n      assert(\n        typeof file !== 'function',\n        '`file` can’t be a `done` anymore, we checked'\n      )\n      const realFile = vfile(file)\n      transformers.run(tree, realFile, realDone)\n\n      /**\n       * @param {Error | undefined} error\n       * @param {Node} outputTree\n       * @param {VFile} file\n       * @returns {undefined}\n       */\n      function realDone(error, outputTree, file) {\n        const resultingTree =\n          /** @type {TailTree extends undefined ? Node : TailTree} */ (\n            outputTree || tree\n          )\n\n        if (error) {\n          reject(error)\n        } else if (resolve) {\n          resolve(resultingTree)\n        } else {\n          assert(done, '`done` is defined if `resolve` is not')\n          done(undefined, resultingTree, file)\n        }\n      }\n    }\n  }\n\n  /**\n   * Run *transformers* on a syntax tree.\n   *\n   * An error is thrown if asynchronous transforms are configured.\n   *\n   * > **Note**: `runSync` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `runSync` performs the run phase, not other phases.\n   *\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   *   Tree to transform and inspect.\n   * @param {Compatible | undefined} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @returns {TailTree extends undefined ? Node : TailTree}\n   *   Transformed tree.\n   */\n  runSync(tree, file) {\n    /** @type {boolean} */\n    let complete = false\n    /** @type {(TailTree extends undefined ? Node : TailTree) | undefined} */\n    let result\n\n    this.run(tree, file, realDone)\n\n    assertDone('runSync', 'run', complete)\n    assert(result, 'we either bailed on an error or have a tree')\n    return result\n\n    /**\n     * @type {RunCallback<TailTree extends undefined ? Node : TailTree>}\n     */\n    function realDone(error, tree) {\n      bail(error)\n      result = tree\n      complete = true\n    }\n  }\n\n  /**\n   * Compile a syntax tree.\n   *\n   * > **Note**: `stringify` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `stringify` performs the stringify phase, not the run phase\n   * > or other phases.\n   *\n   * @param {CompileTree extends undefined ? Node : CompileTree} tree\n   *   Tree to compile.\n   * @param {Compatible | undefined} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @returns {CompileResult extends undefined ? Value : CompileResult}\n   *   Textual representation of the tree (see note).\n   *\n   *   > **Note**: unified typically compiles by serializing: most compilers\n   *   > return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@linkcode CompileResultMap}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  stringify(tree, file) {\n    this.freeze()\n    const realFile = vfile(file)\n    const compiler = this.compiler || this.Compiler\n    assertCompiler('stringify', compiler)\n    assertNode(tree)\n\n    return compiler(tree, realFile)\n  }\n\n  /**\n   * Configure the processor to use a plugin, a list of usable values, or a\n   * preset.\n   *\n   * If the processor is already using a plugin, the previous plugin\n   * configuration is changed based on the options that are passed in.\n   * In other words, the plugin is not added a second time.\n   *\n   * > **Note**: `use` cannot be called on *frozen* processors.\n   * > Call the processor first to create a new unfrozen processor.\n   *\n   * @example\n   *   There are many ways to pass plugins to `.use()`.\n   *   This example gives an overview:\n   *\n   *   ```js\n   *   import {unified} from 'unified'\n   *\n   *   unified()\n   *     // Plugin with options:\n   *     .use(pluginA, {x: true, y: true})\n   *     // Passing the same plugin again merges configuration (to `{x: true, y: false, z: true}`):\n   *     .use(pluginA, {y: false, z: true})\n   *     // Plugins:\n   *     .use([pluginB, pluginC])\n   *     // Two plugins, the second with options:\n   *     .use([pluginD, [pluginE, {}]])\n   *     // Preset with plugins and settings:\n   *     .use({plugins: [pluginF, [pluginG, {}]], settings: {position: false}})\n   *     // Settings only:\n   *     .use({settings: {position: false}})\n   *   ```\n   *\n   * @template {Array<unknown>} [Parameters=[]]\n   * @template {Node | string | undefined} [Input=undefined]\n   * @template [Output=Input]\n   *\n   * @overload\n   * @param {Preset | null | undefined} [preset]\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {PluggableList} list\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {Plugin<Parameters, Input, Output>} plugin\n   * @param {...(Parameters | [boolean])} parameters\n   * @returns {UsePlugin<ParseTree, HeadTree, TailTree, CompileTree, CompileResult, Input, Output>}\n   *\n   * @param {PluggableList | Plugin | Preset | null | undefined} value\n   *   Usable value.\n   * @param {...unknown} parameters\n   *   Parameters, when a plugin is given as a usable value.\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   Current processor.\n   */\n  use(value, ...parameters) {\n    const attachers = this.attachers\n    const namespace = this.namespace\n\n    assertUnfrozen('use', this.frozen)\n\n    if (value === null || value === undefined) {\n      // Empty.\n    } else if (typeof value === 'function') {\n      addPlugin(value, parameters)\n    } else if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        addList(value)\n      } else {\n        addPreset(value)\n      }\n    } else {\n      throw new TypeError('Expected usable value, not `' + value + '`')\n    }\n\n    return this\n\n    /**\n     * @param {Pluggable} value\n     * @returns {undefined}\n     */\n    function add(value) {\n      if (typeof value === 'function') {\n        addPlugin(value, [])\n      } else if (typeof value === 'object') {\n        if (Array.isArray(value)) {\n          const [plugin, ...parameters] =\n            /** @type {PluginTuple<Array<unknown>>} */ (value)\n          addPlugin(plugin, parameters)\n        } else {\n          addPreset(value)\n        }\n      } else {\n        throw new TypeError('Expected usable value, not `' + value + '`')\n      }\n    }\n\n    /**\n     * @param {Preset} result\n     * @returns {undefined}\n     */\n    function addPreset(result) {\n      if (!('plugins' in result) && !('settings' in result)) {\n        throw new Error(\n          'Expected usable value but received an empty preset, which is probably a mistake: presets typically come with `plugins` and sometimes with `settings`, but this has neither'\n        )\n      }\n\n      addList(result.plugins)\n\n      if (result.settings) {\n        namespace.settings = extend(true, namespace.settings, result.settings)\n      }\n    }\n\n    /**\n     * @param {PluggableList | null | undefined} plugins\n     * @returns {undefined}\n     */\n    function addList(plugins) {\n      let index = -1\n\n      if (plugins === null || plugins === undefined) {\n        // Empty.\n      } else if (Array.isArray(plugins)) {\n        while (++index < plugins.length) {\n          const thing = plugins[index]\n          add(thing)\n        }\n      } else {\n        throw new TypeError('Expected a list of plugins, not `' + plugins + '`')\n      }\n    }\n\n    /**\n     * @param {Plugin} plugin\n     * @param {Array<unknown>} parameters\n     * @returns {undefined}\n     */\n    function addPlugin(plugin, parameters) {\n      let index = -1\n      let entryIndex = -1\n\n      while (++index < attachers.length) {\n        if (attachers[index][0] === plugin) {\n          entryIndex = index\n          break\n        }\n      }\n\n      if (entryIndex === -1) {\n        attachers.push([plugin, ...parameters])\n      }\n      // Only set if there was at least a `primary` value, otherwise we’d change\n      // `arguments.length`.\n      else if (parameters.length > 0) {\n        let [primary, ...rest] = parameters\n        const currentPrimary = attachers[entryIndex][1]\n        if (isPlainObj(currentPrimary) && isPlainObj(primary)) {\n          primary = extend(true, currentPrimary, primary)\n        }\n\n        attachers[entryIndex] = [plugin, primary, ...rest]\n      }\n    }\n  }\n}\n\n// Note: this returns a *callable* instance.\n// That’s why it’s documented as a function.\n/**\n * Create a new processor.\n *\n * @example\n *   This example shows how a new processor can be created (from `remark`) and linked\n *   to **stdin**(4) and **stdout**(4).\n *\n *   ```js\n *   import process from 'node:process'\n *   import concatStream from 'concat-stream'\n *   import {remark} from 'remark'\n *\n *   process.stdin.pipe(\n *     concatStream(function (buf) {\n *       process.stdout.write(String(remark().processSync(buf)))\n *     })\n *   )\n *   ```\n *\n * @returns\n *   New *unfrozen* processor (`processor`).\n *\n *   This processor is configured to work the same as its ancestor.\n *   When the descendant processor is configured in the future it does not\n *   affect the ancestral processor.\n */\nexport const unified = new Processor().freeze()\n\n/**\n * Assert a parser is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Parser}\n */\nfunction assertParser(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `parser`')\n  }\n}\n\n/**\n * Assert a compiler is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Compiler}\n */\nfunction assertCompiler(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `compiler`')\n  }\n}\n\n/**\n * Assert the processor is not frozen.\n *\n * @param {string} name\n * @param {unknown} frozen\n * @returns {asserts frozen is false}\n */\nfunction assertUnfrozen(name, frozen) {\n  if (frozen) {\n    throw new Error(\n      'Cannot call `' +\n        name +\n        '` on a frozen processor.\\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.'\n    )\n  }\n}\n\n/**\n * Assert `node` is a unist node.\n *\n * @param {unknown} node\n * @returns {asserts node is Node}\n */\nfunction assertNode(node) {\n  // `isPlainObj` unfortunately uses `any` instead of `unknown`.\n  // type-coverage:ignore-next-line\n  if (!isPlainObj(node) || typeof node.type !== 'string') {\n    throw new TypeError('Expected node, got `' + node + '`')\n    // Fine.\n  }\n}\n\n/**\n * Assert that `complete` is `true`.\n *\n * @param {string} name\n * @param {string} asyncName\n * @param {unknown} complete\n * @returns {asserts complete is true}\n */\nfunction assertDone(name, asyncName, complete) {\n  if (!complete) {\n    throw new Error(\n      '`' + name + '` finished async. Use `' + asyncName + '` instead'\n    )\n  }\n}\n\n/**\n * @param {Compatible | undefined} [value]\n * @returns {VFile}\n */\nfunction vfile(value) {\n  return looksLikeAVFile(value) ? value : new VFile(value)\n}\n\n/**\n * @param {Compatible | undefined} [value]\n * @returns {value is VFile}\n */\nfunction looksLikeAVFile(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'message' in value &&\n      'messages' in value\n  )\n}\n\n/**\n * @param {unknown} [value]\n * @returns {value is Value}\n */\nfunction looksLikeAValue(value) {\n  return typeof value === 'string' || isUint8Array(value)\n}\n\n/**\n * Assert `value` is an `Uint8Array`.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Uint8Array}\n *   Whether `value` is an `Uint8Array`.\n */\nfunction isUint8Array(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'byteLength' in value &&\n      'byteOffset' in value\n  )\n}\n","/**\n * @import {Element, ElementContent, Nodes, Parents, Root} from 'hast'\n * @import {Root as MdastRoot} from 'mdast'\n * @import {ComponentProps, ElementType, ReactElement} from 'react'\n * @import {Options as RemarkRehypeOptions} from 'remark-rehype'\n * @import {BuildVisitor} from 'unist-util-visit'\n * @import {PluggableList, Processor} from 'unified'\n */\n\n/**\n * @callback AllowElement\n *   Filter elements.\n * @param {Readonly<Element>} element\n *   Element to check.\n * @param {number} index\n *   Index of `element` in `parent`.\n * @param {Readonly<Parents> | undefined} parent\n *   Parent of `element`.\n * @returns {boolean | null | undefined}\n *   Whether to allow `element` (default: `false`).\n */\n\n/**\n * @typedef ExtraProps\n *   Extra fields we pass.\n * @property {Element | undefined} [node]\n *   passed when `passNode` is on.\n */\n\n/**\n * @typedef {{\n *   [Key in Extract<ElementType, string>]?: ElementType<ComponentProps<Key> & ExtraProps>\n * }} Components\n *   Map tag names to components.\n */\n\n/**\n * @typedef Deprecation\n *   Deprecation.\n * @property {string} from\n *   Old field.\n * @property {string} id\n *   ID in readme.\n * @property {keyof Options} [to]\n *   New field.\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {AllowElement | null | undefined} [allowElement]\n *   Filter elements (optional);\n *   `allowedElements` / `disallowedElements` is used first.\n * @property {ReadonlyArray<string> | null | undefined} [allowedElements]\n *   Tag names to allow (default: all tag names);\n *   cannot combine w/ `disallowedElements`.\n * @property {string | null | undefined} [children]\n *   Markdown.\n * @property {string | null | undefined} [className]\n *   Wrap in a `div` with this class name.\n * @property {Components | null | undefined} [components]\n *   Map tag names to components.\n * @property {ReadonlyArray<string> | null | undefined} [disallowedElements]\n *   Tag names to disallow (default: `[]`);\n *   cannot combine w/ `allowedElements`.\n * @property {PluggableList | null | undefined} [rehypePlugins]\n *   List of rehype plugins to use.\n * @property {PluggableList | null | undefined} [remarkPlugins]\n *   List of remark plugins to use.\n * @property {Readonly<RemarkRehypeOptions> | null | undefined} [remarkRehypeOptions]\n *   Options to pass through to `remark-rehype`.\n * @property {boolean | null | undefined} [skipHtml=false]\n *   Ignore HTML in markdown completely (default: `false`).\n * @property {boolean | null | undefined} [unwrapDisallowed=false]\n *   Extract (unwrap) what’s in disallowed elements (default: `false`);\n *   normally when say `strong` is not allowed, it and it’s children are dropped,\n *   with `unwrapDisallowed` the element itself is replaced by its children.\n * @property {UrlTransform | null | undefined} [urlTransform]\n *   Change URLs (default: `defaultUrlTransform`)\n */\n\n/**\n * @callback UrlTransform\n *   Transform all URLs.\n * @param {string} url\n *   URL.\n * @param {string} key\n *   Property name (example: `'href'`).\n * @param {Readonly<Element>} node\n *   Node.\n * @returns {string | null | undefined}\n *   Transformed URL (optional).\n */\n\nimport {unreachable} from 'devlop'\nimport {toJsxRuntime} from 'hast-util-to-jsx-runtime'\nimport {urlAttributes} from 'html-url-attributes'\nimport {Fragment, jsx, jsxs} from 'react/jsx-runtime'\nimport {createElement, useEffect, useState} from 'react'\nimport remarkParse from 'remark-parse'\nimport remarkRehype from 'remark-rehype'\nimport {unified} from 'unified'\nimport {visit} from 'unist-util-visit'\nimport {VFile} from 'vfile'\n\nconst changelog =\n  'https://github.com/remarkjs/react-markdown/blob/main/changelog.md'\n\n/** @type {PluggableList} */\nconst emptyPlugins = []\n/** @type {Readonly<RemarkRehypeOptions>} */\nconst emptyRemarkRehypeOptions = {allowDangerousHtml: true}\nconst safeProtocol = /^(https?|ircs?|mailto|xmpp)$/i\n\n// Mutable because we `delete` any time it’s used and a message is sent.\n/** @type {ReadonlyArray<Readonly<Deprecation>>} */\nconst deprecations = [\n  {from: 'astPlugins', id: 'remove-buggy-html-in-markdown-parser'},\n  {from: 'allowDangerousHtml', id: 'remove-buggy-html-in-markdown-parser'},\n  {\n    from: 'allowNode',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'allowElement'\n  },\n  {\n    from: 'allowedTypes',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'allowedElements'\n  },\n  {\n    from: 'disallowedTypes',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'disallowedElements'\n  },\n  {from: 'escapeHtml', id: 'remove-buggy-html-in-markdown-parser'},\n  {from: 'includeElementIndex', id: '#remove-includeelementindex'},\n  {\n    from: 'includeNodeIndex',\n    id: 'change-includenodeindex-to-includeelementindex'\n  },\n  {from: 'linkTarget', id: 'remove-linktarget'},\n  {from: 'plugins', id: 'change-plugins-to-remarkplugins', to: 'remarkPlugins'},\n  {from: 'rawSourcePos', id: '#remove-rawsourcepos'},\n  {from: 'renderers', id: 'change-renderers-to-components', to: 'components'},\n  {from: 'source', id: 'change-source-to-children', to: 'children'},\n  {from: 'sourcePos', id: '#remove-sourcepos'},\n  {from: 'transformImageUri', id: '#add-urltransform', to: 'urlTransform'},\n  {from: 'transformLinkUri', id: '#add-urltransform', to: 'urlTransform'}\n]\n\n/**\n * Component to render markdown.\n *\n * This is a synchronous component.\n * When using async plugins,\n * see {@linkcode MarkdownAsync} or {@linkcode MarkdownHooks}.\n *\n * @param {Readonly<Options>} options\n *   Props.\n * @returns {ReactElement}\n *   React element.\n */\nexport function Markdown(options) {\n  const processor = createProcessor(options)\n  const file = createFile(options)\n  return post(processor.runSync(processor.parse(file), file), options)\n}\n\n/**\n * Component to render markdown with support for async plugins\n * through async/await.\n *\n * Components returning promises are supported on the server.\n * For async support on the client,\n * see {@linkcode MarkdownHooks}.\n *\n * @param {Readonly<Options>} options\n *   Props.\n * @returns {Promise<ReactElement>}\n *   Promise to a React element.\n */\nexport async function MarkdownAsync(options) {\n  const processor = createProcessor(options)\n  const file = createFile(options)\n  const tree = await processor.run(processor.parse(file), file)\n  return post(tree, options)\n}\n\n/**\n * Component to render markdown with support for async plugins through hooks.\n *\n * This uses `useEffect` and `useState` hooks.\n * Hooks run on the client and do not immediately render something.\n * For async support on the server,\n * see {@linkcode MarkdownAsync}.\n *\n * @param {Readonly<Options>} options\n *   Props.\n * @returns {ReactElement}\n *   React element.\n */\nexport function MarkdownHooks(options) {\n  const processor = createProcessor(options)\n  const [error, setError] = useState(\n    /** @type {Error | undefined} */ (undefined)\n  )\n  const [tree, setTree] = useState(/** @type {Root | undefined} */ (undefined))\n\n  useEffect(\n    /* c8 ignore next 7 -- hooks are client-only. */\n    function () {\n      const file = createFile(options)\n      processor.run(processor.parse(file), file, function (error, tree) {\n        setError(error)\n        setTree(tree)\n      })\n    },\n    [\n      options.children,\n      options.rehypePlugins,\n      options.remarkPlugins,\n      options.remarkRehypeOptions\n    ]\n  )\n\n  /* c8 ignore next -- hooks are client-only. */\n  if (error) throw error\n\n  /* c8 ignore next -- hooks are client-only. */\n  return tree ? post(tree, options) : createElement(Fragment)\n}\n\n/**\n * Set up the `unified` processor.\n *\n * @param {Readonly<Options>} options\n *   Props.\n * @returns {Processor<MdastRoot, MdastRoot, Root, undefined, undefined>}\n *   Result.\n */\nfunction createProcessor(options) {\n  const rehypePlugins = options.rehypePlugins || emptyPlugins\n  const remarkPlugins = options.remarkPlugins || emptyPlugins\n  const remarkRehypeOptions = options.remarkRehypeOptions\n    ? {...options.remarkRehypeOptions, ...emptyRemarkRehypeOptions}\n    : emptyRemarkRehypeOptions\n\n  const processor = unified()\n    .use(remarkParse)\n    .use(remarkPlugins)\n    .use(remarkRehype, remarkRehypeOptions)\n    .use(rehypePlugins)\n\n  return processor\n}\n\n/**\n * Set up the virtual file.\n *\n * @param {Readonly<Options>} options\n *   Props.\n * @returns {VFile}\n *   Result.\n */\nfunction createFile(options) {\n  const children = options.children || ''\n  const file = new VFile()\n\n  if (typeof children === 'string') {\n    file.value = children\n  } else {\n    unreachable(\n      'Unexpected value `' +\n        children +\n        '` for `children` prop, expected `string`'\n    )\n  }\n\n  return file\n}\n\n/**\n * Process the result from unified some more.\n *\n * @param {Nodes} tree\n *   Tree.\n * @param {Readonly<Options>} options\n *   Props.\n * @returns {ReactElement}\n *   React element.\n */\nfunction post(tree, options) {\n  const allowedElements = options.allowedElements\n  const allowElement = options.allowElement\n  const components = options.components\n  const disallowedElements = options.disallowedElements\n  const skipHtml = options.skipHtml\n  const unwrapDisallowed = options.unwrapDisallowed\n  const urlTransform = options.urlTransform || defaultUrlTransform\n\n  for (const deprecation of deprecations) {\n    if (Object.hasOwn(options, deprecation.from)) {\n      unreachable(\n        'Unexpected `' +\n          deprecation.from +\n          '` prop, ' +\n          (deprecation.to\n            ? 'use `' + deprecation.to + '` instead'\n            : 'remove it') +\n          ' (see <' +\n          changelog +\n          '#' +\n          deprecation.id +\n          '> for more info)'\n      )\n    }\n  }\n\n  if (allowedElements && disallowedElements) {\n    unreachable(\n      'Unexpected combined `allowedElements` and `disallowedElements`, expected one or the other'\n    )\n  }\n\n  // Wrap in `div` if there’s a class name.\n  if (options.className) {\n    tree = {\n      type: 'element',\n      tagName: 'div',\n      properties: {className: options.className},\n      // Assume no doctypes.\n      children: /** @type {Array<ElementContent>} */ (\n        tree.type === 'root' ? tree.children : [tree]\n      )\n    }\n  }\n\n  visit(tree, transform)\n\n  return toJsxRuntime(tree, {\n    Fragment,\n    // @ts-expect-error\n    // React components are allowed to return numbers,\n    // but not according to the types in hast-util-to-jsx-runtime\n    components,\n    ignoreInvalidStyle: true,\n    jsx,\n    jsxs,\n    passKeys: true,\n    passNode: true\n  })\n\n  /** @type {BuildVisitor<Root>} */\n  function transform(node, index, parent) {\n    if (node.type === 'raw' && parent && typeof index === 'number') {\n      if (skipHtml) {\n        parent.children.splice(index, 1)\n      } else {\n        parent.children[index] = {type: 'text', value: node.value}\n      }\n\n      return index\n    }\n\n    if (node.type === 'element') {\n      /** @type {string} */\n      let key\n\n      for (key in urlAttributes) {\n        if (\n          Object.hasOwn(urlAttributes, key) &&\n          Object.hasOwn(node.properties, key)\n        ) {\n          const value = node.properties[key]\n          const test = urlAttributes[key]\n          if (test === null || test.includes(node.tagName)) {\n            node.properties[key] = urlTransform(String(value || ''), key, node)\n          }\n        }\n      }\n    }\n\n    if (node.type === 'element') {\n      let remove = allowedElements\n        ? !allowedElements.includes(node.tagName)\n        : disallowedElements\n          ? disallowedElements.includes(node.tagName)\n          : false\n\n      if (!remove && allowElement && typeof index === 'number') {\n        remove = !allowElement(node, index, parent)\n      }\n\n      if (remove && parent && typeof index === 'number') {\n        if (unwrapDisallowed && node.children) {\n          parent.children.splice(index, 1, ...node.children)\n        } else {\n          parent.children.splice(index, 1)\n        }\n\n        return index\n      }\n    }\n  }\n}\n\n/**\n * Make a URL safe.\n *\n * @satisfies {UrlTransform}\n * @param {string} value\n *   URL.\n * @returns {string}\n *   Safe URL.\n */\nexport function defaultUrlTransform(value) {\n  // Same as:\n  // <https://github.com/micromark/micromark/blob/929275e/packages/micromark-util-sanitize-uri/dev/index.js#L34>\n  // But without the `encode` part.\n  const colon = value.indexOf(':')\n  const questionMark = value.indexOf('?')\n  const numberSign = value.indexOf('#')\n  const slash = value.indexOf('/')\n\n  if (\n    // If there is no protocol, it’s relative.\n    colon === -1 ||\n    // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n    (slash !== -1 && colon > slash) ||\n    (questionMark !== -1 && colon > questionMark) ||\n    (numberSign !== -1 && colon > numberSign) ||\n    // It is a protocol, it should be allowed.\n    safeProtocol.test(value.slice(0, colon))\n  ) {\n    return value\n  }\n\n  return ''\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @template Fn\n * @template Fallback\n * @typedef {Fn extends (value: any) => value is infer Thing ? Thing : Fallback} Predicate\n */\n\n/**\n * @callback Check\n *   Check that an arbitrary value is a node.\n * @param {unknown} this\n *   The given context.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n *\n * @typedef {Record<string, unknown> | Node} Props\n *   Object to check for equivalence.\n *\n *   Note: `Node` is included as it is common but is not indexable.\n *\n * @typedef {Array<Props | TestFunction | string> | Props | TestFunction | string | null | undefined} Test\n *   Check for an arbitrary node.\n *\n * @callback TestFunction\n *   Check if a node passes a test.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | undefined | void}\n *   Whether this node passes the test.\n *\n *   Note: `void` is included until TS sees no return as `undefined`.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param {unknown} node\n *   Thing to check, typically `Node`.\n * @param {Test} test\n *   A check for a specific node.\n * @param {number | null | undefined} index\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} parent\n *   The node’s parent.\n * @param {unknown} context\n *   Context object (`this`) to pass to `test` functions.\n * @returns {boolean}\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((node?: null | undefined) => false) &\n   *   ((node: unknown, test?: null | undefined, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((node: unknown, test?: Test, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function (node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      return looksLikeANode(node)\n        ? check.call(context, node, index, parent)\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param {Test} test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns {Check}\n *   An assertion.\n */\nexport const convert =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((test?: Test) => Check)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {Check}\n     */\n    function (test) {\n      if (test === null || test === undefined) {\n        return ok\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<Props | TestFunction | string>} tests\n * @returns {Check}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<Check>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @type {TestFunction}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].apply(this, parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {Check}\n */\nfunction propsFactory(check) {\n  const checkAsRecord = /** @type {Record<string, unknown>} */ (check)\n\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    const nodeAsRecord = /** @type {Record<string, unknown>} */ (\n      /** @type {unknown} */ (node)\n    )\n\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      if (nodeAsRecord[key] !== checkAsRecord[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {Check}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunction} testFunction\n * @returns {Check}\n */\nfunction castFactory(testFunction) {\n  return check\n\n  /**\n   * @this {unknown}\n   * @type {Check}\n   */\n  function check(value, index, parent) {\n    return Boolean(\n      looksLikeANode(value) &&\n        testFunction.call(\n          this,\n          value,\n          typeof index === 'number' ? index : undefined,\n          parent || undefined\n        )\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n\n/**\n * @param {unknown} value\n * @returns {value is Node}\n */\nfunction looksLikeANode(value) {\n  return value !== null && typeof value === 'object' && 'type' in value\n}\n","import StyleToObject from 'style-to-object';\n\nimport { camelCase, CamelCaseOptions } from './utilities';\n\ntype StyleObject = Record<string, string>;\n\ninterface StyleToJSOptions extends CamelCaseOptions {}\n\n/**\n * Parses CSS inline style to JavaScript object (camelCased).\n */\nfunction StyleToJS(style: string, options?: StyleToJSOptions): StyleObject {\n  const output: StyleObject = {};\n\n  if (!style || typeof style !== 'string') {\n    return output;\n  }\n\n  StyleToObject(style, (property, value) => {\n    // skip CSS comment\n    if (property && value) {\n      output[camelCase(property, options)] = value;\n    }\n  });\n\n  return output;\n}\n\nStyleToJS.default = StyleToJS;\n\nexport = StyleToJS;\n","/**\n * @typedef {import('mdast').Nodes} Nodes\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s (default: `true`).\n * @property {boolean | null | undefined} [includeHtml=true]\n *   Whether to use `value` of HTML (default: `true`).\n */\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} [value]\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const settings = options || emptyOptions\n  const includeImageAlt =\n    typeof settings.includeImageAlt === 'boolean'\n      ? settings.includeImageAlt\n      : true\n  const includeHtml =\n    typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true\n\n  return one(value, includeImageAlt, includeHtml)\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt, includeHtml) {\n  if (node(value)) {\n    if ('value' in value) {\n      return value.type === 'html' && !includeHtml ? '' : value.value\n    }\n\n    if (includeImageAlt && 'alt' in value && value.alt) {\n      return value.alt\n    }\n\n    if ('children' in value) {\n      return all(value.children, includeImageAlt, includeHtml)\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return all(value, includeImageAlt, includeHtml)\n  }\n\n  return ''\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt, includeHtml) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt, includeHtml)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Nodes}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n","/**\n * Normalize an identifier (as found in references, definitions).\n *\n * Collapses markdown whitespace, trim, and then lower- and uppercase.\n *\n * Some characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their\n * lowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different\n * uppercase character (U+0398 (`Θ`)).\n * So, to get a canonical form, we perform both lower- and uppercase.\n *\n * Using uppercase last makes sure keys will never interact with default\n * prototypal values (such as `constructor`): nothing in the prototype of\n * `Object` is uppercase.\n *\n * @param {string} value\n *   Identifier to normalize.\n * @returns {string}\n *   Normalized identifier.\n */\nexport function normalizeIdentifier(value) {\n  return value\n  // Collapse markdown whitespace.\n  .replace(/[\\t\\n\\r ]+/g, \" \")\n  // Trim.\n  .replace(/^ | $/g, '')\n  // Some characters are considered “uppercase”, but if their lowercase\n  // counterpart is uppercased will result in a different uppercase\n  // character.\n  // Hence, to get that form, we perform both lower- and uppercase.\n  // Upper case makes sure keys will not interact with default prototypal\n  // methods: no method is uppercase.\n  .toLowerCase().toUpperCase();\n}","import type { Declaration } from 'inline-style-parser';\nimport parse from 'inline-style-parser';\n\nexport { Declaration };\n\ninterface StyleObject {\n  [name: string]: string;\n}\n\ntype Iterator = (\n  property: string,\n  value: string,\n  declaration: Declaration,\n) => void;\n\n/**\n * Parses inline style to object.\n *\n * @param style - Inline style.\n * @param iterator - Iterator.\n * @returns - Style object or null.\n *\n * @example Parsing inline style to object:\n *\n * ```js\n * import parse from 'style-to-object';\n * parse('line-height: 42;'); // { 'line-height': '42' }\n * ```\n */\nexport default function StyleToObject(\n  style: string,\n  iterator?: Iterator,\n): StyleObject | null {\n  let styleObject: StyleObject | null = null;\n\n  if (!style || typeof style !== 'string') {\n    return styleObject;\n  }\n\n  const declarations = parse(style);\n  const hasIterator = typeof iterator === 'function';\n\n  declarations.forEach((declaration) => {\n    if (declaration.type !== 'declaration') {\n      return;\n    }\n\n    const { property, value } = declaration;\n\n    if (hasIterator) {\n      iterator(property, value, declaration);\n    } else if (value) {\n      styleObject = styleObject || {};\n      styleObject[property] = value;\n    }\n  });\n\n  return styleObject;\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n// To do: use types from `unist-util-visit-parents` when it’s released.\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends UnistNode ? number | undefined : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends UnistParent ? Ancestor | undefined : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [Ancestor=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Visited, Parent<Ancestor, Visited>>} BuildVisitorFromMatch\n *   Build a typed `Visitor` function from a node and all possible parents.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Visited\n *   Node type.\n * @template {UnistParent} Ancestor\n *   Parent type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     Matches<Descendant, Check>,\n *     Extract<Descendant, UnistParent>\n *   >\n * )} BuildVisitorFromDescendants\n *   Build a typed `Visitor` function from a list of descendants and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Node type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} testOrVisitor\n *   `unist-util-is`-compatible test (optional, omit to pass a visitor).\n * @param {Visitor | boolean | null | undefined} [visitorOrReverse]\n *   Handle each node (when test is omitted, pass `reverse`).\n * @param {boolean | null | undefined} [maybeReverse=false]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visit(tree, testOrVisitor, visitorOrReverse, maybeReverse) {\n  /** @type {boolean | null | undefined} */\n  let reverse\n  /** @type {Test} */\n  let test\n  /** @type {Visitor} */\n  let visitor\n\n  if (\n    typeof testOrVisitor === 'function' &&\n    typeof visitorOrReverse !== 'function'\n  ) {\n    test = undefined\n    visitor = testOrVisitor\n    reverse = visitorOrReverse\n  } else {\n    // @ts-expect-error: assume the overload with test was given.\n    test = testOrVisitor\n    // @ts-expect-error: assume the overload with test was given.\n    visitor = visitorOrReverse\n    reverse = maybeReverse\n  }\n\n  visitParents(tree, test, overload, reverse)\n\n  /**\n   * @param {UnistNode} node\n   * @param {Array<UnistParent>} parents\n   */\n  function overload(node, parents) {\n    const parent = parents[parents.length - 1]\n    const index = parent ? parent.children.indexOf(node) : undefined\n    return visitor(node, index, parent)\n  }\n}\n","// http://www.w3.org/TR/CSS21/grammar.html\n// https://github.com/visionmedia/css-parse/pull/49#issuecomment-30088027\nvar COMMENT_REGEX = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g;\n\nvar NEWLINE_REGEX = /\\n/g;\nvar WHITESPACE_REGEX = /^\\s*/;\n\n// declaration\nvar PROPERTY_REGEX = /^(\\*?[-#/*\\\\\\w]+(\\[[0-9a-z_-]+\\])?)\\s*/;\nvar COLON_REGEX = /^:\\s*/;\nvar VALUE_REGEX = /^((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^)]*?\\)|[^};])+)/;\nvar SEMICOLON_REGEX = /^[;\\s]*/;\n\n// https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/Trim#Polyfill\nvar TRIM_REGEX = /^\\s+|\\s+$/g;\n\n// strings\nvar NEWLINE = '\\n';\nvar FORWARD_SLASH = '/';\nvar ASTERISK = '*';\nvar EMPTY_STRING = '';\n\n// types\nvar TYPE_COMMENT = 'comment';\nvar TYPE_DECLARATION = 'declaration';\n\n/**\n * @param {String} style\n * @param {Object} [options]\n * @return {Object[]}\n * @throws {TypeError}\n * @throws {Error}\n */\nmodule.exports = function (style, options) {\n  if (typeof style !== 'string') {\n    throw new TypeError('First argument must be a string');\n  }\n\n  if (!style) return [];\n\n  options = options || {};\n\n  /**\n   * Positional.\n   */\n  var lineno = 1;\n  var column = 1;\n\n  /**\n   * Update lineno and column based on `str`.\n   *\n   * @param {String} str\n   */\n  function updatePosition(str) {\n    var lines = str.match(NEWLINE_REGEX);\n    if (lines) lineno += lines.length;\n    var i = str.lastIndexOf(NEWLINE);\n    column = ~i ? str.length - i : column + str.length;\n  }\n\n  /**\n   * Mark position and patch `node.position`.\n   *\n   * @return {Function}\n   */\n  function position() {\n    var start = { line: lineno, column: column };\n    return function (node) {\n      node.position = new Position(start);\n      whitespace();\n      return node;\n    };\n  }\n\n  /**\n   * Store position information for a node.\n   *\n   * @constructor\n   * @property {Object} start\n   * @property {Object} end\n   * @property {undefined|String} source\n   */\n  function Position(start) {\n    this.start = start;\n    this.end = { line: lineno, column: column };\n    this.source = options.source;\n  }\n\n  /**\n   * Non-enumerable source string.\n   */\n  Position.prototype.content = style;\n\n  var errorsList = [];\n\n  /**\n   * Error `msg`.\n   *\n   * @param {String} msg\n   * @throws {Error}\n   */\n  function error(msg) {\n    var err = new Error(\n      options.source + ':' + lineno + ':' + column + ': ' + msg\n    );\n    err.reason = msg;\n    err.filename = options.source;\n    err.line = lineno;\n    err.column = column;\n    err.source = style;\n\n    if (options.silent) {\n      errorsList.push(err);\n    } else {\n      throw err;\n    }\n  }\n\n  /**\n   * Match `re` and return captures.\n   *\n   * @param {RegExp} re\n   * @return {undefined|Array}\n   */\n  function match(re) {\n    var m = re.exec(style);\n    if (!m) return;\n    var str = m[0];\n    updatePosition(str);\n    style = style.slice(str.length);\n    return m;\n  }\n\n  /**\n   * Parse whitespace.\n   */\n  function whitespace() {\n    match(WHITESPACE_REGEX);\n  }\n\n  /**\n   * Parse comments.\n   *\n   * @param {Object[]} [rules]\n   * @return {Object[]}\n   */\n  function comments(rules) {\n    var c;\n    rules = rules || [];\n    while ((c = comment())) {\n      if (c !== false) {\n        rules.push(c);\n      }\n    }\n    return rules;\n  }\n\n  /**\n   * Parse comment.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function comment() {\n    var pos = position();\n    if (FORWARD_SLASH != style.charAt(0) || ASTERISK != style.charAt(1)) return;\n\n    var i = 2;\n    while (\n      EMPTY_STRING != style.charAt(i) &&\n      (ASTERISK != style.charAt(i) || FORWARD_SLASH != style.charAt(i + 1))\n    ) {\n      ++i;\n    }\n    i += 2;\n\n    if (EMPTY_STRING === style.charAt(i - 1)) {\n      return error('End of comment missing');\n    }\n\n    var str = style.slice(2, i - 2);\n    column += 2;\n    updatePosition(str);\n    style = style.slice(i);\n    column += 2;\n\n    return pos({\n      type: TYPE_COMMENT,\n      comment: str\n    });\n  }\n\n  /**\n   * Parse declaration.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function declaration() {\n    var pos = position();\n\n    // prop\n    var prop = match(PROPERTY_REGEX);\n    if (!prop) return;\n    comment();\n\n    // :\n    if (!match(COLON_REGEX)) return error(\"property missing ':'\");\n\n    // val\n    var val = match(VALUE_REGEX);\n\n    var ret = pos({\n      type: TYPE_DECLARATION,\n      property: trim(prop[0].replace(COMMENT_REGEX, EMPTY_STRING)),\n      value: val\n        ? trim(val[0].replace(COMMENT_REGEX, EMPTY_STRING))\n        : EMPTY_STRING\n    });\n\n    // ;\n    match(SEMICOLON_REGEX);\n\n    return ret;\n  }\n\n  /**\n   * Parse declarations.\n   *\n   * @return {Object[]}\n   */\n  function declarations() {\n    var decls = [];\n\n    comments(decls);\n\n    // declarations\n    var decl;\n    while ((decl = declaration())) {\n      if (decl !== false) {\n        decls.push(decl);\n        comments(decls);\n      }\n    }\n\n    return decls;\n  }\n\n  whitespace();\n  return declarations();\n};\n\n/**\n * Trim `str`.\n *\n * @param {String} str\n * @return {String}\n */\nfunction trim(str) {\n  return str ? str.replace(TRIM_REGEX, EMPTY_STRING) : EMPTY_STRING;\n}\n","export function deprecate(fn) {\n  return fn\n}\n\nexport function equal() {}\n\nexport function ok() {}\n\nexport function unreachable() {}\n"],"names":["splice","list","start","remove","items","end","length","parameters","chunkStart","Array","from","unshift","slice","push","classifyCharacter","code","markdownLineEndingOrSpace","unicodeWhitespace","unicodePunctuation","resolveAll","constructs","events","context","called","index","resolve","includes","asciiAlpha","regexCheck","asciiAlphanumeric","asciiAtext","asciiControl","asciiDigit","asciiHexDigit","asciiPunctuation","markdownLineEnding","markdownSpace","regex","test","String","fromCharCode","hasOwnProperty","combineExtensions","extensions","all","syntaxExtension","extension","hook","left","call","undefined","right","value","isArray","existing","before","add","factorySpace","effects","ok","type","max","limit","Number","POSITIVE_INFINITY","size","enter","prefix","consume","exit","hasOwn","Object","prototype","toStr","toString","defineProperty","gOPD","getOwnPropertyDescriptor","arr","isPlainObject","obj","key","hasOwnConstructor","hasIsPrototypeOf","constructor","setProperty","target","options","name","enumerable","configurable","newValue","writable","getProperty","module","exports","extend","src","copy","copyIsArray","clone","arguments","i","deep","CUSTOM_PROPERTY_REGEX","HYPHEN_REGEX","NO_HYPHEN_REGEX","VENDOR_PREFIX_REGEX","MS_VENDOR_PREFIX_REGEX","capitalize","match","character","toUpperCase","trimHyphen","concat","property","skipCamelCase","toLowerCase","reactCompat","replace","empty","CONTINUE","EXIT","SKIP","visitParents","tree","visitor","reverse","check","is","convert","step","factory","node","parents","tagName","visit","subresult","offset","grandparents","result","toResult","children","nodeAsParent","child","blankLine","partial","tokenize","nok","after","nameRe","nameReJsx","emptyOptions","jsx","re","Schema","normal","space","this","merge","definitions","definition","assign","normalize","Info","attribute","booleanish","boolean","commaOrSpaceSeparated","commaSeparated","defined","mustUseProperty","number","overloadedBoolean","spaceSeparated","powers","increment","checks","keys","types","DefinedInfo","mask","super","mark","values","create","properties","normals","entries","info","transform","attributes","aria","ariaActiveDescendant","ariaAtomic","ariaAutoComplete","ariaBusy","ariaChecked","ariaColCount","ariaColIndex","ariaColSpan","ariaControls","ariaCurrent","ariaDescribedBy","ariaDetails","ariaDisabled","ariaDropEffect","ariaErrorMessage","ariaExpanded","ariaFlowTo","ariaGrabbed","ariaHasPopup","ariaHidden","ariaInvalid","ariaKeyShortcuts","ariaLabel","ariaLabelledBy","ariaLevel","ariaLive","ariaModal","ariaMultiLine","ariaMultiSelectable","ariaOrientation","ariaOwns","ariaPlaceholder","ariaPosInSet","ariaPressed","ariaReadOnly","ariaRelevant","ariaRequired","ariaRoleDescription","ariaRowCount","ariaRowIndex","ariaRowSpan","ariaSelected","ariaSetSize","ariaSort","ariaValueMax","ariaValueMin","ariaValueNow","ariaValueText","role","_","caseSensitiveTransform","caseInsensitiveTransform","html","acceptcharset","classname","htmlfor","httpequiv","abbr","accept","acceptCharset","accessKey","action","allow","allowFullScreen","allowPaymentRequest","allowUserMedia","alt","as","async","autoCapitalize","autoComplete","autoFocus","autoPlay","blocking","capture","charSet","checked","cite","className","cols","colSpan","content","contentEditable","controls","controlsList","coords","crossOrigin","data","dateTime","decoding","default","defer","dir","dirName","disabled","download","draggable","encType","enterKeyHint","fetchPriority","form","formAction","formEncType","formMethod","formNoValidate","formTarget","headers","height","hidden","high","href","hrefLang","htmlFor","httpEquiv","id","imageSizes","imageSrcSet","inert","inputMode","integrity","isMap","itemId","itemProp","itemRef","itemScope","itemType","kind","label","lang","language","loading","loop","low","manifest","maxLength","media","method","min","minLength","multiple","muted","nonce","noModule","noValidate","onAbort","onAfterPrint","onAuxClick","onBeforeMatch","onBeforePrint","onBeforeToggle","onBeforeUnload","onBlur","onCancel","onCanPlay","onCanPlayThrough","onChange","onClick","onClose","onContextLost","onContextMenu","onContextRestored","onCopy","onCueChange","onCut","onDblClick","onDrag","onDragEnd","onDragEnter","onDragExit","onDragLeave","onDragOver","onDragStart","onDrop","onDurationChange","onEmptied","onEnded","onError","onFocus","onFormData","onHashChange","onInput","onInvalid","onKeyDown","onKeyPress","onKeyUp","onLanguageChange","onLoad","onLoadedData","onLoadedMetadata","onLoadEnd","onLoadStart","onMessage","onMessageError","onMouseDown","onMouseEnter","onMouseLeave","onMouseMove","onMouseOut","onMouseOver","onMouseUp","onOffline","onOnline","onPageHide","onPageShow","onPaste","onPause","onPlay","onPlaying","onPopState","onProgress","onRateChange","onRejectionHandled","onReset","onResize","onScroll","onScrollEnd","onSecurityPolicyViolation","onSeeked","onSeeking","onSelect","onSlotChange","onStalled","onStorage","onSubmit","onSuspend","onTimeUpdate","onToggle","onUnhandledRejection","onUnload","onVolumeChange","onWaiting","onWheel","open","optimum","pattern","ping","placeholder","playsInline","popover","popoverTarget","popoverTargetAction","poster","preload","readOnly","referrerPolicy","rel","required","reversed","rows","rowSpan","sandbox","scope","scoped","seamless","selected","shadowRootClonable","shadowRootDelegatesFocus","shadowRootMode","shape","sizes","slot","span","spellCheck","srcDoc","srcLang","srcSet","style","tabIndex","title","translate","typeMustMatch","useMap","width","wrap","writingSuggestions","align","aLink","archive","axis","background","bgColor","border","borderColor","bottomMargin","cellPadding","cellSpacing","char","charOff","classId","clear","codeBase","codeType","color","compact","declare","event","face","frame","frameBorder","hSpace","leftMargin","link","longDesc","lowSrc","marginHeight","marginWidth","noResize","noHref","noShade","noWrap","object","profile","prompt","rev","rightMargin","rules","scheme","scrolling","standby","summary","text","topMargin","valueType","version","vAlign","vLink","vSpace","allowTransparency","autoCorrect","autoSave","disablePictureInPicture","disableRemotePlayback","results","security","unselectable","svg","accentHeight","alignmentBaseline","arabicForm","baselineShift","capHeight","clipPath","clipRule","colorInterpolation","colorInterpolationFilters","colorProfile","colorRendering","dataType","dominantBaseline","enableBackground","fillOpacity","fillRule","floodColor","floodOpacity","fontFamily","fontSize","fontSizeAdjust","fontStretch","fontStyle","fontVariant","fontWeight","glyphName","glyphOrientationHorizontal","glyphOrientationVertical","horizAdvX","horizOriginX","horizOriginY","imageRendering","letterSpacing","lightingColor","markerEnd","markerMid","markerStart","navDown","navDownLeft","navDownRight","navLeft","navNext","navPrev","navRight","navUp","navUpLeft","navUpRight","onActivate","onBegin","onEnd","onFocusIn","onFocusOut","onMouseWheel","onRepeat","onShow","onZoom","overlinePosition","overlineThickness","paintOrder","panose1","pointerEvents","renderingIntent","shapeRendering","stopColor","stopOpacity","strikethroughPosition","strikethroughThickness","strokeDashArray","strokeDashOffset","strokeLineCap","strokeLineJoin","strokeMiterLimit","strokeOpacity","strokeWidth","textAnchor","textDecoration","textRendering","transformOrigin","typeOf","underlinePosition","underlineThickness","unicodeBidi","unicodeRange","unitsPerEm","vAlphabetic","vHanging","vIdeographic","vMathematical","vectorEffect","vertAdvY","vertOriginX","vertOriginY","wordSpacing","writingMode","xHeight","playbackOrder","timelineBegin","about","accumulate","additive","alphabetic","amplitude","ascent","attributeName","attributeType","azimuth","bandwidth","baseFrequency","baseProfile","bbox","begin","bias","by","calcMode","clip","clipPathUnits","contentScriptType","contentStyleType","cursor","cx","cy","d","defaultAction","descent","diffuseConstant","direction","display","dur","divisor","dx","dy","edgeMode","editable","elevation","exponent","externalResourcesRequired","fill","filter","filterRes","filterUnits","focusable","focusHighlight","format","fr","fx","fy","g1","g2","glyphRef","gradientTransform","gradientUnits","handler","hanging","hatchContentUnits","hatchUnits","ideographic","initialVisibility","in","in2","intercept","k","k1","k2","k3","k4","kernelMatrix","kernelUnitLength","keyPoints","keySplines","keyTimes","kerning","lengthAdjust","limitingConeAngle","local","markerHeight","markerUnits","markerWidth","maskContentUnits","maskUnits","mathematical","mediaCharacterEncoding","mediaContentEncodings","mediaSize","mediaTime","mode","numOctaves","observer","opacity","operator","order","orient","orientation","origin","overflow","overlay","path","pathLength","patternContentUnits","patternTransform","patternUnits","phase","pitch","points","pointsAtX","pointsAtY","pointsAtZ","preserveAlpha","preserveAspectRatio","primitiveUnits","propagate","r","radius","refX","refY","repeatCount","repeatDur","requiredExtensions","requiredFeatures","requiredFonts","requiredFormats","resource","restart","rotate","rx","ry","scale","seed","side","slope","snapshotTime","specularConstant","specularExponent","spreadMethod","spacing","startOffset","stdDeviation","stemh","stemv","stitchTiles","string","stroke","surfaceScale","syncBehavior","syncBehaviorDefault","syncMaster","syncTolerance","syncToleranceDefault","systemLanguage","tableValues","targetX","targetY","textLength","transformBehavior","to","u1","u2","unicode","viewBox","viewTarget","visibility","widths","x","x1","x2","xChannelSelector","y","y1","y2","yChannelSelector","z","zoomAndPan","xlink","xLinkActuate","xLinkArcRole","xLinkHref","xLinkRole","xLinkShow","xLinkTitle","xLinkType","xmlns","xmlnsxlink","xmlnsXLink","xml","xmlBase","xmlLang","xmlSpace","htmlBase","svgBase","cap","dash","valid","kebab","$0","camelcase","charAt","hastToReact","pointEnd","point","pointStart","position","line","column","stringifyPosition","pos","VFileMessage","Error","causeOrReason","optionsOrParentOrPlace","reason","legacyCause","place","ancestors","cause","message","ruleId","source","indexOf","parent","fatal","file","stack","actual","expected","note","url","own","emptyMap","Map","tableElements","Set","tableCellElement","docs","toJsxRuntime","Fragment","TypeError","filePath","development","jsxDEV","props","isStaticChildren","columnNumber","fileName","lineNumber","developmentCreate","jsxs","fn","productionCreate","state","components","elementAttributeNameCase","evaluater","createEvaluater","ignoreInvalidStyle","passKeys","passNode","schema","stylePropertyNameCase","tableCellAlignToStyle","one","parentSchema","findComponentFromName","alignValue","prop","createProperty","has","createElementProps","createChildren","thing","addNode","addChildren","pop","element","estree","expression","body","assert","evaluateExpression","crashEstree","mdxExpression","objectExpression","argument","createJsxElementProps","mdxJsxElement","evaluateProgram","mdxEsm","root","countsByName","count","get","set","Type","rest","dashes","find","isNaN","settings","join","padRight","padLeft","trim","commas","styleObject","styleToJs","error","parseStyle","domCasing","cssCasing","transformStyleToCssCasing","transformStylesToCssCasing","allowExpression","identifiers","split","isIdentifierName","computed","Boolean","optional","toDash","urlAttributes","icon","SpliceBuffer","initial","RangeError","shift","setCursor","stop","deleteCount","Math","trunc","removed","chunkedPush","item","pushMany","unshiftMany","n","subtokenize","eventsArray","jumps","lineIndex","otherIndex","otherEvent","subevents","more","_tokenizer","_isInFirstContentOfListItem","contentType","subcontent","_container","eventIndex","token","startPosition","startPositions","tokenizer","parser","_contentTypeTextTrailing","childEvents","gaps","stream","previous","current","adjust","breaks","sliceStream","next","defineSkip","_gfmTasklistFirstContentOfListItem","write","contentStart","attempt","contentInitial","lineStart","document","self","childFlow","childToken","lineStartOffset","continued","containerState","continuation","documentContinue","checkNewContainers","_closeFlow","closeFlow","indexBeforeExits","indexBeforeFlow","exitContainers","documentContinued","currentConstruct","concrete","flowStart","interrupt","_gfmTableDynamicInterruptHack","containerConstruct","thereIsANewContainer","thereIsNoNewContainer","lazy","now","containerContinue","flow","flowContinue","writeToChild","endOfFile","seen","entry","disable","null","chunkInside","contentEnd","continuationConstruct","contentContinue","prefixed","tail","sliceSerialize","flowInitial","afterConstruct","resolver","createResolver","initializeFactory","field","resolveAllLineSuffixes","notText","atBreak","extraResolver","chunks","tabs","bufferIndex","chunk","charCodeAt","_bufferIndex","_index","thematicBreak","marker","sequence","furtherBlankLines","initialBlankLine","notInCurrentItem","indentConstruct","initialSize","atMarker","inside","onBlank","listItemPrefixWhitespaceConstruct","endOfPrefix","otherPrefix","blockQuote","contBefore","factoryDestination","literalType","literalMarkerType","rawType","stringType","balance","enclosedBefore","raw","enclosed","enclosedEscape","rawEscape","factoryLabel","markerType","labelInside","labelEscape","factoryTitle","escape","factoryWhitespace","identifier","labelAfter","normalizeIdentifier","markerAfter","destinationBefore","destinationAfter","titleBefore","afterWhitespace","beforeMarker","titleAfter","titleAfterOptionalWhitespace","codeIndented","afterPrefix","furtherStart","headingAtx","sequenceOpen","sequenceFurther","setextUnderline","resolveTo","heading","paragraph","htmlBlockNames","htmlRawNames","htmlFlow","closingTag","buffer","markerB","declarationOpen","tagCloseStart","continuationDeclarationInside","commentOpenInside","cdataOpenInside","slash","basicSelfClosing","completeClosingTagAfter","completeAttributeNameBefore","completeEnd","completeAttributeName","completeAttributeNameAfter","completeAttributeValueBefore","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","continuationCdataInside","continuationStart","blankLineBefore","continuationAfter","nonLazyContinuationStart","continuationStartNonLazy","continuationBefore","continuationRawEndTag","nonLazyContinuation","codeFenced","closeStart","startBefore","beforeSequenceClose","sequenceClose","sizeOpen","sequenceCloseAfter","initialPrefix","beforeSequenceOpen","infoBefore","atNonLazyBreak","metaBefore","meta","contentBefore","beforeContentChunk","contentChunk","createElement","decodeNamedCharacterReference","characterReference","innerHTML","textContent","numeric","characterEscape","lineEnding","labelEnd","newEvents","close","_inactive","_balanced","group","insideSpan","labelStart","labelEndNok","resourceConstruct","labelEndOk","referenceFullConstruct","referenceNotFull","referenceCollapsedConstruct","resourceBefore","resourceOpen","resourceEnd","resourceDestinationAfter","resourceDestinationMissing","resourceBetween","resourceTitleAfter","referenceFullAfter","referenceFullMissing","referenceCollapsedOpen","labelStartImage","attention","openingSequence","closingSequence","use","nextEvents","_close","_open","movePoint","attentionMarkers","autolink","schemeOrEmailAtext","emailAtext","schemeInsideOrEmailAtext","urlInside","emailAtSignOrDot","emailLabel","emailValue","htmlText","returnState","instruction","tagOpen","declaration","commentEnd","comment","commentClose","lineEndingBefore","cdata","cdataClose","cdataEnd","instructionClose","tagClose","tagCloseBetween","tagOpenBetween","tagOpenAttributeName","tagOpenAttributeNameAfter","tagOpenAttributeValueBefore","tagOpenAttributeValueQuoted","tagOpenAttributeValueUnquoted","tagOpenAttributeValueQuotedAfter","lineEndingAfter","lineEndingAfterPrefix","labelStartLink","hardBreakEscape","codeText","tailExitIndex","headEnterIndex","between","resolveText","createTokenizer","initialize","columnStart","resolveAllConstructs","consumed","constructFactory","construct","addResult","onsuccessfulcheck","accountForPotentialSkip","fields","expandTabs","atTab","serializeChunks","main","expectedCode","startIndex","startBufferIndex","endIndex","endBufferIndex","view","head","sliceChunks","chunkIndex","go","restore","onreturn","bogusState","listOfConstructs","constructIndex","handleListOfConstructs","map","handleMapOfConstructs","handleConstruct","startPoint","startPrevious","startCurrentConstruct","startEventsIndex","startStack","store","search","decodeNumericCharacterReference","base","parseInt","fromCodePoint","characterEscapeOrReference","decode","$1","$2","hex","fromMarkdown","encoding","config","transforms","canContainEols","opener","autolinkProtocol","onenterdata","autolinkEmail","atxHeading","codeFlow","codeFencedFenceInfo","codeFencedFenceMeta","codeTextData","codeFlowValue","definitionDestinationString","definitionLabelString","definitionTitleString","emphasis","hardBreak","hardBreakTrailing","htmlFlowData","htmlTextData","image","listItem","listItemValue","onenterlistitemvalue","listOrdered","onenterlistordered","listUnordered","reference","onenterreference","referenceString","resourceDestinationString","resourceTitleString","setextHeading","strong","closer","atxHeadingSequence","onexitatxheadingsequence","onexitautolinkemail","onexitautolinkprotocol","characterEscapeValue","onexitdata","characterReferenceMarkerHexadecimal","onexitcharacterreferencemarker","characterReferenceMarkerNumeric","characterReferenceValue","onexitcharacterreferencevalue","onexitcharacterreference","onexitcodefenced","codeFencedFence","onexitcodefencedfence","onexitcodefencedfenceinfo","onexitcodefencedfencemeta","onexitcodeindented","onexitcodetext","onexitdefinitiondestinationstring","onexitdefinitionlabelstring","onexitdefinitiontitlestring","onexithardbreak","onexithtmlflow","onexithtmltext","onexitimage","onexitlabel","labelText","onexitlabeltext","onexitlineending","onexitlink","onexitreferencestring","onexitresourcedestinationstring","onexitresourcetitlestring","onexitresource","onexitsetextheading","setextHeadingLineSequence","onexitsetextheadinglinesequence","setextHeadingText","onexitsetextheadingtext","configure","mdastExtensions","compile","tokenStack","resume","listStack","prepareList","defaultOnError","firstBlankLineIndex","containerBalance","listSpread","tailIndex","tailEvent","_spread","and","errorHandler","onExitError","expectingFirstListItemValue","flowCodeInside","depth","setextHeadingSlurpLineEnding","codePointAt","siblings","atHardBreak","inReference","referenceType","ancestor","decodeString","fragment","characterReferenceType","ordered","spread","compiler","postprocess","defaultConstructs","parse","atCarriageReturn","endPosition","TextDecoder","lastIndex","exec","ceil","preprocess","combined","remarkParse","doc","env","globalThis","deserialize","serialized","deserializer","$","out","unpair","Date","flags","RegExp","BigInt","Uint8Array","DataView","EMPTY","asString","shouldSkip","_ref","TYPE","serialize","json","lossy","serializer","strict","pair","valueOf","toJSON","toISOString","structuredClone","any","normalizeUri","skip","encodeURIComponent","defaultFootnoteBackContent","rereferenceIndex","defaultFootnoteBackLabel","referenceIndex","revert","subtype","suffix","contents","listItemLoose","trimLines","last","lines","trimLine","handlers","blockquote","patch","applyData","break","delete","footnoteReference","clobberPrefix","safeId","footnoteOrder","counter","reuseCounter","footnoteCounts","dataFootnoteRef","sup","allowDangerousHtml","imageReference","definitionById","inlineCode","linkReference","loose","listLoose","table","firstRow","tableContent","tableCell","tableRow","cellIndex","cells","cell","toml","ignore","yaml","footnoteDefinition","hName","hChildren","hProperties","defaultUnknownHandler","nodes","trimMarkdownSpaceStart","toHast","footnoteById","defaultHandlers","handle","passThrough","shallow","unknownHandler","createState","foot","footnoteBackContent","footnoteBackLabel","footnoteLabel","footnoteLabelTagName","footnoteLabelProperties","listItems","backReferences","counts","dataFootnoteBackref","tailTail","dataFootnotes","footer","remarkRehype","destination","hastTree","run","bail","getPrototypeOf","Symbol","toStringTag","iterator","trough","fns","pipeline","_len","_key","middlewareIndex","callback","_len2","output","_key2","middleware","wrapped","_len3","_key3","fnExpectsCallback","done","apply","then","_len4","_key4","middelware","minpath","basename","extname","assertPath","seenNonSlash","firstNonSlashEnd","extnameIndex","dirname","unmatchedSlash","startPart","startDot","preDotState","joined","segments","absolute","allowAboveRoot","lastSlashIndex","lastSegmentLength","lastSlash","dots","lastIndexOf","normalizeString","sep","JSON","stringify","minproc","cwd","isUrl","fileUrlOrPath","protocol","auth","urlToPath","URL","hostname","pathname","third","decodeURIComponent","getPathFromURLPosix","VFile","isUint8Array","history","messages","stored","assertNonEmpty","assertPart","stem","fail","part","CallableInstance","proto","setPrototypeOf","Processor","Compiler","Parser","attachers","freezeIndex","frozen","namespace","transformers","attacher","assertUnfrozen","freeze","transformer","realFile","vfile","assertParser","process","assertCompiler","executor","Promise","reject","parseTree","realDone","compileTree","compileResult","processSync","complete","assertDone","assertNode","outputTree","resultingTree","runSync","addPlugin","addList","addPreset","plugin","plugins","entryIndex","primary","currentPrimary","isPlainObj","unified","asyncName","looksLikeAVFile","changelog","emptyPlugins","emptyRemarkRehypeOptions","safeProtocol","deprecations","Markdown","processor","createProcessor","createFile","post","rehypePlugins","remarkPlugins","remarkRehypeOptions","unreachable","allowedElements","allowElement","disallowedElements","skipHtml","unwrapDisallowed","urlTransform","defaultUrlTransform","deprecation","colon","questionMark","numberSign","castFactory","tests","anyFactory","checkAsRecord","nodeAsRecord","propsFactory","typeFactory","testFunction","looksLikeANode","style_to_object_1","require","utilities_1","StyleToJS","camelCase","includeImageAlt","includeHtml","declarations","inline_style_parser_1","hasIterator","forEach","__importDefault","testOrVisitor","visitorOrReverse","maybeReverse","COMMENT_REGEX","NEWLINE_REGEX","WHITESPACE_REGEX","PROPERTY_REGEX","COLON_REGEX","VALUE_REGEX","SEMICOLON_REGEX","TRIM_REGEX","EMPTY_STRING","str","lineno","updatePosition","Position","whitespace","errorsList","msg","err","filename","silent","m","comments","c","val","ret","decl","decls"],"sourceRoot":""}