{"version":3,"file":"static/js/475.e552a728.chunk.js","mappings":"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","sources":["../node_modules/@mui/icons-material/esm/PersonAddOutlined.js","pages/Register.js"],"sourcesContent":["\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M15 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4m0-6c1.1 0 2 .9 2 2s-.9 2-2 2-2-.9-2-2 .9-2 2-2m0 8c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4m-6 4c.22-.72 3.31-2 6-2 2.7 0 5.8 1.29 6 2zm-3-3v-3h3v-2H6V7H4v3H1v2h3v3z\"\n}), 'PersonAddOutlined');","import React, { useState, useContext, useEffect } from 'react';\nimport { Link as RouterLink, useNavigate } from 'react-router-dom';\nimport {\n  Container,\n  Box,\n  Typography,\n  TextField,\n  Button,\n  Grid,\n  Link,\n  Paper,\n  Avatar,\n  CircularProgress,\n  Alert,\n  MenuItem,\n  FormControl,\n  InputLabel,\n  Select,\n  FormHelperText,\n  Divider,\n} from '@mui/material';\nimport { PersonAddOutlined as PersonAddOutlinedIcon } from '@mui/icons-material';\nimport { useFormik } from 'formik';\nimport * as Yup from 'yup';\n\nimport AuthContext from '../context/AuthContext';\n\nconst Register = () => {\n  const { register, isAuthenticated, loading, error, clearError } = useContext(AuthContext);\n  const navigate = useNavigate();\n  const [localError, setLocalError] = useState('');\n  \n  // Redirect if already authenticated\n  useEffect(() => {\n    if (isAuthenticated) {\n      navigate('/dashboard');\n    }\n    \n    // Clear error when component unmounts\n    return () => {\n      clearError();\n    };\n  }, [isAuthenticated, navigate, clearError]);\n  \n  // Form validation schema\n  const validationSchema = Yup.object({\n    name: Yup.string()\n      .required('Name is required')\n      .min(2, 'Name should be at least 2 characters')\n      .max(50, 'Name should be less than 50 characters'),\n    email: Yup.string()\n      .email('Enter a valid email')\n      .required('Email is required'),\n    password: Yup.string()\n      .required('Password is required')\n      .min(6, 'Password should be at least 6 characters'),\n    confirmPassword: Yup.string()\n      .oneOf([Yup.ref('password'), null], 'Passwords must match')\n      .required('Confirm your password'),\n    level: Yup.string()\n      .oneOf(['beginner', 'intermediate', 'advanced'], 'Select a valid learning level')\n      .required('Learning level is required'),\n    learningStyle: Yup.string()\n      .oneOf(['visual', 'auditory', 'reading', 'kinesthetic', 'multimodal'], 'Select a valid learning style')\n      .required('Learning style is required'),\n  });\n  \n  // Form handler\n  const formik = useFormik({\n    initialValues: {\n      name: '',\n      email: '',\n      password: '',\n      confirmPassword: '',\n      level: 'intermediate',\n      learningStyle: 'multimodal',\n      topicsOfInterest: '',\n    },\n    validationSchema,\n    onSubmit: async (values) => {\n      setLocalError('');\n      \n      // Format preferences\n      const preferences = {\n        level: values.level,\n        learningStyle: values.learningStyle,\n        topicsOfInterest: values.topicsOfInterest\n          ? values.topicsOfInterest.split(',').map(topic => topic.trim())\n          : [],\n      };\n      \n      try {\n        // Register user\n        const userData = {\n          name: values.name,\n          email: values.email,\n          password: values.password,\n          preferences,\n        };\n        \n        const success = await register(userData);\n        \n        if (success) {\n          navigate('/dashboard');\n        }\n      } catch (err) {\n        setLocalError('An unexpected error occurred. Please try again.');\n      }\n    }\n  });\n  \n  return (\n    <Container component=\"main\" maxWidth=\"sm\">\n      <Paper\n        elevation={3}\n        sx={{\n          marginTop: 8,\n          marginBottom: 8,\n          padding: 4,\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n        }}\n      >\n        <Avatar sx={{ m: 1, bgcolor: 'secondary.main' }}>\n          <PersonAddOutlinedIcon />\n        </Avatar>\n        \n        <Typography component=\"h1\" variant=\"h5\">\n          Create an Account\n        </Typography>\n        \n        {(error || localError) && (\n          <Alert severity=\"error\" sx={{ mt: 2, width: '100%' }}>\n            {error || localError}\n          </Alert>\n        )}\n        \n        <Box component=\"form\" onSubmit={formik.handleSubmit} sx={{ mt: 3, width: '100%' }}>\n          <Grid container spacing={2}>\n            {/* Personal Information */}\n            <Grid item xs={12}>\n              <Typography variant=\"h6\" gutterBottom>\n                Personal Information\n              </Typography>\n            </Grid>\n            \n            <Grid item xs={12}>\n              <TextField\n                required\n                fullWidth\n                id=\"name\"\n                label=\"Full Name\"\n                name=\"name\"\n                autoComplete=\"name\"\n                value={formik.values.name}\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n                error={formik.touched.name && Boolean(formik.errors.name)}\n                helperText={formik.touched.name && formik.errors.name}\n              />\n            </Grid>\n            \n            <Grid item xs={12}>\n              <TextField\n                required\n                fullWidth\n                id=\"email\"\n                label=\"Email Address\"\n                name=\"email\"\n                autoComplete=\"email\"\n                value={formik.values.email}\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n                error={formik.touched.email && Boolean(formik.errors.email)}\n                helperText={formik.touched.email && formik.errors.email}\n              />\n            </Grid>\n            \n            <Grid item xs={12} sm={6}>\n              <TextField\n                required\n                fullWidth\n                name=\"password\"\n                label=\"Password\"\n                type=\"password\"\n                id=\"password\"\n                autoComplete=\"new-password\"\n                value={formik.values.password}\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n                error={formik.touched.password && Boolean(formik.errors.password)}\n                helperText={formik.touched.password && formik.errors.password}\n              />\n            </Grid>\n            \n            <Grid item xs={12} sm={6}>\n              <TextField\n                required\n                fullWidth\n                name=\"confirmPassword\"\n                label=\"Confirm Password\"\n                type=\"password\"\n                id=\"confirmPassword\"\n                value={formik.values.confirmPassword}\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n                error={formik.touched.confirmPassword && Boolean(formik.errors.confirmPassword)}\n                helperText={formik.touched.confirmPassword && formik.errors.confirmPassword}\n              />\n            </Grid>\n            \n            <Grid item xs={12}>\n              <Divider sx={{ my: 2 }} />\n            </Grid>\n            \n            {/* Learning Preferences */}\n            <Grid item xs={12}>\n              <Typography variant=\"h6\" gutterBottom>\n                Learning Preferences\n              </Typography>\n            </Grid>\n            \n            <Grid item xs={12} sm={6}>\n              <FormControl \n                fullWidth \n                error={formik.touched.level && Boolean(formik.errors.level)}\n              >\n                <InputLabel id=\"level-label\">Learning Level</InputLabel>\n                <Select\n                  labelId=\"level-label\"\n                  id=\"level\"\n                  name=\"level\"\n                  value={formik.values.level}\n                  label=\"Learning Level\"\n                  onChange={formik.handleChange}\n                  onBlur={formik.handleBlur}\n                >\n                  <MenuItem value=\"beginner\">Beginner</MenuItem>\n                  <MenuItem value=\"intermediate\">Intermediate</MenuItem>\n                  <MenuItem value=\"advanced\">Advanced</MenuItem>\n                </Select>\n                {formik.touched.level && formik.errors.level && (\n                  <FormHelperText>{formik.errors.level}</FormHelperText>\n                )}\n              </FormControl>\n            </Grid>\n            \n            <Grid item xs={12} sm={6}>\n              <FormControl \n                fullWidth \n                error={formik.touched.learningStyle && Boolean(formik.errors.learningStyle)}\n              >\n                <InputLabel id=\"learning-style-label\">Learning Style</InputLabel>\n                <Select\n                  labelId=\"learning-style-label\"\n                  id=\"learningStyle\"\n                  name=\"learningStyle\"\n                  value={formik.values.learningStyle}\n                  label=\"Learning Style\"\n                  onChange={formik.handleChange}\n                  onBlur={formik.handleBlur}\n                >\n                  <MenuItem value=\"visual\">Visual</MenuItem>\n                  <MenuItem value=\"auditory\">Auditory</MenuItem>\n                  <MenuItem value=\"reading\">Reading/Writing</MenuItem>\n                  <MenuItem value=\"kinesthetic\">Kinesthetic</MenuItem>\n                  <MenuItem value=\"multimodal\">Multimodal (Mixed)</MenuItem>\n                </Select>\n                {formik.touched.learningStyle && formik.errors.learningStyle && (\n                  <FormHelperText>{formik.errors.learningStyle}</FormHelperText>\n                )}\n              </FormControl>\n            </Grid>\n            \n            <Grid item xs={12}>\n              <TextField\n                fullWidth\n                id=\"topicsOfInterest\"\n                name=\"topicsOfInterest\"\n                label=\"Topics of Interest (comma separated)\"\n                placeholder=\"e.g., Physics, Programming, History\"\n                value={formik.values.topicsOfInterest}\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n                error={formik.touched.topicsOfInterest && Boolean(formik.errors.topicsOfInterest)}\n                helperText={\n                  (formik.touched.topicsOfInterest && formik.errors.topicsOfInterest) ||\n                  \"Enter topics you're interested in learning about, separated by commas\"\n                }\n              />\n            </Grid>\n          </Grid>\n          \n          <Button\n            type=\"submit\"\n            fullWidth\n            variant=\"contained\"\n            sx={{ mt: 3, mb: 2 }}\n            disabled={loading}\n          >\n            {loading ? <CircularProgress size={24} /> : 'Sign Up'}\n          </Button>\n          \n          <Grid container justifyContent=\"flex-end\">\n            <Grid item>\n              <Link component={RouterLink} to=\"/login\" variant=\"body2\">\n                Already have an account? Sign in\n              </Link>\n            </Grid>\n          </Grid>\n        </Box>\n      </Paper>\n    </Container>\n  );\n};\n\nexport default Register;\n"],"names":["createSvgIcon","_jsx","d","Register","register","isAuthenticated","loading","error","clearError","useContext","AuthContext","navigate","useNavigate","localError","setLocalError","useState","useEffect","validationSchema","Yup","name","required","min","max","email","password","confirmPassword","oneOf","level","learningStyle","formik","useFormik","initialValues","topicsOfInterest","onSubmit","async","preferences","values","split","map","topic","trim","userData","err","Container","component","maxWidth","children","_jsxs","Paper","elevation","sx","marginTop","marginBottom","padding","display","flexDirection","alignItems","Avatar","m","bgcolor","PersonAddOutlinedIcon","Typography","variant","Alert","severity","mt","width","Box","handleSubmit","Grid","container","spacing","item","xs","gutterBottom","TextField","fullWidth","id","label","autoComplete","value","onChange","handleChange","onBlur","handleBlur","touched","Boolean","errors","helperText","sm","type","Divider","my","FormControl","InputLabel","Select","labelId","MenuItem","FormHelperText","placeholder","Button","mb","disabled","CircularProgress","size","justifyContent","Link","RouterLink","to"],"sourceRoot":""}