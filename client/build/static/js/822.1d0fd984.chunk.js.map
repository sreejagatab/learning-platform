{"version":3,"file":"static/js/822.1d0fd984.chunk.js","mappings":"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","sources":["pages/LearningPath.js"],"sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport {\n  Container,\n  Typography,\n  Box,\n  Paper,\n  Divider,\n  Button,\n  TextField,\n  CircularProgress,\n  Stepper,\n  Step,\n  StepLabel,\n  StepContent,\n  Card,\n  CardContent,\n  Grid,\n  Chip,\n  IconButton,\n  Alert,\n} from '@mui/material';\nimport {\n  BookmarkAdd as BookmarkIcon,\n  ArrowBack as BackIcon,\n  Share as ShareIcon,\n  Edit as EditIcon,\n} from '@mui/icons-material';\nimport ReactMarkdown from 'react-markdown';\nimport remarkGfm from 'remark-gfm';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { atomDark } from 'react-syntax-highlighter/dist/esm/styles/prism';\nimport { toast } from 'react-toastify';\n\nimport LearningContext from '../context/LearningContext';\n\nconst LearningPath = () => {\n  const { pathId } = useParams();\n  const navigate = useNavigate();\n  const {\n    generateLearningPath,\n    getContentById,\n    saveContent,\n    pathLoading,\n  } = useContext(LearningContext);\n\n  const [topic, setTopic] = useState('');\n  const [level, setLevel] = useState('intermediate');\n  const [loading, setLoading] = useState(false);\n  const [pathData, setPathData] = useState(null);\n  const [activeStep, setActiveStep] = useState(0);\n  const [steps, setSteps] = useState([]);\n\n  // Load existing path if pathId is provided\n  useEffect(() => {\n    const loadPath = async () => {\n      if (pathId) {\n        setLoading(true);\n        try {\n          const data = await getContentById(pathId);\n          if (data) {\n            setPathData({\n              content: data.content,\n              title: data.title,\n              level: data.metadata?.level || 'intermediate',\n              topic: data.metadata?.topic || '',\n              citations: data.metadata?.citations || [],\n            });\n            \n            // Parse content to extract steps\n            parsePathContent(data.content);\n          }\n        } catch (error) {\n          console.error('Error loading learning path:', error);\n          toast.error('Failed to load learning path');\n        } finally {\n          setLoading(false);\n        }\n      }\n    };\n    \n    loadPath();\n  }, [pathId, getContentById]);\n\n  // Parse path content to extract steps\n  const parsePathContent = (content) => {\n    try {\n      // Simple parsing logic - extract sections based on headers\n      const lines = content.split('\\n');\n      const extractedSteps = [];\n      let currentStep = null;\n      \n      lines.forEach(line => {\n        if (line.startsWith('## ')) {\n          // New section (step) found\n          if (currentStep) {\n            extractedSteps.push(currentStep);\n          }\n          currentStep = {\n            label: line.replace('## ', '').trim(),\n            description: '',\n          };\n        } else if (currentStep) {\n          currentStep.description += line + '\\n';\n        }\n      });\n      \n      // Add the last step\n      if (currentStep) {\n        extractedSteps.push(currentStep);\n      }\n      \n      setSteps(extractedSteps.length > 0 ? extractedSteps : [\n        { label: 'Overview', description: content }\n      ]);\n    } catch (error) {\n      console.error('Error parsing path content:', error);\n      setSteps([{ label: 'Overview', description: content }]);\n    }\n  };\n\n  // Handle form submission to create a new learning path\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    \n    if (!topic.trim()) {\n      toast.error('Please enter a topic');\n      return;\n    }\n    \n    setLoading(true);\n    try {\n      const newPath = await generateLearningPath(topic);\n      if (newPath) {\n        setPathData({\n          content: newPath.content,\n          title: `Learning Path: ${topic}`,\n          level,\n          topic,\n          citations: newPath.citations || [],\n        });\n        \n        // Parse content to extract steps\n        parsePathContent(newPath.content);\n        \n        // Update URL to include the new path ID\n        if (newPath.pathId) {\n          navigate(`/learning-path/${newPath.pathId}`, { replace: true });\n        }\n      }\n    } catch (error) {\n      console.error('Error generating learning path:', error);\n      toast.error('Failed to generate learning path');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Handle step navigation\n  const handleNext = () => {\n    setActiveStep((prevActiveStep) => prevActiveStep + 1);\n  };\n\n  const handleBack = () => {\n    setActiveStep((prevActiveStep) => prevActiveStep - 1);\n  };\n\n  const handleReset = () => {\n    setActiveStep(0);\n  };\n\n  // Save path to user's collection\n  const handleSavePath = async () => {\n    if (!pathData) return;\n    \n    try {\n      await saveContent(\n        pathData.title,\n        pathData.content,\n        'learning_path',\n        {\n          topic: pathData.topic,\n          level: pathData.level,\n          citations: pathData.citations,\n        }\n      );\n      \n      toast.success('Learning path saved to your collection');\n    } catch (error) {\n      console.error('Error saving learning path:', error);\n      toast.error('Failed to save learning path');\n    }\n  };\n\n  return (\n    <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\n      {!pathId && !pathData ? (\n        // Form to create a new learning path\n        <Paper sx={{ p: 3 }}>\n          <Typography variant=\"h4\" component=\"h1\" gutterBottom>\n            Create Learning Path\n          </Typography>\n          <Typography variant=\"body1\" paragraph>\n            Generate a structured learning path for any topic based on your knowledge level\n          </Typography>\n          <Divider sx={{ mb: 3 }} />\n          \n          <Box component=\"form\" onSubmit={handleSubmit} sx={{ maxWidth: 600, mx: 'auto' }}>\n            <TextField\n              fullWidth\n              label=\"Topic\"\n              variant=\"outlined\"\n              value={topic}\n              onChange={(e) => setTopic(e.target.value)}\n              placeholder=\"Enter a topic (e.g., Machine Learning, World History, Quantum Physics)\"\n              required\n              sx={{ mb: 3 }}\n            />\n            \n            <TextField\n              select\n              fullWidth\n              label=\"Your Knowledge Level\"\n              value={level}\n              onChange={(e) => setLevel(e.target.value)}\n              SelectProps={{\n                native: true,\n              }}\n              sx={{ mb: 3 }}\n            >\n              <option value=\"beginner\">Beginner</option>\n              <option value=\"intermediate\">Intermediate</option>\n              <option value=\"advanced\">Advanced</option>\n            </TextField>\n            \n            <Button\n              type=\"submit\"\n              variant=\"contained\"\n              color=\"primary\"\n              size=\"large\"\n              fullWidth\n              disabled={loading || pathLoading}\n              sx={{ py: 1.5 }}\n            >\n              {loading || pathLoading ? (\n                <CircularProgress size={24} color=\"inherit\" />\n              ) : (\n                'Generate Learning Path'\n              )}\n            </Button>\n          </Box>\n        </Paper>\n      ) : loading ? (\n        // Loading state\n        <Box sx={{ display: 'flex', justifyContent: 'center', py: 8 }}>\n          <CircularProgress />\n        </Box>\n      ) : pathData ? (\n        // Display learning path\n        <Box>\n          <Box sx={{ mb: 3, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n            <Button\n              startIcon={<BackIcon />}\n              onClick={() => navigate(-1)}\n            >\n              Back\n            </Button>\n            \n            <Box>\n              <IconButton onClick={handleSavePath} title=\"Save Path\">\n                <BookmarkIcon />\n              </IconButton>\n              <IconButton title=\"Share Path\">\n                <ShareIcon />\n              </IconButton>\n              <IconButton title=\"Edit Path\">\n                <EditIcon />\n              </IconButton>\n            </Box>\n          </Box>\n          \n          <Paper sx={{ p: 3, mb: 4 }}>\n            <Typography variant=\"h4\" component=\"h1\" gutterBottom>\n              {pathData.title}\n            </Typography>\n            \n            <Box sx={{ display: 'flex', gap: 1, mb: 2 }}>\n              <Chip \n                label={pathData.level.charAt(0).toUpperCase() + pathData.level.slice(1)} \n                color=\"primary\" \n                variant=\"outlined\" \n              />\n              <Chip \n                label={`${steps.length} sections`} \n                color=\"secondary\" \n                variant=\"outlined\" \n              />\n            </Box>\n            \n            <Alert severity=\"info\" sx={{ mb: 3 }}>\n              This learning path is designed to guide you through {pathData.topic} in a structured way.\n              Follow the steps in order for the best learning experience.\n            </Alert>\n          </Paper>\n          \n          <Grid container spacing={3}>\n            <Grid item xs={12} md={4}>\n              <Paper sx={{ p: 2, position: 'sticky', top: 20 }}>\n                <Typography variant=\"h6\" gutterBottom>\n                  Path Overview\n                </Typography>\n                <Divider sx={{ mb: 2 }} />\n                \n                <Box sx={{ maxHeight: '70vh', overflow: 'auto' }}>\n                  {steps.map((step, index) => (\n                    <Box \n                      key={index}\n                      sx={{ \n                        p: 1, \n                        mb: 1, \n                        borderRadius: 1,\n                        bgcolor: activeStep === index ? 'primary.light' : 'transparent',\n                        cursor: 'pointer',\n                      }}\n                      onClick={() => setActiveStep(index)}\n                    >\n                      <Typography \n                        variant=\"subtitle1\"\n                        sx={{ \n                          fontWeight: activeStep === index ? 'bold' : 'normal',\n                          color: activeStep === index ? 'white' : 'inherit',\n                        }}\n                      >\n                        {index + 1}. {step.label}\n                      </Typography>\n                    </Box>\n                  ))}\n                </Box>\n              </Paper>\n            </Grid>\n            \n            <Grid item xs={12} md={8}>\n              <Paper sx={{ p: 3 }}>\n                <Stepper activeStep={activeStep} orientation=\"vertical\">\n                  {steps.map((step, index) => (\n                    <Step key={index}>\n                      <StepLabel>\n                        <Typography variant=\"h6\">{step.label}</Typography>\n                      </StepLabel>\n                      <StepContent>\n                        <Box sx={{ mb: 2 }}>\n                          <ReactMarkdown\n                            remarkPlugins={[remarkGfm]}\n                            components={{\n                              code({ node, inline, className, children, ...props }) {\n                                const match = /language-(\\w+)/.exec(className || '');\n                                return !inline && match ? (\n                                  <SyntaxHighlighter\n                                    style={atomDark}\n                                    language={match[1]}\n                                    PreTag=\"div\"\n                                    {...props}\n                                  >\n                                    {String(children).replace(/\\n$/, '')}\n                                  </SyntaxHighlighter>\n                                ) : (\n                                  <code className={className} {...props}>\n                                    {children}\n                                  </code>\n                                );\n                              },\n                            }}\n                          >\n                            {step.description}\n                          </ReactMarkdown>\n                        </Box>\n                        <Box sx={{ mb: 2 }}>\n                          <div>\n                            <Button\n                              variant=\"contained\"\n                              onClick={handleNext}\n                              sx={{ mt: 1, mr: 1 }}\n                            >\n                              {index === steps.length - 1 ? 'Finish' : 'Continue'}\n                            </Button>\n                            <Button\n                              disabled={index === 0}\n                              onClick={handleBack}\n                              sx={{ mt: 1, mr: 1 }}\n                            >\n                              Back\n                            </Button>\n                          </div>\n                        </Box>\n                      </StepContent>\n                    </Step>\n                  ))}\n                </Stepper>\n                \n                {activeStep === steps.length && (\n                  <Paper square elevation={0} sx={{ p: 3 }}>\n                    <Typography>All steps completed - you've finished the learning path!</Typography>\n                    <Button onClick={handleReset} sx={{ mt: 1, mr: 1 }}>\n                      Start Over\n                    </Button>\n                  </Paper>\n                )}\n              </Paper>\n            </Grid>\n          </Grid>\n        </Box>\n      ) : (\n        <Typography>No learning path found</Typography>\n      )}\n    </Container>\n  );\n};\n\nexport default LearningPath;\n"],"names":["LearningPath","pathId","useParams","navigate","useNavigate","generateLearningPath","getContentById","saveContent","pathLoading","useContext","LearningContext","topic","setTopic","useState","level","setLevel","loading","setLoading","pathData","setPathData","activeStep","setActiveStep","steps","setSteps","useEffect","async","data","_data$metadata","_data$metadata2","_data$metadata3","content","title","metadata","citations","parsePathContent","error","console","toast","loadPath","lines","split","extractedSteps","currentStep","forEach","line","startsWith","push","label","replace","trim","description","length","handleNext","prevActiveStep","handleBack","_jsx","Container","maxWidth","sx","mt","mb","children","Box","display","justifyContent","py","CircularProgress","_jsxs","alignItems","Button","startIcon","BackIcon","onClick","IconButton","success","BookmarkIcon","ShareIcon","EditIcon","Paper","p","Typography","variant","component","gutterBottom","gap","Chip","charAt","toUpperCase","slice","color","Alert","severity","Grid","container","spacing","item","xs","md","position","top","Divider","maxHeight","overflow","map","step","index","borderRadius","bgcolor","cursor","fontWeight","Stepper","orientation","Step","StepLabel","StepContent","ReactMarkdown","remarkPlugins","remarkGfm","components","code","_ref","node","inline","className","props","match","exec","SyntaxHighlighter","style","atomDark","language","PreTag","String","mr","disabled","square","elevation","handleReset","paragraph","onSubmit","e","preventDefault","newPath","mx","TextField","fullWidth","value","onChange","target","placeholder","required","select","SelectProps","native","type","size"],"sourceRoot":""}